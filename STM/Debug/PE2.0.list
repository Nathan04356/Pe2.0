
PE2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005710  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080057d0  080057d0  000067d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058ac  080058ac  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080058ac  080058ac  000068ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058b4  080058b4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058b4  080058b4  000068b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058b8  080058b8  000068b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080058bc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000068  08005924  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08005924  00007340  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db27  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f92  00000000  00000000  00014bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00016b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fb  00000000  00000000  00017828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b28  00000000  00000000  00018223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f045  00000000  00000000  0002dd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084dea  00000000  00000000  0003cd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1b7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a4  00000000  00000000  000c1bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000c5164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080057b8 	.word	0x080057b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080057b8 	.word	0x080057b8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <_write>:
void driveNormal(uint32_t []);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	e018      	b.n	8000500 <_write+0x44>
		if(ptr[i]=='\n'){
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	68ba      	ldr	r2, [r7, #8]
 80004d2:	18d3      	adds	r3, r2, r3
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b0a      	cmp	r3, #10
 80004d8:	d106      	bne.n	80004e8 <_write+0x2c>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
 80004da:	2301      	movs	r3, #1
 80004dc:	425b      	negs	r3, r3
 80004de:	490d      	ldr	r1, [pc, #52]	@ (8000514 <_write+0x58>)
 80004e0:	480d      	ldr	r0, [pc, #52]	@ (8000518 <_write+0x5c>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	f003 fcb8 	bl	8003e58 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)&ptr[i], 1, HAL_MAX_DELAY);
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	68ba      	ldr	r2, [r7, #8]
 80004ec:	18d1      	adds	r1, r2, r3
 80004ee:	2301      	movs	r3, #1
 80004f0:	425b      	negs	r3, r3
 80004f2:	4809      	ldr	r0, [pc, #36]	@ (8000518 <_write+0x5c>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	f003 fcaf 	bl	8003e58 <HAL_UART_Transmit>
	for(int i = 0; i < len; i++){
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	3301      	adds	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	697a      	ldr	r2, [r7, #20]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	429a      	cmp	r2, r3
 8000506:	dbe2      	blt.n	80004ce <_write+0x12>
	}
    return len;
 8000508:	687b      	ldr	r3, [r7, #4]
}
 800050a:	0018      	movs	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	b006      	add	sp, #24
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	080057d0 	.word	0x080057d0
 8000518:	20000160 	.word	0x20000160

0800051c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(PIN_GPIO_Port, PIN_Pin);
	sample = !HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin); //MSB eerst
 8000524:	2380      	movs	r3, #128	@ 0x80
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	4a1d      	ldr	r2, [pc, #116]	@ (80005a0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800052a:	0019      	movs	r1, r3
 800052c:	0010      	movs	r0, r2
 800052e:	f001 fddd 	bl	80020ec <HAL_GPIO_ReadPin>
 8000532:	0003      	movs	r3, r0
 8000534:	425a      	negs	r2, r3
 8000536:	4153      	adcs	r3, r2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	001a      	movs	r2, r3
 800053c:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800053e:	701a      	strb	r2, [r3, #0]
	data = (data << 1) | sample; //actief lage pin => bit toggelen
 8000540:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	b25a      	sxtb	r2, r3
 8000548:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	b25b      	sxtb	r3, r3
 800054e:	4313      	orrs	r3, r2
 8000550:	b25b      	sxtb	r3, r3
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000556:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim6);
 8000558:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x90>)
 800055a:	0018      	movs	r0, r3
 800055c:	f002 fe1e 	bl	800319c <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000560:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2200      	movs	r2, #0
 8000566:	625a      	str	r2, [r3, #36]	@ 0x24
	if ((data == 0xa4) || (data == 0xa8) || (data == 0xac))
 8000568:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2ba4      	cmp	r3, #164	@ 0xa4
 800056e:	d007      	beq.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x64>
 8000570:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2ba8      	cmp	r3, #168	@ 0xa8
 8000576:	d003      	beq.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x64>
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2bac      	cmp	r3, #172	@ 0xac
 800057e:	d103      	bne.n	8000588 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		data_ready = data;
 8000580:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000586:	701a      	strb	r2, [r3, #0]
	}
	if (data == 0xa1)
 8000588:	4b07      	ldr	r3, [pc, #28]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2ba1      	cmp	r3, #161	@ 0xa1
 800058e:	d103      	bne.n	8000598 <HAL_TIM_PeriodElapsedCallback+0x7c>
	{
		data_beacon = data;
 8000590:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000596:	701a      	strb	r2, [r3, #0]
	}
}
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	b002      	add	sp, #8
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	50000400 	.word	0x50000400
 80005a4:	200001e8 	.word	0x200001e8
 80005a8:	200001e9 	.word	0x200001e9
 80005ac:	20000120 	.word	0x20000120
 80005b0:	200001ea 	.word	0x200001ea
 80005b4:	200001eb 	.word	0x200001eb

080005b8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t IR_EXTI_IRQn)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	0002      	movs	r2, r0
 80005c0:	1dbb      	adds	r3, r7, #6
 80005c2:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 80005c4:	4b03      	ldr	r3, [pc, #12]	@ (80005d4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f002 fd9c 	bl	8003104 <HAL_TIM_Base_Start_IT>
}
 80005cc:	46c0      	nop			@ (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b002      	add	sp, #8
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000120 	.word	0x20000120

080005d8 <readAdc>:
void readAdc(uint32_t result[])
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80005e0:	2508      	movs	r5, #8
 80005e2:	197b      	adds	r3, r7, r5
 80005e4:	0018      	movs	r0, r3
 80005e6:	2308      	movs	r3, #8
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f004 faa2 	bl	8004b34 <memset>

	sConfig.Channel = ADC_CHANNEL_3;
 80005f0:	197b      	adds	r3, r7, r5
 80005f2:	4a2e      	ldr	r2, [pc, #184]	@ (80006ac <readAdc+0xd4>)
 80005f4:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80005f6:	197a      	adds	r2, r7, r5
 80005f8:	4b2d      	ldr	r3, [pc, #180]	@ (80006b0 <readAdc+0xd8>)
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 f9f9 	bl	80019f4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc);
 8000602:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <readAdc+0xd8>)
 8000604:	0018      	movs	r0, r3
 8000606:	f001 f8f9 	bl	80017fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1);
 800060a:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <readAdc+0xd8>)
 800060c:	2101      	movs	r1, #1
 800060e:	0018      	movs	r0, r3
 8000610:	f001 f948 	bl	80018a4 <HAL_ADC_PollForConversion>
	result[1] = HAL_ADC_GetValue(&hadc);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	1d1c      	adds	r4, r3, #4
 8000618:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <readAdc+0xd8>)
 800061a:	0018      	movs	r0, r3
 800061c:	f001 f9de 	bl	80019dc <HAL_ADC_GetValue>
 8000620:	0003      	movs	r3, r0
 8000622:	6023      	str	r3, [r4, #0]

	sConfig.Channel = ADC_CHANNEL_2;
 8000624:	197b      	adds	r3, r7, r5
 8000626:	4a23      	ldr	r2, [pc, #140]	@ (80006b4 <readAdc+0xdc>)
 8000628:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800062a:	197a      	adds	r2, r7, r5
 800062c:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <readAdc+0xd8>)
 800062e:	0011      	movs	r1, r2
 8000630:	0018      	movs	r0, r3
 8000632:	f001 f9df 	bl	80019f4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc);
 8000636:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <readAdc+0xd8>)
 8000638:	0018      	movs	r0, r3
 800063a:	f001 f8df 	bl	80017fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1);
 800063e:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <readAdc+0xd8>)
 8000640:	2101      	movs	r1, #1
 8000642:	0018      	movs	r0, r3
 8000644:	f001 f92e 	bl	80018a4 <HAL_ADC_PollForConversion>
	result[2] = HAL_ADC_GetValue(&hadc);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3308      	adds	r3, #8
 800064c:	001c      	movs	r4, r3
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <readAdc+0xd8>)
 8000650:	0018      	movs	r0, r3
 8000652:	f001 f9c3 	bl	80019dc <HAL_ADC_GetValue>
 8000656:	0003      	movs	r3, r0
 8000658:	6023      	str	r3, [r4, #0]

	sConfig.Channel = ADC_CHANNEL_1;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	4a16      	ldr	r2, [pc, #88]	@ (80006b8 <readAdc+0xe0>)
 800065e:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000660:	197a      	adds	r2, r7, r5
 8000662:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <readAdc+0xd8>)
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f001 f9c4 	bl	80019f4 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc);
 800066c:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <readAdc+0xd8>)
 800066e:	0018      	movs	r0, r3
 8000670:	f001 f8c4 	bl	80017fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1);
 8000674:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <readAdc+0xd8>)
 8000676:	2101      	movs	r1, #1
 8000678:	0018      	movs	r0, r3
 800067a:	f001 f913 	bl	80018a4 <HAL_ADC_PollForConversion>
	result[0] = HAL_ADC_GetValue(&hadc);
 800067e:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <readAdc+0xd8>)
 8000680:	0018      	movs	r0, r3
 8000682:	f001 f9ab 	bl	80019dc <HAL_ADC_GetValue>
 8000686:	0002      	movs	r2, r0
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	601a      	str	r2, [r3, #0]

	printf("RECHTS: %ld, MIDDEN: %ld, LINKS: %ld\n", result[0], result[2], result[1]);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6819      	ldr	r1, [r3, #0]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3308      	adds	r3, #8
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3304      	adds	r3, #4
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4807      	ldr	r0, [pc, #28]	@ (80006bc <readAdc+0xe4>)
 800069e:	f004 f9ed 	bl	8004a7c <iprintf>
}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b004      	add	sp, #16
 80006a8:	bdb0      	pop	{r4, r5, r7, pc}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	0c000008 	.word	0x0c000008
 80006b0:	20000084 	.word	0x20000084
 80006b4:	08000004 	.word	0x08000004
 80006b8:	04000002 	.word	0x04000002
 80006bc:	080057d4 	.word	0x080057d4

080006c0 <driveDock>:
uint8_t driveDock(uint8_t state_dock, uint32_t adc_values[], uint8_t *drive_dock, uint8_t *detect_dock)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	210f      	movs	r1, #15
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	1c02      	adds	r2, r0, #0
 80006d2:	701a      	strb	r2, [r3, #0]
	switch (state_dock)
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d067      	beq.n	80007ac <driveDock+0xec>
 80006dc:	dd00      	ble.n	80006e0 <driveDock+0x20>
 80006de:	e0b4      	b.n	800084a <driveDock+0x18a>
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d002      	beq.n	80006ea <driveDock+0x2a>
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d023      	beq.n	8000730 <driveDock+0x70>
 80006e8:	e0af      	b.n	800084a <driveDock+0x18a>
	{
	case 0:
		readAdc(adc_values);
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff ff73 	bl	80005d8 <readAdc>
		driveNormal(adc_values);
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 f8c1 	bl	800087c <driveNormal>

		if (data_ready == 0xac)
 80006fa:	4b57      	ldr	r3, [pc, #348]	@ (8000858 <driveDock+0x198>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2bac      	cmp	r3, #172	@ 0xac
 8000700:	d105      	bne.n	800070e <driveDock+0x4e>
		{
			(*detect_dock)++;
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	3301      	adds	r3, #1
 8000708:	b2da      	uxtb	r2, r3
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	701a      	strb	r2, [r3, #0]
		}

		if (*detect_dock == 100) //150 ms delay
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b64      	cmp	r3, #100	@ 0x64
 8000714:	d000      	beq.n	8000718 <driveDock+0x58>
 8000716:	e093      	b.n	8000840 <driveDock+0x180>
		{
			state_dock = 1;
 8000718:	230f      	movs	r3, #15
 800071a:	18fb      	adds	r3, r7, r3
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(STOF_GPIO_Port, STOF_Pin, 0);
 8000720:	2380      	movs	r3, #128	@ 0x80
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	484d      	ldr	r0, [pc, #308]	@ (800085c <driveDock+0x19c>)
 8000726:	2200      	movs	r2, #0
 8000728:	0019      	movs	r1, r3
 800072a:	f001 fcfc 	bl	8002126 <HAL_GPIO_WritePin>
		}
		break;
 800072e:	e087      	b.n	8000840 <driveDock+0x180>
	case 1:
		if (data_ready == 0xa4)
 8000730:	4b49      	ldr	r3, [pc, #292]	@ (8000858 <driveDock+0x198>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2ba4      	cmp	r3, #164	@ 0xa4
 8000736:	d10b      	bne.n	8000750 <driveDock+0x90>
		{
			VOORUIT;
 8000738:	4b48      	ldr	r3, [pc, #288]	@ (800085c <driveDock+0x19c>)
 800073a:	4a49      	ldr	r2, [pc, #292]	@ (8000860 <driveDock+0x1a0>)
 800073c:	619a      	str	r2, [r3, #24]
			htim2.Instance->CCR1 = DOCK_SPEED; //Duty Cycle op 50% => led 38kHz
 800073e:	4b49      	ldr	r3, [pc, #292]	@ (8000864 <driveDock+0x1a4>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	227d      	movs	r2, #125	@ 0x7d
 8000744:	635a      	str	r2, [r3, #52]	@ 0x34
			htim2.Instance->CCR3 = 0; //Duty Cycle op 50% => led 38kHz
 8000746:	4b47      	ldr	r3, [pc, #284]	@ (8000864 <driveDock+0x1a4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2200      	movs	r2, #0
 800074c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800074e:	e01e      	b.n	800078e <driveDock+0xce>
		}
		else if (data_ready == 0xa8)
 8000750:	4b41      	ldr	r3, [pc, #260]	@ (8000858 <driveDock+0x198>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2ba8      	cmp	r3, #168	@ 0xa8
 8000756:	d10b      	bne.n	8000770 <driveDock+0xb0>
		{
			VOORUIT;
 8000758:	4b40      	ldr	r3, [pc, #256]	@ (800085c <driveDock+0x19c>)
 800075a:	4a41      	ldr	r2, [pc, #260]	@ (8000860 <driveDock+0x1a0>)
 800075c:	619a      	str	r2, [r3, #24]
			htim2.Instance->CCR1 = 0; //Duty Cycle op 50% => led 38kHz
 800075e:	4b41      	ldr	r3, [pc, #260]	@ (8000864 <driveDock+0x1a4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	635a      	str	r2, [r3, #52]	@ 0x34
			htim2.Instance->CCR3 = DOCK_SPEED; //Duty Cycle op 50% => led 38kHz
 8000766:	4b3f      	ldr	r3, [pc, #252]	@ (8000864 <driveDock+0x1a4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	227d      	movs	r2, #125	@ 0x7d
 800076c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076e:	e00e      	b.n	800078e <driveDock+0xce>
		}
		else if (data_ready == 0xac)
 8000770:	4b39      	ldr	r3, [pc, #228]	@ (8000858 <driveDock+0x198>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2bac      	cmp	r3, #172	@ 0xac
 8000776:	d10a      	bne.n	800078e <driveDock+0xce>
		{
			VOORUIT;
 8000778:	4b38      	ldr	r3, [pc, #224]	@ (800085c <driveDock+0x19c>)
 800077a:	4a39      	ldr	r2, [pc, #228]	@ (8000860 <driveDock+0x1a0>)
 800077c:	619a      	str	r2, [r3, #24]
			htim2.Instance->CCR1 = DOCK_SPEED; //Duty Cycle op 50% => led 38kHz
 800077e:	4b39      	ldr	r3, [pc, #228]	@ (8000864 <driveDock+0x1a4>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	227d      	movs	r2, #125	@ 0x7d
 8000784:	635a      	str	r2, [r3, #52]	@ 0x34
			htim2.Instance->CCR3 = DOCK_SPEED; //Duty Cycle op 50% => led 38kHz
 8000786:	4b37      	ldr	r3, [pc, #220]	@ (8000864 <driveDock+0x1a4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	227d      	movs	r2, #125	@ 0x7d
 800078c:	63da      	str	r2, [r3, #60]	@ 0x3c
		}

		readAdc(adc_values);
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	0018      	movs	r0, r3
 8000792:	f7ff ff21 	bl	80005d8 <readAdc>
		if (adc_values[2] > IR_MID_SENSOR_DISTANCE)
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	3308      	adds	r3, #8
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a32      	ldr	r2, [pc, #200]	@ (8000868 <driveDock+0x1a8>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d950      	bls.n	8000844 <driveDock+0x184>
		{
			state_dock = 2;
 80007a2:	230f      	movs	r3, #15
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	2202      	movs	r2, #2
 80007a8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80007aa:	e04b      	b.n	8000844 <driveDock+0x184>
	case 2:
		UIT;
 80007ac:	4b2b      	ldr	r3, [pc, #172]	@ (800085c <driveDock+0x19c>)
 80007ae:	22f8      	movs	r2, #248	@ 0xf8
 80007b0:	0612      	lsls	r2, r2, #24
 80007b2:	619a      	str	r2, [r3, #24]
		data_ready = 0;
 80007b4:	4b28      	ldr	r3, [pc, #160]	@ (8000858 <driveDock+0x198>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
		data_beacon = 0;
 80007ba:	4b2c      	ldr	r3, [pc, #176]	@ (800086c <driveDock+0x1ac>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
		if (!HAL_GPIO_ReadPin(DRUK2_GPIO_Port, DRUK2_Pin))
 80007c0:	4b26      	ldr	r3, [pc, #152]	@ (800085c <driveDock+0x19c>)
 80007c2:	2108      	movs	r1, #8
 80007c4:	0018      	movs	r0, r3
 80007c6:	f001 fc91 	bl	80020ec <HAL_GPIO_ReadPin>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d13c      	bne.n	8000848 <driveDock+0x188>
		{
			while (!HAL_GPIO_ReadPin(DRUK2_GPIO_Port, DRUK2_Pin));
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	4b22      	ldr	r3, [pc, #136]	@ (800085c <driveDock+0x19c>)
 80007d2:	2108      	movs	r1, #8
 80007d4:	0018      	movs	r0, r3
 80007d6:	f001 fc89 	bl	80020ec <HAL_GPIO_ReadPin>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d0f8      	beq.n	80007d0 <driveDock+0x110>
			HAL_GPIO_WritePin(STOF_GPIO_Port, STOF_Pin, 1);
 80007de:	2380      	movs	r3, #128	@ 0x80
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	481e      	ldr	r0, [pc, #120]	@ (800085c <driveDock+0x19c>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	0019      	movs	r1, r3
 80007e8:	f001 fc9d 	bl	8002126 <HAL_GPIO_WritePin>
			ACHTERUIT;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <driveDock+0x19c>)
 80007ee:	4a20      	ldr	r2, [pc, #128]	@ (8000870 <driveDock+0x1b0>)
 80007f0:	619a      	str	r2, [r3, #24]
			htim2.Instance->CCR1 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
 80007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <driveDock+0x1a4>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	22ff      	movs	r2, #255	@ 0xff
 80007f8:	635a      	str	r2, [r3, #52]	@ 0x34
			htim2.Instance->CCR3 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
 80007fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <driveDock+0x1a4>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	22ff      	movs	r2, #255	@ 0xff
 8000800:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_Delay(500);
 8000802:	23fa      	movs	r3, #250	@ 0xfa
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fe60 	bl	80014cc <HAL_Delay>
			RECHTS;
 800080c:	4b13      	ldr	r3, [pc, #76]	@ (800085c <driveDock+0x19c>)
 800080e:	4a19      	ldr	r2, [pc, #100]	@ (8000874 <driveDock+0x1b4>)
 8000810:	619a      	str	r2, [r3, #24]
			htim2.Instance->CCR1 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <driveDock+0x1a4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	22ff      	movs	r2, #255	@ 0xff
 8000818:	635a      	str	r2, [r3, #52]	@ 0x34
			htim2.Instance->CCR3 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
 800081a:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <driveDock+0x1a4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	22ff      	movs	r2, #255	@ 0xff
 8000820:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_Delay(2500);
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <driveDock+0x1b8>)
 8000824:	0018      	movs	r0, r3
 8000826:	f000 fe51 	bl	80014cc <HAL_Delay>
			*drive_dock = 0;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
			*detect_dock = 0;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
			state_dock = 0;
 8000836:	230f      	movs	r3, #15
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800083e:	e003      	b.n	8000848 <driveDock+0x188>
		break;
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	e002      	b.n	800084a <driveDock+0x18a>
		break;
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	e000      	b.n	800084a <driveDock+0x18a>
		break;
 8000848:	46c0      	nop			@ (mov r8, r8)
	}
	return state_dock;
 800084a:	230f      	movs	r3, #15
 800084c:	18fb      	adds	r3, r7, r3
 800084e:	781b      	ldrb	r3, [r3, #0]
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	b004      	add	sp, #16
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200001ea 	.word	0x200001ea
 800085c:	50000400 	.word	0x50000400
 8000860:	f800b000 	.word	0xf800b000
 8000864:	200000e0 	.word	0x200000e0
 8000868:	00000898 	.word	0x00000898
 800086c:	200001eb 	.word	0x200001eb
 8000870:	f8006800 	.word	0xf8006800
 8000874:	f8007000 	.word	0xf8007000
 8000878:	000009c4 	.word	0x000009c4

0800087c <driveNormal>:
void driveNormal(uint32_t adc_values[])
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(STOF_GPIO_Port, STOF_Pin, 1);
 8000884:	2380      	movs	r3, #128	@ 0x80
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	4840      	ldr	r0, [pc, #256]	@ (800098c <driveNormal+0x110>)
 800088a:	2201      	movs	r2, #1
 800088c:	0019      	movs	r1, r3
 800088e:	f001 fc4a 	bl	8002126 <HAL_GPIO_WritePin>
	htim2.Instance->CCR1 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
 8000892:	4b3f      	ldr	r3, [pc, #252]	@ (8000990 <driveNormal+0x114>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	22ff      	movs	r2, #255	@ 0xff
 8000898:	635a      	str	r2, [r3, #52]	@ 0x34
	htim2.Instance->CCR3 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
 800089a:	4b3d      	ldr	r3, [pc, #244]	@ (8000990 <driveNormal+0x114>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	22ff      	movs	r2, #255	@ 0xff
 80008a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (adc_values[0] > IR_SENSOR_DISTANCE && adc_values[1] < IR_SENSOR_DISTANCE)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a3b      	ldr	r2, [pc, #236]	@ (8000994 <driveNormal+0x118>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d909      	bls.n	80008c0 <driveNormal+0x44>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3304      	adds	r3, #4
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a39      	ldr	r2, [pc, #228]	@ (8000998 <driveNormal+0x11c>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d803      	bhi.n	80008c0 <driveNormal+0x44>
	{
		LINKS;
 80008b8:	4b34      	ldr	r3, [pc, #208]	@ (800098c <driveNormal+0x110>)
 80008ba:	4a38      	ldr	r2, [pc, #224]	@ (800099c <driveNormal+0x120>)
 80008bc:	619a      	str	r2, [r3, #24]
 80008be:	e061      	b.n	8000984 <driveNormal+0x108>
		//VOORUIT;
		//htim2.Instance->CCR1 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
		//htim2.Instance->CCR3 = 0; //Duty Cycle op 50% => led 38kHz
	}
	else if (adc_values[1] > IR_SENSOR_DISTANCE && adc_values[0] < IR_SENSOR_DISTANCE)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3304      	adds	r3, #4
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a33      	ldr	r2, [pc, #204]	@ (8000994 <driveNormal+0x118>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d908      	bls.n	80008de <driveNormal+0x62>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a31      	ldr	r2, [pc, #196]	@ (8000998 <driveNormal+0x11c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d803      	bhi.n	80008de <driveNormal+0x62>
	{
		RECHTS;
 80008d6:	4b2d      	ldr	r3, [pc, #180]	@ (800098c <driveNormal+0x110>)
 80008d8:	4a31      	ldr	r2, [pc, #196]	@ (80009a0 <driveNormal+0x124>)
 80008da:	619a      	str	r2, [r3, #24]
 80008dc:	e052      	b.n	8000984 <driveNormal+0x108>
		//VOORUIT;
		//htim2.Instance->CCR1 = 0; //Duty Cycle op 50% => led 38kHz
		//htim2.Instance->CCR3 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
	}
	else if (adc_values[0] > IR_MID_SENSOR_DISTANCE && adc_values[1] > IR_MID_SENSOR_DISTANCE)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a30      	ldr	r2, [pc, #192]	@ (80009a4 <driveNormal+0x128>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d924      	bls.n	8000932 <driveNormal+0xb6>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3304      	adds	r3, #4
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a2d      	ldr	r2, [pc, #180]	@ (80009a4 <driveNormal+0x128>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d91e      	bls.n	8000932 <driveNormal+0xb6>
	{
		ACHTERUIT;
 80008f4:	4b25      	ldr	r3, [pc, #148]	@ (800098c <driveNormal+0x110>)
 80008f6:	4a2c      	ldr	r2, [pc, #176]	@ (80009a8 <driveNormal+0x12c>)
 80008f8:	619a      	str	r2, [r3, #24]
		HAL_Delay(500);
 80008fa:	23fa      	movs	r3, #250	@ 0xfa
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 fde4 	bl	80014cc <HAL_Delay>
		if (adc_values[0] > adc_values[1])
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3304      	adds	r3, #4
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	429a      	cmp	r2, r3
 8000910:	d907      	bls.n	8000922 <driveNormal+0xa6>
		{
			LINKS;
 8000912:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <driveNormal+0x110>)
 8000914:	4a21      	ldr	r2, [pc, #132]	@ (800099c <driveNormal+0x120>)
 8000916:	619a      	str	r2, [r3, #24]
			HAL_Delay(2500);
 8000918:	4b24      	ldr	r3, [pc, #144]	@ (80009ac <driveNormal+0x130>)
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fdd6 	bl	80014cc <HAL_Delay>
		if (adc_values[0] > adc_values[1])
 8000920:	e030      	b.n	8000984 <driveNormal+0x108>
		}
		else
		{	RECHTS;
 8000922:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <driveNormal+0x110>)
 8000924:	4a1e      	ldr	r2, [pc, #120]	@ (80009a0 <driveNormal+0x124>)
 8000926:	619a      	str	r2, [r3, #24]
			HAL_Delay(2500);
 8000928:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <driveNormal+0x130>)
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fdce 	bl	80014cc <HAL_Delay>
		if (adc_values[0] > adc_values[1])
 8000930:	e028      	b.n	8000984 <driveNormal+0x108>
		}
	}
	else if (adc_values[2] > IR_MID_SENSOR_DISTANCE)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3308      	adds	r3, #8
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a1a      	ldr	r2, [pc, #104]	@ (80009a4 <driveNormal+0x128>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d91e      	bls.n	800097c <driveNormal+0x100>
	{
		ACHTERUIT;
 800093e:	4b13      	ldr	r3, [pc, #76]	@ (800098c <driveNormal+0x110>)
 8000940:	4a19      	ldr	r2, [pc, #100]	@ (80009a8 <driveNormal+0x12c>)
 8000942:	619a      	str	r2, [r3, #24]
		HAL_Delay(500);
 8000944:	23fa      	movs	r3, #250	@ 0xfa
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fdbf 	bl	80014cc <HAL_Delay>
		if (adc_values[0] > adc_values[1])
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3304      	adds	r3, #4
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	429a      	cmp	r2, r3
 800095a:	d907      	bls.n	800096c <driveNormal+0xf0>
		{
			LINKS;
 800095c:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <driveNormal+0x110>)
 800095e:	4a0f      	ldr	r2, [pc, #60]	@ (800099c <driveNormal+0x120>)
 8000960:	619a      	str	r2, [r3, #24]
			HAL_Delay(2500);
 8000962:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <driveNormal+0x130>)
 8000964:	0018      	movs	r0, r3
 8000966:	f000 fdb1 	bl	80014cc <HAL_Delay>
	{
		VOORUIT;
		//htim2.Instance->CCR1 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
		//htim2.Instance->CCR3 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
	}
}
 800096a:	e00b      	b.n	8000984 <driveNormal+0x108>
			RECHTS;
 800096c:	4b07      	ldr	r3, [pc, #28]	@ (800098c <driveNormal+0x110>)
 800096e:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <driveNormal+0x124>)
 8000970:	619a      	str	r2, [r3, #24]
			HAL_Delay(2500);
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <driveNormal+0x130>)
 8000974:	0018      	movs	r0, r3
 8000976:	f000 fda9 	bl	80014cc <HAL_Delay>
}
 800097a:	e003      	b.n	8000984 <driveNormal+0x108>
		VOORUIT;
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <driveNormal+0x110>)
 800097e:	4a0c      	ldr	r2, [pc, #48]	@ (80009b0 <driveNormal+0x134>)
 8000980:	619a      	str	r2, [r3, #24]
}
 8000982:	e7ff      	b.n	8000984 <driveNormal+0x108>
 8000984:	46c0      	nop			@ (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b002      	add	sp, #8
 800098a:	bd80      	pop	{r7, pc}
 800098c:	50000400 	.word	0x50000400
 8000990:	200000e0 	.word	0x200000e0
 8000994:	000005dc 	.word	0x000005dc
 8000998:	000005db 	.word	0x000005db
 800099c:	f800a800 	.word	0xf800a800
 80009a0:	f8007000 	.word	0xf8007000
 80009a4:	00000898 	.word	0x00000898
 80009a8:	f8006800 	.word	0xf8006800
 80009ac:	000009c4 	.word	0x000009c4
 80009b0:	f800b000 	.word	0xf800b000

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b5b0      	push	{r4, r5, r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t adc_values[IR_SENSOR_COUNT];
	uint8_t drive_dock = 0;
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
	uint8_t state_dock = 0;
 80009c0:	2317      	movs	r3, #23
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
	uint8_t detect_dock = 0;
 80009c8:	1dbb      	adds	r3, r7, #6
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ce:	f000 fd0d 	bl	80013ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f879 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f000 fa51 	bl	8000e7c <MX_GPIO_Init>
  MX_ADC_Init();
 80009da:	f000 f8d9 	bl	8000b90 <MX_ADC_Init>
  MX_TIM2_Init();
 80009de:	f000 f95b 	bl	8000c98 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80009e2:	f000 fa1b 	bl	8000e1c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80009e6:	f000 f9df 	bl	8000da8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(IR1_GPIO_Port, IR1_Pin, 1);
 80009ea:	23a0      	movs	r3, #160	@ 0xa0
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	2201      	movs	r2, #1
 80009f0:	2180      	movs	r1, #128	@ 0x80
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 fb97 	bl	8002126 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IR2_GPIO_Port, IR2_Pin, 1);
 80009f8:	2380      	movs	r3, #128	@ 0x80
 80009fa:	0059      	lsls	r1, r3, #1
 80009fc:	23a0      	movs	r3, #160	@ 0xa0
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	2201      	movs	r2, #1
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 fb8f 	bl	8002126 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IR3_GPIO_Port, IR3_Pin, 1);
 8000a08:	2380      	movs	r3, #128	@ 0x80
 8000a0a:	0099      	lsls	r1, r3, #2
 8000a0c:	23a0      	movs	r3, #160	@ 0xa0
 8000a0e:	05db      	lsls	r3, r3, #23
 8000a10:	2201      	movs	r2, #1
 8000a12:	0018      	movs	r0, r3
 8000a14:	f001 fb87 	bl	8002126 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a18:	4b26      	ldr	r3, [pc, #152]	@ (8000ab4 <main+0x100>)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f002 fc2b 	bl	8003278 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a22:	4b24      	ldr	r3, [pc, #144]	@ (8000ab4 <main+0x100>)
 8000a24:	2108      	movs	r1, #8
 8000a26:	0018      	movs	r0, r3
 8000a28:	f002 fc26 	bl	8003278 <HAL_TIM_PWM_Start>
  HAL_Delay(50); //sensors moeten opstarten
 8000a2c:	2032      	movs	r0, #50	@ 0x32
 8000a2e:	f000 fd4d 	bl	80014cc <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (drive_dock)
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d002      	beq.n	8000a40 <main+0x8c>
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d020      	beq.n	8000a80 <main+0xcc>
 8000a3e:	e7f8      	b.n	8000a32 <main+0x7e>
	  {
	  case 0:
		  if (!HAL_GPIO_ReadPin(DRUK2_GPIO_Port, DRUK2_Pin))
 8000a40:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <main+0x104>)
 8000a42:	2108      	movs	r1, #8
 8000a44:	0018      	movs	r0, r3
 8000a46:	f001 fb51 	bl	80020ec <HAL_GPIO_ReadPin>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d10e      	bne.n	8000a6c <main+0xb8>
		  {
			  while (!HAL_GPIO_ReadPin(DRUK2_GPIO_Port, DRUK2_Pin));
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <main+0x104>)
 8000a52:	2108      	movs	r1, #8
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 fb49 	bl	80020ec <HAL_GPIO_ReadPin>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d0f8      	beq.n	8000a50 <main+0x9c>
			  drive_dock ^= 1;
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2201      	movs	r2, #1
 8000a64:	4053      	eors	r3, r2
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	1dfb      	adds	r3, r7, #7
 8000a6a:	701a      	strb	r2, [r3, #0]
		  }
		  readAdc(adc_values);
 8000a6c:	2408      	movs	r4, #8
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff fdb1 	bl	80005d8 <readAdc>
		  driveNormal(adc_values);
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff feff 	bl	800087c <driveNormal>
		  break;
 8000a7e:	e017      	b.n	8000ab0 <main+0xfc>
	  case 1:
		  printf("data: %x, %x\n", data_ready, data_beacon);
 8000a80:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <main+0x108>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	0019      	movs	r1, r3
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <main+0x10c>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <main+0x110>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f003 fff4 	bl	8004a7c <iprintf>
		  state_dock = driveDock(state_dock, adc_values, &drive_dock, &detect_dock);
 8000a94:	2317      	movs	r3, #23
 8000a96:	18fc      	adds	r4, r7, r3
 8000a98:	1dbd      	adds	r5, r7, #6
 8000a9a:	1dfa      	adds	r2, r7, #7
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	1879      	adds	r1, r7, r1
 8000aa0:	18fb      	adds	r3, r7, r3
 8000aa2:	7818      	ldrb	r0, [r3, #0]
 8000aa4:	002b      	movs	r3, r5
 8000aa6:	f7ff fe0b 	bl	80006c0 <driveDock>
 8000aaa:	0003      	movs	r3, r0
 8000aac:	7023      	strb	r3, [r4, #0]
		  break;
 8000aae:	46c0      	nop			@ (mov r8, r8)
	  switch (drive_dock)
 8000ab0:	e7bf      	b.n	8000a32 <main+0x7e>
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	200000e0 	.word	0x200000e0
 8000ab8:	50000400 	.word	0x50000400
 8000abc:	200001ea 	.word	0x200001ea
 8000ac0:	200001eb 	.word	0x200001eb
 8000ac4:	080057fc 	.word	0x080057fc

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b09d      	sub	sp, #116	@ 0x74
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	2438      	movs	r4, #56	@ 0x38
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2338      	movs	r3, #56	@ 0x38
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	2100      	movs	r1, #0
 8000ada:	f004 f82b 	bl	8004b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ade:	2324      	movs	r3, #36	@ 0x24
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	2314      	movs	r3, #20
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	2100      	movs	r1, #0
 8000aea:	f004 f823 	bl	8004b34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aee:	003b      	movs	r3, r7
 8000af0:	0018      	movs	r0, r3
 8000af2:	2324      	movs	r3, #36	@ 0x24
 8000af4:	001a      	movs	r2, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	f004 f81c 	bl	8004b34 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000afc:	4b22      	ldr	r3, [pc, #136]	@ (8000b88 <SystemClock_Config+0xc0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a22      	ldr	r2, [pc, #136]	@ (8000b8c <SystemClock_Config+0xc4>)
 8000b02:	401a      	ands	r2, r3
 8000b04:	4b20      	ldr	r3, [pc, #128]	@ (8000b88 <SystemClock_Config+0xc0>)
 8000b06:	2180      	movs	r1, #128	@ 0x80
 8000b08:	0109      	lsls	r1, r1, #4
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2201      	movs	r2, #1
 8000b12:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	22a0      	movs	r2, #160	@ 0xa0
 8000b18:	02d2      	lsls	r2, r2, #11
 8000b1a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	0018      	movs	r0, r3
 8000b26:	f001 fb37 	bl	8002198 <HAL_RCC_OscConfig>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b2e:	f000 fa57 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b32:	2124      	movs	r1, #36	@ 0x24
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	220f      	movs	r2, #15
 8000b38:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2101      	movs	r1, #1
 8000b56:	0018      	movs	r0, r3
 8000b58:	f001 fee2 	bl	8002920 <HAL_RCC_ClockConfig>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b60:	f000 fa3e 	bl	8000fe0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b64:	003b      	movs	r3, r7
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b6a:	003b      	movs	r3, r7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b70:	003b      	movs	r3, r7
 8000b72:	0018      	movs	r0, r3
 8000b74:	f002 f8f8 	bl	8002d68 <HAL_RCCEx_PeriphCLKConfig>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b7c:	f000 fa30 	bl	8000fe0 <Error_Handler>
  }
}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b01d      	add	sp, #116	@ 0x74
 8000b86:	bd90      	pop	{r4, r7, pc}
 8000b88:	40007000 	.word	0x40007000
 8000b8c:	ffffe7ff 	.word	0xffffe7ff

08000b90 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b96:	003b      	movs	r3, r7
 8000b98:	0018      	movs	r0, r3
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f003 ffc8 	bl	8004b34 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ba4:	4b37      	ldr	r3, [pc, #220]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000ba6:	4a38      	ldr	r2, [pc, #224]	@ (8000c88 <MX_ADC_Init+0xf8>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000baa:	4b36      	ldr	r3, [pc, #216]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000bb0:	4b34      	ldr	r3, [pc, #208]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000bb2:	2280      	movs	r2, #128	@ 0x80
 8000bb4:	05d2      	lsls	r2, r2, #23
 8000bb6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb8:	4b32      	ldr	r3, [pc, #200]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bbe:	4b31      	ldr	r3, [pc, #196]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bca:	4b2e      	ldr	r3, [pc, #184]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000bda:	2221      	movs	r2, #33	@ 0x21
 8000bdc:	2101      	movs	r1, #1
 8000bde:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be0:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be6:	4b27      	ldr	r3, [pc, #156]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000be8:	22c2      	movs	r2, #194	@ 0xc2
 8000bea:	32ff      	adds	r2, #255	@ 0xff
 8000bec:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000bee:	4b25      	ldr	r3, [pc, #148]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000bf0:	222c      	movs	r2, #44	@ 0x2c
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bf6:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bfc:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000c02:	4b20      	ldr	r3, [pc, #128]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000c08:	4b1e      	ldr	r3, [pc, #120]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c14:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 fc7c 	bl	8001514 <HAL_ADC_Init>
 8000c1c:	1e03      	subs	r3, r0, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000c20:	f000 f9de 	bl	8000fe0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c24:	003b      	movs	r3, r7
 8000c26:	4a19      	ldr	r2, [pc, #100]	@ (8000c8c <MX_ADC_Init+0xfc>)
 8000c28:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000c2a:	003b      	movs	r3, r7
 8000c2c:	2280      	movs	r2, #128	@ 0x80
 8000c2e:	0152      	lsls	r2, r2, #5
 8000c30:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c32:	003a      	movs	r2, r7
 8000c34:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000c36:	0011      	movs	r1, r2
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f000 fedb 	bl	80019f4 <HAL_ADC_ConfigChannel>
 8000c3e:	1e03      	subs	r3, r0, #0
 8000c40:	d001      	beq.n	8000c46 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000c42:	f000 f9cd 	bl	8000fe0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c46:	003b      	movs	r3, r7
 8000c48:	4a11      	ldr	r2, [pc, #68]	@ (8000c90 <MX_ADC_Init+0x100>)
 8000c4a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c4c:	003a      	movs	r2, r7
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000c50:	0011      	movs	r1, r2
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fece 	bl	80019f4 <HAL_ADC_ConfigChannel>
 8000c58:	1e03      	subs	r3, r0, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000c5c:	f000 f9c0 	bl	8000fe0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c60:	003b      	movs	r3, r7
 8000c62:	4a0c      	ldr	r2, [pc, #48]	@ (8000c94 <MX_ADC_Init+0x104>)
 8000c64:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c66:	003a      	movs	r2, r7
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_ADC_Init+0xf4>)
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 fec1 	bl	80019f4 <HAL_ADC_ConfigChannel>
 8000c72:	1e03      	subs	r3, r0, #0
 8000c74:	d001      	beq.n	8000c7a <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000c76:	f000 f9b3 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	20000084 	.word	0x20000084
 8000c88:	40012400 	.word	0x40012400
 8000c8c:	04000002 	.word	0x04000002
 8000c90:	08000004 	.word	0x08000004
 8000c94:	0c000008 	.word	0x0c000008

08000c98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	@ 0x28
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9e:	2318      	movs	r3, #24
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	2310      	movs	r3, #16
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	2100      	movs	r1, #0
 8000caa:	f003 ff43 	bl	8004b34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cae:	2310      	movs	r3, #16
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	001a      	movs	r2, r3
 8000cb8:	2100      	movs	r1, #0
 8000cba:	f003 ff3b 	bl	8004b34 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cbe:	003b      	movs	r3, r7
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f003 ff34 	bl	8004b34 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ccc:	4b35      	ldr	r3, [pc, #212]	@ (8000da4 <MX_TIM2_Init+0x10c>)
 8000cce:	2280      	movs	r2, #128	@ 0x80
 8000cd0:	05d2      	lsls	r2, r2, #23
 8000cd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 93;
 8000cd4:	4b33      	ldr	r3, [pc, #204]	@ (8000da4 <MX_TIM2_Init+0x10c>)
 8000cd6:	225d      	movs	r2, #93	@ 0x5d
 8000cd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cda:	4b32      	ldr	r3, [pc, #200]	@ (8000da4 <MX_TIM2_Init+0x10c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000ce0:	4b30      	ldr	r3, [pc, #192]	@ (8000da4 <MX_TIM2_Init+0x10c>)
 8000ce2:	22ff      	movs	r2, #255	@ 0xff
 8000ce4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8000da4 <MX_TIM2_Init+0x10c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cec:	4b2d      	ldr	r3, [pc, #180]	@ (8000da4 <MX_TIM2_Init+0x10c>)
 8000cee:	2280      	movs	r2, #128	@ 0x80
 8000cf0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8000da4 <MX_TIM2_Init+0x10c>)
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f002 f9c5 	bl	8003084 <HAL_TIM_Base_Init>
 8000cfa:	1e03      	subs	r3, r0, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000cfe:	f000 f96f 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d02:	2118      	movs	r1, #24
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2280      	movs	r2, #128	@ 0x80
 8000d08:	0152      	lsls	r2, r2, #5
 8000d0a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d0c:	187a      	adds	r2, r7, r1
 8000d0e:	4b25      	ldr	r3, [pc, #148]	@ (8000da4 <MX_TIM2_Init+0x10c>)
 8000d10:	0011      	movs	r1, r2
 8000d12:	0018      	movs	r0, r3
 8000d14:	f002 fcea 	bl	80036ec <HAL_TIM_ConfigClockSource>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000d1c:	f000 f960 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d20:	4b20      	ldr	r3, [pc, #128]	@ (8000da4 <MX_TIM2_Init+0x10c>)
 8000d22:	0018      	movs	r0, r3
 8000d24:	f002 fa60 	bl	80031e8 <HAL_TIM_PWM_Init>
 8000d28:	1e03      	subs	r3, r0, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000d2c:	f000 f958 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d30:	2110      	movs	r1, #16
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d3e:	187a      	adds	r2, r7, r1
 8000d40:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <MX_TIM2_Init+0x10c>)
 8000d42:	0011      	movs	r1, r2
 8000d44:	0018      	movs	r0, r3
 8000d46:	f002 ffdb 	bl	8003d00 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000d4e:	f000 f947 	bl	8000fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d52:	003b      	movs	r3, r7
 8000d54:	2260      	movs	r2, #96	@ 0x60
 8000d56:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d58:	003b      	movs	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5e:	003b      	movs	r3, r7
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d64:	003b      	movs	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d6a:	0039      	movs	r1, r7
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <MX_TIM2_Init+0x10c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	0018      	movs	r0, r3
 8000d72:	f002 fbf5 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 8000d76:	1e03      	subs	r3, r0, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000d7a:	f000 f931 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d7e:	0039      	movs	r1, r7
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <MX_TIM2_Init+0x10c>)
 8000d82:	2208      	movs	r2, #8
 8000d84:	0018      	movs	r0, r3
 8000d86:	f002 fbeb 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 8000d8a:	1e03      	subs	r3, r0, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000d8e:	f000 f927 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d92:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <MX_TIM2_Init+0x10c>)
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 f9a5 	bl	80010e4 <HAL_TIM_MspPostInit>

}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b00a      	add	sp, #40	@ 0x28
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	200000e0 	.word	0x200000e0

08000da8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dae:	003b      	movs	r3, r7
 8000db0:	0018      	movs	r0, r3
 8000db2:	2308      	movs	r3, #8
 8000db4:	001a      	movs	r2, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	f003 febc 	bl	8004b34 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <MX_TIM6_Init+0x6c>)
 8000dbe:	4a16      	ldr	r2, [pc, #88]	@ (8000e18 <MX_TIM6_Init+0x70>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 192;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_TIM6_Init+0x6c>)
 8000dc4:	22c0      	movs	r2, #192	@ 0xc0
 8000dc6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_TIM6_Init+0x6c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 255;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_TIM6_Init+0x6c>)
 8000dd0:	22ff      	movs	r2, #255	@ 0xff
 8000dd2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_TIM6_Init+0x6c>)
 8000dd6:	2280      	movs	r2, #128	@ 0x80
 8000dd8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <MX_TIM6_Init+0x6c>)
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f002 f951 	bl	8003084 <HAL_TIM_Base_Init>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000de6:	f000 f8fb 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dea:	003b      	movs	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df0:	003b      	movs	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000df6:	003a      	movs	r2, r7
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_TIM6_Init+0x6c>)
 8000dfa:	0011      	movs	r1, r2
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f002 ff7f 	bl	8003d00 <HAL_TIMEx_MasterConfigSynchronization>
 8000e02:	1e03      	subs	r3, r0, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000e06:	f000 f8eb 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b002      	add	sp, #8
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	20000120 	.word	0x20000120
 8000e18:	40001000 	.word	0x40001000

08000e1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e22:	4a15      	ldr	r2, [pc, #84]	@ (8000e78 <MX_USART1_UART_Init+0x5c>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e26:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e28:	22e1      	movs	r2, #225	@ 0xe1
 8000e2a:	0252      	lsls	r2, r2, #9
 8000e2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e60:	0018      	movs	r0, r3
 8000e62:	f002 ffa5 	bl	8003db0 <HAL_UART_Init>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e6a:	f000 f8b9 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000160 	.word	0x20000160
 8000e78:	40013800 	.word	0x40013800

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b089      	sub	sp, #36	@ 0x24
 8000e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	240c      	movs	r4, #12
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	0018      	movs	r0, r3
 8000e88:	2314      	movs	r3, #20
 8000e8a:	001a      	movs	r2, r3
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	f003 fe51 	bl	8004b34 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e92:	4b4f      	ldr	r3, [pc, #316]	@ (8000fd0 <MX_GPIO_Init+0x154>)
 8000e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e96:	4b4e      	ldr	r3, [pc, #312]	@ (8000fd0 <MX_GPIO_Init+0x154>)
 8000e98:	2180      	movs	r1, #128	@ 0x80
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8000fd0 <MX_GPIO_Init+0x154>)
 8000ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea2:	2280      	movs	r2, #128	@ 0x80
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b49      	ldr	r3, [pc, #292]	@ (8000fd0 <MX_GPIO_Init+0x154>)
 8000eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000eae:	4b48      	ldr	r3, [pc, #288]	@ (8000fd0 <MX_GPIO_Init+0x154>)
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000eb6:	4b46      	ldr	r3, [pc, #280]	@ (8000fd0 <MX_GPIO_Init+0x154>)
 8000eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	4b43      	ldr	r3, [pc, #268]	@ (8000fd0 <MX_GPIO_Init+0x154>)
 8000ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ec6:	4b42      	ldr	r3, [pc, #264]	@ (8000fd0 <MX_GPIO_Init+0x154>)
 8000ec8:	2102      	movs	r1, #2
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ece:	4b40      	ldr	r3, [pc, #256]	@ (8000fd0 <MX_GPIO_Init+0x154>)
 8000ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 8000eda:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd4 <MX_GPIO_Init+0x158>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	2102      	movs	r1, #2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f001 f920 	bl	8002126 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin
 8000ee6:	23fc      	movs	r3, #252	@ 0xfc
 8000ee8:	0159      	lsls	r1, r3, #5
 8000eea:	23a0      	movs	r3, #160	@ 0xa0
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	2200      	movs	r2, #0
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f001 f918 	bl	8002126 <HAL_GPIO_WritePin>
                          |IR5_Pin|IR0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BIN2_Pin|BIN1_Pin|STBY_Pin|AIN2_Pin
 8000ef6:	4938      	ldr	r1, [pc, #224]	@ (8000fd8 <MX_GPIO_Init+0x15c>)
 8000ef8:	4b38      	ldr	r3, [pc, #224]	@ (8000fdc <MX_GPIO_Init+0x160>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	0018      	movs	r0, r3
 8000efe:	f001 f912 	bl	8002126 <HAL_GPIO_WritePin>
                          |AIN1_Pin|PIN_Pin|STOF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	2202      	movs	r2, #2
 8000f06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	193b      	adds	r3, r7, r4
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	193b      	adds	r3, r7, r4
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	193b      	adds	r3, r7, r4
 8000f1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000fd4 <MX_GPIO_Init+0x158>)
 8000f1e:	0019      	movs	r1, r3
 8000f20:	0010      	movs	r0, r2
 8000f22:	f000 ff6d 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR1_Pin IR2_Pin IR3_Pin IR4_Pin
                           IR5_Pin IR0_Pin */
  GPIO_InitStruct.Pin = IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin
 8000f26:	0021      	movs	r1, r4
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	22fc      	movs	r2, #252	@ 0xfc
 8000f2c:	0152      	lsls	r2, r2, #5
 8000f2e:	601a      	str	r2, [r3, #0]
                          |IR5_Pin|IR0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	000c      	movs	r4, r1
 8000f32:	193b      	adds	r3, r7, r4
 8000f34:	2201      	movs	r2, #1
 8000f36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	193b      	adds	r3, r7, r4
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	193a      	adds	r2, r7, r4
 8000f46:	23a0      	movs	r3, #160	@ 0xa0
 8000f48:	05db      	lsls	r3, r3, #23
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f000 ff57 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRUK5_Pin DRUK4_Pin DRUK3_Pin DRUK2_Pin
                           DRUK1_Pin */
  GPIO_InitStruct.Pin = DRUK5_Pin|DRUK4_Pin|DRUK3_Pin|DRUK2_Pin
 8000f52:	193b      	adds	r3, r7, r4
 8000f54:	221f      	movs	r2, #31
 8000f56:	601a      	str	r2, [r3, #0]
                          |DRUK1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	193b      	adds	r3, r7, r4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5e:	193b      	adds	r3, r7, r4
 8000f60:	2201      	movs	r2, #1
 8000f62:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	193b      	adds	r3, r7, r4
 8000f66:	4a1d      	ldr	r2, [pc, #116]	@ (8000fdc <MX_GPIO_Init+0x160>)
 8000f68:	0019      	movs	r1, r3
 8000f6a:	0010      	movs	r0, r2
 8000f6c:	f000 ff48 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_Pin BIN1_Pin STBY_Pin AIN2_Pin
                           AIN1_Pin PIN_Pin STOF_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin|STBY_Pin|AIN2_Pin
 8000f70:	193b      	adds	r3, r7, r4
 8000f72:	4a19      	ldr	r2, [pc, #100]	@ (8000fd8 <MX_GPIO_Init+0x15c>)
 8000f74:	601a      	str	r2, [r3, #0]
                          |AIN1_Pin|PIN_Pin|STOF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	2201      	movs	r2, #1
 8000f7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	193b      	adds	r3, r7, r4
 8000f8a:	4a14      	ldr	r2, [pc, #80]	@ (8000fdc <MX_GPIO_Init+0x160>)
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	0010      	movs	r0, r2
 8000f90:	f000 ff36 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Pin */
  GPIO_InitStruct.Pin = IR_Pin;
 8000f94:	0021      	movs	r1, r4
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	0052      	lsls	r2, r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2284      	movs	r2, #132	@ 0x84
 8000fa2:	0392      	lsls	r2, r2, #14
 8000fa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	4a0b      	ldr	r2, [pc, #44]	@ (8000fdc <MX_GPIO_Init+0x160>)
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	0010      	movs	r0, r2
 8000fb4:	f000 ff24 	bl	8001e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2007      	movs	r0, #7
 8000fbe:	f000 feed 	bl	8001d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000fc2:	2007      	movs	r0, #7
 8000fc4:	f000 feff 	bl	8001dc6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc8:	46c0      	nop			@ (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b009      	add	sp, #36	@ 0x24
 8000fce:	bd90      	pop	{r4, r7, pc}
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	50001c00 	.word	0x50001c00
 8000fd8:	0000fa20 	.word	0x0000fa20
 8000fdc:	50000400 	.word	0x50000400

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	46c0      	nop			@ (mov r8, r8)
 8000fea:	e7fd      	b.n	8000fe8 <Error_Handler+0x8>

08000fec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <HAL_MspInit+0x24>)
 8000ff2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_MspInit+0x24>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffc:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <HAL_MspInit+0x24>)
 8000ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <HAL_MspInit+0x24>)
 8001002:	2180      	movs	r1, #128	@ 0x80
 8001004:	0549      	lsls	r1, r1, #21
 8001006:	430a      	orrs	r2, r1
 8001008:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40021000 	.word	0x40021000

08001014 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b089      	sub	sp, #36	@ 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	240c      	movs	r4, #12
 800101e:	193b      	adds	r3, r7, r4
 8001020:	0018      	movs	r0, r3
 8001022:	2314      	movs	r3, #20
 8001024:	001a      	movs	r2, r3
 8001026:	2100      	movs	r1, #0
 8001028:	f003 fd84 	bl	8004b34 <memset>
  if(hadc->Instance==ADC1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a14      	ldr	r2, [pc, #80]	@ (8001084 <HAL_ADC_MspInit+0x70>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d122      	bne.n	800107c <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001036:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <HAL_ADC_MspInit+0x74>)
 8001038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800103a:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <HAL_ADC_MspInit+0x74>)
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	0089      	lsls	r1, r1, #2
 8001040:	430a      	orrs	r2, r1
 8001042:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <HAL_ADC_MspInit+0x74>)
 8001046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <HAL_ADC_MspInit+0x74>)
 800104a:	2101      	movs	r1, #1
 800104c:	430a      	orrs	r2, r1
 800104e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001050:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <HAL_ADC_MspInit+0x74>)
 8001052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001054:	2201      	movs	r2, #1
 8001056:	4013      	ands	r3, r2
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800105c:	193b      	adds	r3, r7, r4
 800105e:	220e      	movs	r2, #14
 8001060:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001062:	193b      	adds	r3, r7, r4
 8001064:	2203      	movs	r2, #3
 8001066:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	193a      	adds	r2, r7, r4
 8001070:	23a0      	movs	r3, #160	@ 0xa0
 8001072:	05db      	lsls	r3, r3, #23
 8001074:	0011      	movs	r1, r2
 8001076:	0018      	movs	r0, r3
 8001078:	f000 fec2 	bl	8001e00 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800107c:	46c0      	nop			@ (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b009      	add	sp, #36	@ 0x24
 8001082:	bd90      	pop	{r4, r7, pc}
 8001084:	40012400 	.word	0x40012400
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2380      	movs	r3, #128	@ 0x80
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	429a      	cmp	r2, r3
 800109e:	d106      	bne.n	80010ae <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a0:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <HAL_TIM_Base_MspInit+0x50>)
 80010a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010a4:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <HAL_TIM_Base_MspInit+0x50>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	430a      	orrs	r2, r1
 80010aa:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80010ac:	e012      	b.n	80010d4 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM6)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a0b      	ldr	r2, [pc, #44]	@ (80010e0 <HAL_TIM_Base_MspInit+0x54>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d10d      	bne.n	80010d4 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <HAL_TIM_Base_MspInit+0x50>)
 80010ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010bc:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <HAL_TIM_Base_MspInit+0x50>)
 80010be:	2110      	movs	r1, #16
 80010c0:	430a      	orrs	r2, r1
 80010c2:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2011      	movs	r0, #17
 80010ca:	f000 fe67 	bl	8001d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010ce:	2011      	movs	r0, #17
 80010d0:	f000 fe79 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
}
 80010d4:	46c0      	nop			@ (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b002      	add	sp, #8
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40001000 	.word	0x40001000

080010e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b08b      	sub	sp, #44	@ 0x2c
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	2414      	movs	r4, #20
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	0018      	movs	r0, r3
 80010f2:	2314      	movs	r3, #20
 80010f4:	001a      	movs	r2, r3
 80010f6:	2100      	movs	r1, #0
 80010f8:	f003 fd1c 	bl	8004b34 <memset>
  if(htim->Instance==TIM2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	05db      	lsls	r3, r3, #23
 8001104:	429a      	cmp	r2, r3
 8001106:	d145      	bne.n	8001194 <HAL_TIM_MspPostInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001108:	4b24      	ldr	r3, [pc, #144]	@ (800119c <HAL_TIM_MspPostInit+0xb8>)
 800110a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800110c:	4b23      	ldr	r3, [pc, #140]	@ (800119c <HAL_TIM_MspPostInit+0xb8>)
 800110e:	2102      	movs	r1, #2
 8001110:	430a      	orrs	r2, r1
 8001112:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001114:	4b21      	ldr	r3, [pc, #132]	@ (800119c <HAL_TIM_MspPostInit+0xb8>)
 8001116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001118:	2202      	movs	r2, #2
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <HAL_TIM_MspPostInit+0xb8>)
 8001122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <HAL_TIM_MspPostInit+0xb8>)
 8001126:	2101      	movs	r1, #1
 8001128:	430a      	orrs	r2, r1
 800112a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800112c:	4b1b      	ldr	r3, [pc, #108]	@ (800119c <HAL_TIM_MspPostInit+0xb8>)
 800112e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001130:	2201      	movs	r2, #1
 8001132:	4013      	ands	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = CH3_Pin;
 8001138:	193b      	adds	r3, r7, r4
 800113a:	2280      	movs	r2, #128	@ 0x80
 800113c:	00d2      	lsls	r2, r2, #3
 800113e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	193b      	adds	r3, r7, r4
 8001142:	2202      	movs	r2, #2
 8001144:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	193b      	adds	r3, r7, r4
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	193b      	adds	r3, r7, r4
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001152:	193b      	adds	r3, r7, r4
 8001154:	2202      	movs	r2, #2
 8001156:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8001158:	193b      	adds	r3, r7, r4
 800115a:	4a11      	ldr	r2, [pc, #68]	@ (80011a0 <HAL_TIM_MspPostInit+0xbc>)
 800115c:	0019      	movs	r1, r3
 800115e:	0010      	movs	r0, r2
 8001160:	f000 fe4e 	bl	8001e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CH1_Pin;
 8001164:	0021      	movs	r1, r4
 8001166:	187b      	adds	r3, r7, r1
 8001168:	2280      	movs	r2, #128	@ 0x80
 800116a:	0212      	lsls	r2, r2, #8
 800116c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2202      	movs	r2, #2
 8001172:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	187b      	adds	r3, r7, r1
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2205      	movs	r2, #5
 8001184:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8001186:	187a      	adds	r2, r7, r1
 8001188:	23a0      	movs	r3, #160	@ 0xa0
 800118a:	05db      	lsls	r3, r3, #23
 800118c:	0011      	movs	r1, r2
 800118e:	0018      	movs	r0, r3
 8001190:	f000 fe36 	bl	8001e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001194:	46c0      	nop			@ (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b00b      	add	sp, #44	@ 0x2c
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	40021000 	.word	0x40021000
 80011a0:	50000400 	.word	0x50000400

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b089      	sub	sp, #36	@ 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	240c      	movs	r4, #12
 80011ae:	193b      	adds	r3, r7, r4
 80011b0:	0018      	movs	r0, r3
 80011b2:	2314      	movs	r3, #20
 80011b4:	001a      	movs	r2, r3
 80011b6:	2100      	movs	r1, #0
 80011b8:	f003 fcbc 	bl	8004b34 <memset>
  if(huart->Instance==USART1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a17      	ldr	r2, [pc, #92]	@ (8001220 <HAL_UART_MspInit+0x7c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d128      	bne.n	8001218 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c6:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <HAL_UART_MspInit+0x80>)
 80011c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <HAL_UART_MspInit+0x80>)
 80011cc:	2180      	movs	r1, #128	@ 0x80
 80011ce:	01c9      	lsls	r1, r1, #7
 80011d0:	430a      	orrs	r2, r1
 80011d2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <HAL_UART_MspInit+0x80>)
 80011d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_UART_MspInit+0x80>)
 80011da:	2102      	movs	r1, #2
 80011dc:	430a      	orrs	r2, r1
 80011de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011e0:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <HAL_UART_MspInit+0x80>)
 80011e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e4:	2202      	movs	r2, #2
 80011e6:	4013      	ands	r3, r2
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80011ec:	0021      	movs	r1, r4
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	22c0      	movs	r2, #192	@ 0xc0
 80011f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	2202      	movs	r2, #2
 80011f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	187b      	adds	r3, r7, r1
 8001202:	2203      	movs	r2, #3
 8001204:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	187b      	adds	r3, r7, r1
 800120e:	4a06      	ldr	r2, [pc, #24]	@ (8001228 <HAL_UART_MspInit+0x84>)
 8001210:	0019      	movs	r1, r3
 8001212:	0010      	movs	r0, r2
 8001214:	f000 fdf4 	bl	8001e00 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001218:	46c0      	nop			@ (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b009      	add	sp, #36	@ 0x24
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	40013800 	.word	0x40013800
 8001224:	40021000 	.word	0x40021000
 8001228:	50000400 	.word	0x50000400

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	46c0      	nop			@ (mov r8, r8)
 8001232:	e7fd      	b.n	8001230 <NMI_Handler+0x4>

08001234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001238:	46c0      	nop			@ (mov r8, r8)
 800123a:	e7fd      	b.n	8001238 <HardFault_Handler+0x4>

0800123c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001240:	46c0      	nop			@ (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001254:	f000 f91e 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001258:	46c0      	nop			@ (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Pin);
 8001262:	2380      	movs	r3, #128	@ 0x80
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	0018      	movs	r0, r3
 8001268:	f000 ff7a 	bl	8002160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <TIM6_DAC_IRQHandler+0x14>)
 800127a:	0018      	movs	r0, r3
 800127c:	f002 f888 	bl	8003390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001280:	46c0      	nop			@ (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	20000120 	.word	0x20000120

0800128c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e00a      	b.n	80012b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800129e:	e000      	b.n	80012a2 <_read+0x16>
 80012a0:	bf00      	nop
 80012a2:	0001      	movs	r1, r0
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	60ba      	str	r2, [r7, #8]
 80012aa:	b2ca      	uxtb	r2, r1
 80012ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf0      	blt.n	800129e <_read+0x12>
  }

  return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	0018      	movs	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b006      	add	sp, #24
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	425b      	negs	r3, r3
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}

080012da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2280      	movs	r2, #128	@ 0x80
 80012e8:	0192      	lsls	r2, r2, #6
 80012ea:	605a      	str	r2, [r3, #4]
  return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	0018      	movs	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b002      	add	sp, #8
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_isatty>:

int _isatty(int file)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	b002      	add	sp, #8
 8001306:	bd80      	pop	{r7, pc}

08001308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	0018      	movs	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	b004      	add	sp, #16
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	@ (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	18d3      	adds	r3, r2, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f003 fc46 	bl	8004be0 <__errno>
 8001354:	0003      	movs	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	2301      	movs	r3, #1
 800135c:	425b      	negs	r3, r3
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	18d2      	adds	r2, r2, r3
 800136e:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <_sbrk+0x64>)
 8001370:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	0018      	movs	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	b006      	add	sp, #24
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20002000 	.word	0x20002000
 8001380:	00000400 	.word	0x00000400
 8001384:	200001ec 	.word	0x200001ec
 8001388:	20000340 	.word	0x20000340

0800138c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001390:	46c0      	nop			@ (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001398:	480d      	ldr	r0, [pc, #52]	@ (80013d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800139a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800139c:	f7ff fff6 	bl	800138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	@ (80013d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <LoopForever+0xe>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	@ (80013e4 <LoopForever+0x16>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c6:	f003 fc11 	bl	8004bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ca:	f7ff faf3 	bl	80009b4 <main>

080013ce <LoopForever>:

LoopForever:
    b LoopForever
 80013ce:	e7fe      	b.n	80013ce <LoopForever>
  ldr   r0, =_estack
 80013d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013dc:	080058bc 	.word	0x080058bc
  ldr r2, =_sbss
 80013e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013e4:	20000340 	.word	0x20000340

080013e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC1_COMP_IRQHandler>
	...

080013ec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f2:	1dfb      	adds	r3, r7, #7
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80013f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <HAL_Init+0x3c>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <HAL_Init+0x3c>)
 80013fe:	2140      	movs	r1, #64	@ 0x40
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001404:	2003      	movs	r0, #3
 8001406:	f000 f811 	bl	800142c <HAL_InitTick>
 800140a:	1e03      	subs	r3, r0, #0
 800140c:	d003      	beq.n	8001416 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	e001      	b.n	800141a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001416:	f7ff fde9 	bl	8000fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	781b      	ldrb	r3, [r3, #0]
}
 800141e:	0018      	movs	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	b002      	add	sp, #8
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	40022000 	.word	0x40022000

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001434:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <HAL_InitTick+0x5c>)
 8001436:	681c      	ldr	r4, [r3, #0]
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <HAL_InitTick+0x60>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	0019      	movs	r1, r3
 800143e:	23fa      	movs	r3, #250	@ 0xfa
 8001440:	0098      	lsls	r0, r3, #2
 8001442:	f7fe fe6b 	bl	800011c <__udivsi3>
 8001446:	0003      	movs	r3, r0
 8001448:	0019      	movs	r1, r3
 800144a:	0020      	movs	r0, r4
 800144c:	f7fe fe66 	bl	800011c <__udivsi3>
 8001450:	0003      	movs	r3, r0
 8001452:	0018      	movs	r0, r3
 8001454:	f000 fcc7 	bl	8001de6 <HAL_SYSTICK_Config>
 8001458:	1e03      	subs	r3, r0, #0
 800145a:	d001      	beq.n	8001460 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e00f      	b.n	8001480 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b03      	cmp	r3, #3
 8001464:	d80b      	bhi.n	800147e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	2301      	movs	r3, #1
 800146a:	425b      	negs	r3, r3
 800146c:	2200      	movs	r2, #0
 800146e:	0018      	movs	r0, r3
 8001470:	f000 fc94 	bl	8001d9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_InitTick+0x64>)
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b003      	add	sp, #12
 8001486:	bd90      	pop	{r4, r7, pc}
 8001488:	20000000 	.word	0x20000000
 800148c:	20000008 	.word	0x20000008
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <HAL_IncTick+0x1c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	001a      	movs	r2, r3
 800149e:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <HAL_IncTick+0x20>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	18d2      	adds	r2, r2, r3
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <HAL_IncTick+0x20>)
 80014a6:	601a      	str	r2, [r3, #0]
}
 80014a8:	46c0      	nop			@ (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			@ (mov r8, r8)
 80014b0:	20000008 	.word	0x20000008
 80014b4:	200001f0 	.word	0x200001f0

080014b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;
 80014bc:	4b02      	ldr	r3, [pc, #8]	@ (80014c8 <HAL_GetTick+0x10>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	0018      	movs	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	200001f0 	.word	0x200001f0

080014cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d4:	f7ff fff0 	bl	80014b8 <HAL_GetTick>
 80014d8:	0003      	movs	r3, r0
 80014da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3301      	adds	r3, #1
 80014e4:	d005      	beq.n	80014f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <HAL_Delay+0x44>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	001a      	movs	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	189b      	adds	r3, r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	f7ff ffe0 	bl	80014b8 <HAL_GetTick>
 80014f8:	0002      	movs	r2, r0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	429a      	cmp	r2, r3
 8001502:	d8f7      	bhi.n	80014f4 <HAL_Delay+0x28>
  {
  }
}
 8001504:	46c0      	nop			@ (mov r8, r8)
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b004      	add	sp, #16
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			@ (mov r8, r8)
 8001510:	20000008 	.word	0x20000008

08001514 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e159      	b.n	80017da <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10a      	bne.n	8001544 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2250      	movs	r2, #80	@ 0x50
 8001538:	2100      	movs	r1, #0
 800153a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	0018      	movs	r0, r3
 8001540:	f7ff fd68 	bl	8001014 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001548:	2210      	movs	r2, #16
 800154a:	4013      	ands	r3, r2
 800154c:	2b10      	cmp	r3, #16
 800154e:	d005      	beq.n	800155c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2204      	movs	r2, #4
 8001558:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800155a:	d00b      	beq.n	8001574 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001560:	2210      	movs	r2, #16
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2250      	movs	r2, #80	@ 0x50
 800156c:	2100      	movs	r1, #0
 800156e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e132      	b.n	80017da <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001578:	4a9a      	ldr	r2, [pc, #616]	@ (80017e4 <HAL_ADC_Init+0x2d0>)
 800157a:	4013      	ands	r3, r2
 800157c:	2202      	movs	r2, #2
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2203      	movs	r2, #3
 800158c:	4013      	ands	r3, r2
 800158e:	2b01      	cmp	r3, #1
 8001590:	d108      	bne.n	80015a4 <HAL_ADC_Init+0x90>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2201      	movs	r2, #1
 800159a:	4013      	ands	r3, r2
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_ADC_Init+0x90>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_ADC_Init+0x92>
 80015a4:	2300      	movs	r3, #0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d149      	bne.n	800163e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	23c0      	movs	r3, #192	@ 0xc0
 80015b0:	061b      	lsls	r3, r3, #24
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d00b      	beq.n	80015ce <HAL_ADC_Init+0xba>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	2380      	movs	r3, #128	@ 0x80
 80015bc:	05db      	lsls	r3, r3, #23
 80015be:	429a      	cmp	r2, r3
 80015c0:	d005      	beq.n	80015ce <HAL_ADC_Init+0xba>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	2380      	movs	r3, #128	@ 0x80
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d111      	bne.n	80015f2 <HAL_ADC_Init+0xde>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	0892      	lsrs	r2, r2, #2
 80015dc:	611a      	str	r2, [r3, #16]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6919      	ldr	r1, [r3, #16]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	611a      	str	r2, [r3, #16]
 80015f0:	e014      	b.n	800161c <HAL_ADC_Init+0x108>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	0892      	lsrs	r2, r2, #2
 8001600:	611a      	str	r2, [r3, #16]
 8001602:	4b79      	ldr	r3, [pc, #484]	@ (80017e8 <HAL_ADC_Init+0x2d4>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b78      	ldr	r3, [pc, #480]	@ (80017e8 <HAL_ADC_Init+0x2d4>)
 8001608:	4978      	ldr	r1, [pc, #480]	@ (80017ec <HAL_ADC_Init+0x2d8>)
 800160a:	400a      	ands	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	4b76      	ldr	r3, [pc, #472]	@ (80017e8 <HAL_ADC_Init+0x2d4>)
 8001610:	6819      	ldr	r1, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	4b74      	ldr	r3, [pc, #464]	@ (80017e8 <HAL_ADC_Init+0x2d4>)
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2118      	movs	r1, #24
 8001628:	438a      	bics	r2, r1
 800162a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68d9      	ldr	r1, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800163e:	4b6a      	ldr	r3, [pc, #424]	@ (80017e8 <HAL_ADC_Init+0x2d4>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b69      	ldr	r3, [pc, #420]	@ (80017e8 <HAL_ADC_Init+0x2d4>)
 8001644:	496a      	ldr	r1, [pc, #424]	@ (80017f0 <HAL_ADC_Init+0x2dc>)
 8001646:	400a      	ands	r2, r1
 8001648:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800164a:	4b67      	ldr	r3, [pc, #412]	@ (80017e8 <HAL_ADC_Init+0x2d4>)
 800164c:	6819      	ldr	r1, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001652:	065a      	lsls	r2, r3, #25
 8001654:	4b64      	ldr	r3, [pc, #400]	@ (80017e8 <HAL_ADC_Init+0x2d4>)
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	055b      	lsls	r3, r3, #21
 8001664:	4013      	ands	r3, r2
 8001666:	d108      	bne.n	800167a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2180      	movs	r1, #128	@ 0x80
 8001674:	0549      	lsls	r1, r1, #21
 8001676:	430a      	orrs	r2, r1
 8001678:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	495b      	ldr	r1, [pc, #364]	@ (80017f4 <HAL_ADC_Init+0x2e0>)
 8001686:	400a      	ands	r2, r1
 8001688:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68d9      	ldr	r1, [r3, #12]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d101      	bne.n	80016a0 <HAL_ADC_Init+0x18c>
 800169c:	2304      	movs	r3, #4
 800169e:	e000      	b.n	80016a2 <HAL_ADC_Init+0x18e>
 80016a0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80016a2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2020      	movs	r0, #32
 80016a8:	5c1b      	ldrb	r3, [r3, r0]
 80016aa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80016ac:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	202c      	movs	r0, #44	@ 0x2c
 80016b2:	5c1b      	ldrb	r3, [r3, r0]
 80016b4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016b6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80016bc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80016c4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80016cc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016da:	23c2      	movs	r3, #194	@ 0xc2
 80016dc:	33ff      	adds	r3, #255	@ 0xff
 80016de:	429a      	cmp	r2, r3
 80016e0:	d00b      	beq.n	80016fa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68d9      	ldr	r1, [r3, #12]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2221      	movs	r2, #33	@ 0x21
 80016fe:	5c9b      	ldrb	r3, [r3, r2]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d11a      	bne.n	800173a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2220      	movs	r2, #32
 8001708:	5c9b      	ldrb	r3, [r3, r2]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d109      	bne.n	8001722 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2180      	movs	r1, #128	@ 0x80
 800171a:	0249      	lsls	r1, r1, #9
 800171c:	430a      	orrs	r2, r1
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	e00b      	b.n	800173a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001726:	2220      	movs	r2, #32
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001732:	2201      	movs	r2, #1
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800173e:	2b01      	cmp	r3, #1
 8001740:	d11f      	bne.n	8001782 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	492a      	ldr	r1, [pc, #168]	@ (80017f8 <HAL_ADC_Init+0x2e4>)
 800174e:	400a      	ands	r2, r1
 8001750:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6919      	ldr	r1, [r3, #16]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001760:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001766:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2101      	movs	r1, #1
 800177c:	430a      	orrs	r2, r1
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	e00e      	b.n	80017a0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	2201      	movs	r2, #1
 800178a:	4013      	ands	r3, r2
 800178c:	2b01      	cmp	r3, #1
 800178e:	d107      	bne.n	80017a0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691a      	ldr	r2, [r3, #16]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2101      	movs	r1, #1
 800179c:	438a      	bics	r2, r1
 800179e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2107      	movs	r1, #7
 80017ac:	438a      	bics	r2, r1
 80017ae:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6959      	ldr	r1, [r3, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017cc:	2203      	movs	r2, #3
 80017ce:	4393      	bics	r3, r2
 80017d0:	2201      	movs	r2, #1
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	0018      	movs	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	b002      	add	sp, #8
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	fffffefd 	.word	0xfffffefd
 80017e8:	40012708 	.word	0x40012708
 80017ec:	ffc3ffff 	.word	0xffc3ffff
 80017f0:	fdffffff 	.word	0xfdffffff
 80017f4:	fffe0219 	.word	0xfffe0219
 80017f8:	fffffc03 	.word	0xfffffc03

080017fc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001804:	230f      	movs	r3, #15
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2204      	movs	r2, #4
 8001814:	4013      	ands	r3, r2
 8001816:	d138      	bne.n	800188a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2250      	movs	r2, #80	@ 0x50
 800181c:	5c9b      	ldrb	r3, [r3, r2]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_ADC_Start+0x2a>
 8001822:	2302      	movs	r3, #2
 8001824:	e038      	b.n	8001898 <HAL_ADC_Start+0x9c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2250      	movs	r2, #80	@ 0x50
 800182a:	2101      	movs	r1, #1
 800182c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d007      	beq.n	8001846 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001836:	230f      	movs	r3, #15
 8001838:	18fc      	adds	r4, r7, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	0018      	movs	r0, r3
 800183e:	f000 f979 	bl	8001b34 <ADC_Enable>
 8001842:	0003      	movs	r3, r0
 8001844:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001846:	230f      	movs	r3, #15
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d120      	bne.n	8001892 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001854:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <HAL_ADC_Start+0xa4>)
 8001856:	4013      	ands	r3, r2
 8001858:	2280      	movs	r2, #128	@ 0x80
 800185a:	0052      	lsls	r2, r2, #1
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2250      	movs	r2, #80	@ 0x50
 800186c:	2100      	movs	r1, #0
 800186e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	221c      	movs	r2, #28
 8001876:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2104      	movs	r1, #4
 8001884:	430a      	orrs	r2, r1
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	e003      	b.n	8001892 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800188a:	230f      	movs	r3, #15
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	2202      	movs	r2, #2
 8001890:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001892:	230f      	movs	r3, #15
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	781b      	ldrb	r3, [r3, #0]
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	b005      	add	sp, #20
 800189e:	bd90      	pop	{r4, r7, pc}
 80018a0:	fffff0fe 	.word	0xfffff0fe

080018a4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d102      	bne.n	80018c4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80018be:	2308      	movs	r3, #8
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	e014      	b.n	80018ee <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d10b      	bne.n	80018ea <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d6:	2220      	movs	r2, #32
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2250      	movs	r2, #80	@ 0x50
 80018e2:	2100      	movs	r1, #0
 80018e4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e072      	b.n	80019d0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80018ea:	230c      	movs	r3, #12
 80018ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80018ee:	f7ff fde3 	bl	80014b8 <HAL_GetTick>
 80018f2:	0003      	movs	r3, r0
 80018f4:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80018f6:	e01f      	b.n	8001938 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	3301      	adds	r3, #1
 80018fc:	d01c      	beq.n	8001938 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d007      	beq.n	8001914 <HAL_ADC_PollForConversion+0x70>
 8001904:	f7ff fdd8 	bl	80014b8 <HAL_GetTick>
 8001908:	0002      	movs	r2, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d211      	bcs.n	8001938 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4013      	ands	r3, r2
 800191e:	d10b      	bne.n	8001938 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001924:	2204      	movs	r2, #4
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2250      	movs	r2, #80	@ 0x50
 8001930:	2100      	movs	r1, #0
 8001932:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e04b      	b.n	80019d0 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4013      	ands	r3, r2
 8001942:	d0d9      	beq.n	80018f8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001948:	2280      	movs	r2, #128	@ 0x80
 800194a:	0092      	lsls	r2, r2, #2
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	23c0      	movs	r3, #192	@ 0xc0
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	4013      	ands	r3, r2
 800195e:	d12e      	bne.n	80019be <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2220      	movs	r2, #32
 8001964:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001966:	2b00      	cmp	r3, #0
 8001968:	d129      	bne.n	80019be <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2208      	movs	r2, #8
 8001972:	4013      	ands	r3, r2
 8001974:	2b08      	cmp	r3, #8
 8001976:	d122      	bne.n	80019be <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2204      	movs	r2, #4
 8001980:	4013      	ands	r3, r2
 8001982:	d110      	bne.n	80019a6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	210c      	movs	r1, #12
 8001990:	438a      	bics	r2, r1
 8001992:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001998:	4a0f      	ldr	r2, [pc, #60]	@ (80019d8 <HAL_ADC_PollForConversion+0x134>)
 800199a:	4013      	ands	r3, r2
 800199c:	2201      	movs	r2, #1
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80019a4:	e00b      	b.n	80019be <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019aa:	2220      	movs	r2, #32
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b6:	2201      	movs	r2, #1
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d103      	bne.n	80019ce <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	220c      	movs	r2, #12
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b004      	add	sp, #16
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	fffffefe 	.word	0xfffffefe

080019dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b002      	add	sp, #8
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2250      	movs	r2, #80	@ 0x50
 8001a02:	5c9b      	ldrb	r3, [r3, r2]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x18>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e085      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x124>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2250      	movs	r2, #80	@ 0x50
 8001a10:	2101      	movs	r1, #1
 8001a12:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d00b      	beq.n	8001a38 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a24:	2220      	movs	r2, #32
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2250      	movs	r2, #80	@ 0x50
 8001a30:	2100      	movs	r1, #0
 8001a32:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e06f      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4a38      	ldr	r2, [pc, #224]	@ (8001b20 <HAL_ADC_ConfigChannel+0x12c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d035      	beq.n	8001aae <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	035b      	lsls	r3, r3, #13
 8001a4e:	0b5a      	lsrs	r2, r3, #13
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	@ 0x80
 8001a5e:	02db      	lsls	r3, r3, #11
 8001a60:	4013      	ands	r3, r2
 8001a62:	d009      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001a64:	4b2f      	ldr	r3, [pc, #188]	@ (8001b24 <HAL_ADC_ConfigChannel+0x130>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b2e      	ldr	r3, [pc, #184]	@ (8001b24 <HAL_ADC_ConfigChannel+0x130>)
 8001a6a:	2180      	movs	r1, #128	@ 0x80
 8001a6c:	0409      	lsls	r1, r1, #16
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001a72:	200a      	movs	r0, #10
 8001a74:	f000 f8c6 	bl	8001c04 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	029b      	lsls	r3, r3, #10
 8001a80:	4013      	ands	r3, r2
 8001a82:	d006      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001a84:	4b27      	ldr	r3, [pc, #156]	@ (8001b24 <HAL_ADC_ConfigChannel+0x130>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b26      	ldr	r3, [pc, #152]	@ (8001b24 <HAL_ADC_ConfigChannel+0x130>)
 8001a8a:	2180      	movs	r1, #128	@ 0x80
 8001a8c:	03c9      	lsls	r1, r1, #15
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	2380      	movs	r3, #128	@ 0x80
 8001a98:	025b      	lsls	r3, r3, #9
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d037      	beq.n	8001b0e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	@ (8001b24 <HAL_ADC_ConfigChannel+0x130>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <HAL_ADC_ConfigChannel+0x130>)
 8001aa4:	2180      	movs	r1, #128	@ 0x80
 8001aa6:	0449      	lsls	r1, r1, #17
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	e02f      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	035b      	lsls	r3, r3, #13
 8001aba:	0b5b      	lsrs	r3, r3, #13
 8001abc:	43d9      	mvns	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	400a      	ands	r2, r1
 8001ac4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2380      	movs	r3, #128	@ 0x80
 8001acc:	02db      	lsls	r3, r3, #11
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d005      	beq.n	8001ade <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <HAL_ADC_ConfigChannel+0x130>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b13      	ldr	r3, [pc, #76]	@ (8001b24 <HAL_ADC_ConfigChannel+0x130>)
 8001ad8:	4913      	ldr	r1, [pc, #76]	@ (8001b28 <HAL_ADC_ConfigChannel+0x134>)
 8001ada:	400a      	ands	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	2380      	movs	r3, #128	@ 0x80
 8001ae4:	029b      	lsls	r3, r3, #10
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d005      	beq.n	8001af6 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <HAL_ADC_ConfigChannel+0x130>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b0d      	ldr	r3, [pc, #52]	@ (8001b24 <HAL_ADC_ConfigChannel+0x130>)
 8001af0:	490e      	ldr	r1, [pc, #56]	@ (8001b2c <HAL_ADC_ConfigChannel+0x138>)
 8001af2:	400a      	ands	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	2380      	movs	r3, #128	@ 0x80
 8001afc:	025b      	lsls	r3, r3, #9
 8001afe:	4013      	ands	r3, r2
 8001b00:	d005      	beq.n	8001b0e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8001b02:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <HAL_ADC_ConfigChannel+0x130>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <HAL_ADC_ConfigChannel+0x130>)
 8001b08:	4909      	ldr	r1, [pc, #36]	@ (8001b30 <HAL_ADC_ConfigChannel+0x13c>)
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2250      	movs	r2, #80	@ 0x50
 8001b12:	2100      	movs	r1, #0
 8001b14:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b002      	add	sp, #8
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	00001001 	.word	0x00001001
 8001b24:	40012708 	.word	0x40012708
 8001b28:	ff7fffff 	.word	0xff7fffff
 8001b2c:	ffbfffff 	.word	0xffbfffff
 8001b30:	feffffff 	.word	0xfeffffff

08001b34 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2203      	movs	r2, #3
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d108      	bne.n	8001b60 <ADC_Enable+0x2c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <ADC_Enable+0x2c>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <ADC_Enable+0x2e>
 8001b60:	2300      	movs	r3, #0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d146      	bne.n	8001bf4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4a24      	ldr	r2, [pc, #144]	@ (8001c00 <ADC_Enable+0xcc>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d00d      	beq.n	8001b8e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b76:	2210      	movs	r2, #16
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b82:	2201      	movs	r2, #1
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e033      	b.n	8001bf6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2101      	movs	r1, #1
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f000 f830 	bl	8001c04 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ba4:	f7ff fc88 	bl	80014b8 <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bac:	e01b      	b.n	8001be6 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bae:	f7ff fc83 	bl	80014b8 <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b0a      	cmp	r3, #10
 8001bba:	d914      	bls.n	8001be6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d00d      	beq.n	8001be6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bce:	2210      	movs	r2, #16
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bda:	2201      	movs	r2, #1
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e007      	b.n	8001bf6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d1dc      	bne.n	8001bae <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b004      	add	sp, #16
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			@ (mov r8, r8)
 8001c00:	80000017 	.word	0x80000017

08001c04 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <ADC_DelayMicroSecond+0x38>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	490b      	ldr	r1, [pc, #44]	@ (8001c40 <ADC_DelayMicroSecond+0x3c>)
 8001c12:	0018      	movs	r0, r3
 8001c14:	f7fe fa82 	bl	800011c <__udivsi3>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4353      	muls	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001c22:	e002      	b.n	8001c2a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f9      	bne.n	8001c24 <ADC_DelayMicroSecond+0x20>
  }
}
 8001c30:	46c0      	nop			@ (mov r8, r8)
 8001c32:	46c0      	nop			@ (mov r8, r8)
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b004      	add	sp, #16
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			@ (mov r8, r8)
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	000f4240 	.word	0x000f4240

08001c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	1dfb      	adds	r3, r7, #7
 8001c4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c50:	1dfb      	adds	r3, r7, #7
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c56:	d809      	bhi.n	8001c6c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c58:	1dfb      	adds	r3, r7, #7
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	231f      	movs	r3, #31
 8001c60:	401a      	ands	r2, r3
 8001c62:	4b04      	ldr	r3, [pc, #16]	@ (8001c74 <__NVIC_EnableIRQ+0x30>)
 8001c64:	2101      	movs	r1, #1
 8001c66:	4091      	lsls	r1, r2
 8001c68:	000a      	movs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
  }
}
 8001c6c:	46c0      	nop			@ (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b002      	add	sp, #8
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	e000e100 	.word	0xe000e100

08001c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	0002      	movs	r2, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c86:	1dfb      	adds	r3, r7, #7
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c8c:	d828      	bhi.n	8001ce0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c8e:	4a2f      	ldr	r2, [pc, #188]	@ (8001d4c <__NVIC_SetPriority+0xd4>)
 8001c90:	1dfb      	adds	r3, r7, #7
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b25b      	sxtb	r3, r3
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	33c0      	adds	r3, #192	@ 0xc0
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	589b      	ldr	r3, [r3, r2]
 8001c9e:	1dfa      	adds	r2, r7, #7
 8001ca0:	7812      	ldrb	r2, [r2, #0]
 8001ca2:	0011      	movs	r1, r2
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	00d2      	lsls	r2, r2, #3
 8001caa:	21ff      	movs	r1, #255	@ 0xff
 8001cac:	4091      	lsls	r1, r2
 8001cae:	000a      	movs	r2, r1
 8001cb0:	43d2      	mvns	r2, r2
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	019b      	lsls	r3, r3, #6
 8001cba:	22ff      	movs	r2, #255	@ 0xff
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	4003      	ands	r3, r0
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ccc:	481f      	ldr	r0, [pc, #124]	@ (8001d4c <__NVIC_SetPriority+0xd4>)
 8001cce:	1dfb      	adds	r3, r7, #7
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	33c0      	adds	r3, #192	@ 0xc0
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cde:	e031      	b.n	8001d44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d50 <__NVIC_SetPriority+0xd8>)
 8001ce2:	1dfb      	adds	r3, r7, #7
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	230f      	movs	r3, #15
 8001cea:	400b      	ands	r3, r1
 8001cec:	3b08      	subs	r3, #8
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3306      	adds	r3, #6
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	18d3      	adds	r3, r2, r3
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	1dfa      	adds	r2, r7, #7
 8001cfc:	7812      	ldrb	r2, [r2, #0]
 8001cfe:	0011      	movs	r1, r2
 8001d00:	2203      	movs	r2, #3
 8001d02:	400a      	ands	r2, r1
 8001d04:	00d2      	lsls	r2, r2, #3
 8001d06:	21ff      	movs	r1, #255	@ 0xff
 8001d08:	4091      	lsls	r1, r2
 8001d0a:	000a      	movs	r2, r1
 8001d0c:	43d2      	mvns	r2, r2
 8001d0e:	401a      	ands	r2, r3
 8001d10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	019b      	lsls	r3, r3, #6
 8001d16:	22ff      	movs	r2, #255	@ 0xff
 8001d18:	401a      	ands	r2, r3
 8001d1a:	1dfb      	adds	r3, r7, #7
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	0018      	movs	r0, r3
 8001d20:	2303      	movs	r3, #3
 8001d22:	4003      	ands	r3, r0
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d28:	4809      	ldr	r0, [pc, #36]	@ (8001d50 <__NVIC_SetPriority+0xd8>)
 8001d2a:	1dfb      	adds	r3, r7, #7
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	001c      	movs	r4, r3
 8001d30:	230f      	movs	r3, #15
 8001d32:	4023      	ands	r3, r4
 8001d34:	3b08      	subs	r3, #8
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	3306      	adds	r3, #6
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	18c3      	adds	r3, r0, r3
 8001d40:	3304      	adds	r3, #4
 8001d42:	601a      	str	r2, [r3, #0]
}
 8001d44:	46c0      	nop			@ (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b003      	add	sp, #12
 8001d4a:	bd90      	pop	{r4, r7, pc}
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	1e5a      	subs	r2, r3, #1
 8001d60:	2380      	movs	r3, #128	@ 0x80
 8001d62:	045b      	lsls	r3, r3, #17
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d301      	bcc.n	8001d6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e010      	b.n	8001d8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <SysTick_Config+0x44>)
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	3a01      	subs	r2, #1
 8001d72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d74:	2301      	movs	r3, #1
 8001d76:	425b      	negs	r3, r3
 8001d78:	2103      	movs	r1, #3
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7ff ff7c 	bl	8001c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <SysTick_Config+0x44>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d86:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <SysTick_Config+0x44>)
 8001d88:	2207      	movs	r2, #7
 8001d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b002      	add	sp, #8
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	e000e010 	.word	0xe000e010

08001d9c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	210f      	movs	r1, #15
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	1c02      	adds	r2, r0, #0
 8001dac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	0011      	movs	r1, r2
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7ff ff5d 	bl	8001c78 <__NVIC_SetPriority>
}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b004      	add	sp, #16
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	0002      	movs	r2, r0
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd2:	1dfb      	adds	r3, r7, #7
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b25b      	sxtb	r3, r3
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7ff ff33 	bl	8001c44 <__NVIC_EnableIRQ>
}
 8001dde:	46c0      	nop			@ (mov r8, r8)
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b002      	add	sp, #8
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff ffaf 	bl	8001d54 <SysTick_Config>
 8001df6:	0003      	movs	r3, r0
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b002      	add	sp, #8
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e16:	e14f      	b.n	80020b8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4091      	lsls	r1, r2
 8001e22:	000a      	movs	r2, r1
 8001e24:	4013      	ands	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d100      	bne.n	8001e30 <HAL_GPIO_Init+0x30>
 8001e2e:	e140      	b.n	80020b2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d005      	beq.n	8001e48 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2203      	movs	r2, #3
 8001e42:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d130      	bne.n	8001eaa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	409a      	lsls	r2, r3
 8001e56:	0013      	movs	r3, r2
 8001e58:	43da      	mvns	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	0013      	movs	r3, r2
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e7e:	2201      	movs	r2, #1
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	409a      	lsls	r2, r3
 8001e84:	0013      	movs	r3, r2
 8001e86:	43da      	mvns	r2, r3
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	2201      	movs	r2, #1
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2203      	movs	r2, #3
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d017      	beq.n	8001ee6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	0013      	movs	r3, r2
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d123      	bne.n	8001f3a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	08da      	lsrs	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3208      	adds	r2, #8
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	58d3      	ldr	r3, [r2, r3]
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2207      	movs	r2, #7
 8001f04:	4013      	ands	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	220f      	movs	r2, #15
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2107      	movs	r1, #7
 8001f1e:	400b      	ands	r3, r1
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	409a      	lsls	r2, r3
 8001f24:	0013      	movs	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	08da      	lsrs	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3208      	adds	r2, #8
 8001f34:	0092      	lsls	r2, r2, #2
 8001f36:	6939      	ldr	r1, [r7, #16]
 8001f38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	2203      	movs	r2, #3
 8001f46:	409a      	lsls	r2, r3
 8001f48:	0013      	movs	r3, r2
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2203      	movs	r2, #3
 8001f58:	401a      	ands	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	0013      	movs	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	23c0      	movs	r3, #192	@ 0xc0
 8001f74:	029b      	lsls	r3, r3, #10
 8001f76:	4013      	ands	r3, r2
 8001f78:	d100      	bne.n	8001f7c <HAL_GPIO_Init+0x17c>
 8001f7a:	e09a      	b.n	80020b2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7c:	4b54      	ldr	r3, [pc, #336]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f80:	4b53      	ldr	r3, [pc, #332]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8001f82:	2101      	movs	r1, #1
 8001f84:	430a      	orrs	r2, r1
 8001f86:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f88:	4a52      	ldr	r2, [pc, #328]	@ (80020d4 <HAL_GPIO_Init+0x2d4>)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	589b      	ldr	r3, [r3, r2]
 8001f94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2203      	movs	r2, #3
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	0013      	movs	r3, r2
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	23a0      	movs	r3, #160	@ 0xa0
 8001fb0:	05db      	lsls	r3, r3, #23
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d019      	beq.n	8001fea <HAL_GPIO_Init+0x1ea>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a47      	ldr	r2, [pc, #284]	@ (80020d8 <HAL_GPIO_Init+0x2d8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <HAL_GPIO_Init+0x1e6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a46      	ldr	r2, [pc, #280]	@ (80020dc <HAL_GPIO_Init+0x2dc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00d      	beq.n	8001fe2 <HAL_GPIO_Init+0x1e2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a45      	ldr	r2, [pc, #276]	@ (80020e0 <HAL_GPIO_Init+0x2e0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d007      	beq.n	8001fde <HAL_GPIO_Init+0x1de>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a44      	ldr	r2, [pc, #272]	@ (80020e4 <HAL_GPIO_Init+0x2e4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_GPIO_Init+0x1da>
 8001fd6:	2305      	movs	r3, #5
 8001fd8:	e008      	b.n	8001fec <HAL_GPIO_Init+0x1ec>
 8001fda:	2306      	movs	r3, #6
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x1ec>
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e004      	b.n	8001fec <HAL_GPIO_Init+0x1ec>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e002      	b.n	8001fec <HAL_GPIO_Init+0x1ec>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_GPIO_Init+0x1ec>
 8001fea:	2300      	movs	r3, #0
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	2103      	movs	r1, #3
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	0092      	lsls	r2, r2, #2
 8001ff4:	4093      	lsls	r3, r2
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ffc:	4935      	ldr	r1, [pc, #212]	@ (80020d4 <HAL_GPIO_Init+0x2d4>)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	3302      	adds	r3, #2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800200a:	4b37      	ldr	r3, [pc, #220]	@ (80020e8 <HAL_GPIO_Init+0x2e8>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	43da      	mvns	r2, r3
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	2380      	movs	r3, #128	@ 0x80
 8002020:	035b      	lsls	r3, r3, #13
 8002022:	4013      	ands	r3, r2
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800202e:	4b2e      	ldr	r3, [pc, #184]	@ (80020e8 <HAL_GPIO_Init+0x2e8>)
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002034:	4b2c      	ldr	r3, [pc, #176]	@ (80020e8 <HAL_GPIO_Init+0x2e8>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	43da      	mvns	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	039b      	lsls	r3, r3, #14
 800204c:	4013      	ands	r3, r2
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002058:	4b23      	ldr	r3, [pc, #140]	@ (80020e8 <HAL_GPIO_Init+0x2e8>)
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800205e:	4b22      	ldr	r3, [pc, #136]	@ (80020e8 <HAL_GPIO_Init+0x2e8>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	43da      	mvns	r2, r3
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	2380      	movs	r3, #128	@ 0x80
 8002074:	029b      	lsls	r3, r3, #10
 8002076:	4013      	ands	r3, r2
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002082:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_GPIO_Init+0x2e8>)
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002088:	4b17      	ldr	r3, [pc, #92]	@ (80020e8 <HAL_GPIO_Init+0x2e8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	43da      	mvns	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	2380      	movs	r3, #128	@ 0x80
 800209e:	025b      	lsls	r3, r3, #9
 80020a0:	4013      	ands	r3, r2
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020ac:	4b0e      	ldr	r3, [pc, #56]	@ (80020e8 <HAL_GPIO_Init+0x2e8>)
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3301      	adds	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	40da      	lsrs	r2, r3
 80020c0:	1e13      	subs	r3, r2, #0
 80020c2:	d000      	beq.n	80020c6 <HAL_GPIO_Init+0x2c6>
 80020c4:	e6a8      	b.n	8001e18 <HAL_GPIO_Init+0x18>
  }
}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	46c0      	nop			@ (mov r8, r8)
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b006      	add	sp, #24
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40010000 	.word	0x40010000
 80020d8:	50000400 	.word	0x50000400
 80020dc:	50000800 	.word	0x50000800
 80020e0:	50000c00 	.word	0x50000c00
 80020e4:	50001c00 	.word	0x50001c00
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	000a      	movs	r2, r1
 80020f6:	1cbb      	adds	r3, r7, #2
 80020f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	1cba      	adds	r2, r7, #2
 8002100:	8812      	ldrh	r2, [r2, #0]
 8002102:	4013      	ands	r3, r2
 8002104:	d004      	beq.n	8002110 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002106:	230f      	movs	r3, #15
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	e003      	b.n	8002118 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002110:	230f      	movs	r3, #15
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002118:	230f      	movs	r3, #15
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	781b      	ldrb	r3, [r3, #0]
}
 800211e:	0018      	movs	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	b004      	add	sp, #16
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	0008      	movs	r0, r1
 8002130:	0011      	movs	r1, r2
 8002132:	1cbb      	adds	r3, r7, #2
 8002134:	1c02      	adds	r2, r0, #0
 8002136:	801a      	strh	r2, [r3, #0]
 8002138:	1c7b      	adds	r3, r7, #1
 800213a:	1c0a      	adds	r2, r1, #0
 800213c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800213e:	1c7b      	adds	r3, r7, #1
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d004      	beq.n	8002150 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002146:	1cbb      	adds	r3, r7, #2
 8002148:	881a      	ldrh	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800214e:	e003      	b.n	8002158 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002150:	1cbb      	adds	r3, r7, #2
 8002152:	881a      	ldrh	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002158:	46c0      	nop			@ (mov r8, r8)
 800215a:	46bd      	mov	sp, r7
 800215c:	b002      	add	sp, #8
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	0002      	movs	r2, r0
 8002168:	1dbb      	adds	r3, r7, #6
 800216a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800216c:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	1dba      	adds	r2, r7, #6
 8002172:	8812      	ldrh	r2, [r2, #0]
 8002174:	4013      	ands	r3, r2
 8002176:	d008      	beq.n	800218a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800217a:	1dba      	adds	r2, r7, #6
 800217c:	8812      	ldrh	r2, [r2, #0]
 800217e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002180:	1dbb      	adds	r3, r7, #6
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	0018      	movs	r0, r3
 8002186:	f7fe fa17 	bl	80005b8 <HAL_GPIO_EXTI_Callback>
  }
}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	b002      	add	sp, #8
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			@ (mov r8, r8)
 8002194:	40010400 	.word	0x40010400

08002198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002198:	b5b0      	push	{r4, r5, r7, lr}
 800219a:	b08a      	sub	sp, #40	@ 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f000 fbaf 	bl	800290a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ac:	4bcf      	ldr	r3, [pc, #828]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	220c      	movs	r2, #12
 80021b2:	4013      	ands	r3, r2
 80021b4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b6:	4bcd      	ldr	r3, [pc, #820]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	2380      	movs	r3, #128	@ 0x80
 80021bc:	025b      	lsls	r3, r3, #9
 80021be:	4013      	ands	r3, r2
 80021c0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2201      	movs	r2, #1
 80021c8:	4013      	ands	r3, r2
 80021ca:	d100      	bne.n	80021ce <HAL_RCC_OscConfig+0x36>
 80021cc:	e07e      	b.n	80022cc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d007      	beq.n	80021e4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d112      	bne.n	8002200 <HAL_RCC_OscConfig+0x68>
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	025b      	lsls	r3, r3, #9
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d10d      	bne.n	8002200 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	4bc1      	ldr	r3, [pc, #772]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	2380      	movs	r3, #128	@ 0x80
 80021ea:	029b      	lsls	r3, r3, #10
 80021ec:	4013      	ands	r3, r2
 80021ee:	d100      	bne.n	80021f2 <HAL_RCC_OscConfig+0x5a>
 80021f0:	e06b      	b.n	80022ca <HAL_RCC_OscConfig+0x132>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d167      	bne.n	80022ca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	f000 fb85 	bl	800290a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	2380      	movs	r3, #128	@ 0x80
 8002206:	025b      	lsls	r3, r3, #9
 8002208:	429a      	cmp	r2, r3
 800220a:	d107      	bne.n	800221c <HAL_RCC_OscConfig+0x84>
 800220c:	4bb7      	ldr	r3, [pc, #732]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4bb6      	ldr	r3, [pc, #728]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002212:	2180      	movs	r1, #128	@ 0x80
 8002214:	0249      	lsls	r1, r1, #9
 8002216:	430a      	orrs	r2, r1
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e027      	b.n	800226c <HAL_RCC_OscConfig+0xd4>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	23a0      	movs	r3, #160	@ 0xa0
 8002222:	02db      	lsls	r3, r3, #11
 8002224:	429a      	cmp	r2, r3
 8002226:	d10e      	bne.n	8002246 <HAL_RCC_OscConfig+0xae>
 8002228:	4bb0      	ldr	r3, [pc, #704]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4baf      	ldr	r3, [pc, #700]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 800222e:	2180      	movs	r1, #128	@ 0x80
 8002230:	02c9      	lsls	r1, r1, #11
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	4bad      	ldr	r3, [pc, #692]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4bac      	ldr	r3, [pc, #688]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 800223c:	2180      	movs	r1, #128	@ 0x80
 800223e:	0249      	lsls	r1, r1, #9
 8002240:	430a      	orrs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e012      	b.n	800226c <HAL_RCC_OscConfig+0xd4>
 8002246:	4ba9      	ldr	r3, [pc, #676]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4ba8      	ldr	r3, [pc, #672]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 800224c:	49a8      	ldr	r1, [pc, #672]	@ (80024f0 <HAL_RCC_OscConfig+0x358>)
 800224e:	400a      	ands	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	4ba6      	ldr	r3, [pc, #664]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	2380      	movs	r3, #128	@ 0x80
 8002258:	025b      	lsls	r3, r3, #9
 800225a:	4013      	ands	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4ba2      	ldr	r3, [pc, #648]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4ba1      	ldr	r3, [pc, #644]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002266:	49a3      	ldr	r1, [pc, #652]	@ (80024f4 <HAL_RCC_OscConfig+0x35c>)
 8002268:	400a      	ands	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d015      	beq.n	80022a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff f920 	bl	80014b8 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800227c:	e009      	b.n	8002292 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227e:	f7ff f91b 	bl	80014b8 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b64      	cmp	r3, #100	@ 0x64
 800228a:	d902      	bls.n	8002292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	f000 fb3c 	bl	800290a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002292:	4b96      	ldr	r3, [pc, #600]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	2380      	movs	r3, #128	@ 0x80
 8002298:	029b      	lsls	r3, r3, #10
 800229a:	4013      	ands	r3, r2
 800229c:	d0ef      	beq.n	800227e <HAL_RCC_OscConfig+0xe6>
 800229e:	e015      	b.n	80022cc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff f90a 	bl	80014b8 <HAL_GetTick>
 80022a4:	0003      	movs	r3, r0
 80022a6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022aa:	f7ff f905 	bl	80014b8 <HAL_GetTick>
 80022ae:	0002      	movs	r2, r0
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b64      	cmp	r3, #100	@ 0x64
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e326      	b.n	800290a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022bc:	4b8b      	ldr	r3, [pc, #556]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2380      	movs	r3, #128	@ 0x80
 80022c2:	029b      	lsls	r3, r3, #10
 80022c4:	4013      	ands	r3, r2
 80022c6:	d1f0      	bne.n	80022aa <HAL_RCC_OscConfig+0x112>
 80022c8:	e000      	b.n	80022cc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ca:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2202      	movs	r2, #2
 80022d2:	4013      	ands	r3, r2
 80022d4:	d100      	bne.n	80022d8 <HAL_RCC_OscConfig+0x140>
 80022d6:	e08b      	b.n	80023f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d13e      	bne.n	8002368 <HAL_RCC_OscConfig+0x1d0>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d13b      	bne.n	8002368 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80022f0:	4b7e      	ldr	r3, [pc, #504]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2204      	movs	r2, #4
 80022f6:	4013      	ands	r3, r2
 80022f8:	d004      	beq.n	8002304 <HAL_RCC_OscConfig+0x16c>
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e302      	b.n	800290a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002304:	4b79      	ldr	r3, [pc, #484]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a7b      	ldr	r2, [pc, #492]	@ (80024f8 <HAL_RCC_OscConfig+0x360>)
 800230a:	4013      	ands	r3, r2
 800230c:	0019      	movs	r1, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	021a      	lsls	r2, r3, #8
 8002314:	4b75      	ldr	r3, [pc, #468]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002316:	430a      	orrs	r2, r1
 8002318:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800231a:	4b74      	ldr	r3, [pc, #464]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2209      	movs	r2, #9
 8002320:	4393      	bics	r3, r2
 8002322:	0019      	movs	r1, r3
 8002324:	4b71      	ldr	r3, [pc, #452]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	430a      	orrs	r2, r1
 800232a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800232c:	f000 fc40 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002330:	0001      	movs	r1, r0
 8002332:	4b6e      	ldr	r3, [pc, #440]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	220f      	movs	r2, #15
 800233a:	4013      	ands	r3, r2
 800233c:	4a6f      	ldr	r2, [pc, #444]	@ (80024fc <HAL_RCC_OscConfig+0x364>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	000a      	movs	r2, r1
 8002342:	40da      	lsrs	r2, r3
 8002344:	4b6e      	ldr	r3, [pc, #440]	@ (8002500 <HAL_RCC_OscConfig+0x368>)
 8002346:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002348:	4b6e      	ldr	r3, [pc, #440]	@ (8002504 <HAL_RCC_OscConfig+0x36c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2513      	movs	r5, #19
 800234e:	197c      	adds	r4, r7, r5
 8002350:	0018      	movs	r0, r3
 8002352:	f7ff f86b 	bl	800142c <HAL_InitTick>
 8002356:	0003      	movs	r3, r0
 8002358:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800235a:	197b      	adds	r3, r7, r5
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d046      	beq.n	80023f0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002362:	197b      	adds	r3, r7, r5
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	e2d0      	b.n	800290a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d027      	beq.n	80023be <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800236e:	4b5f      	ldr	r3, [pc, #380]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2209      	movs	r2, #9
 8002374:	4393      	bics	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	4b5c      	ldr	r3, [pc, #368]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7ff f89a 	bl	80014b8 <HAL_GetTick>
 8002384:	0003      	movs	r3, r0
 8002386:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800238a:	f7ff f895 	bl	80014b8 <HAL_GetTick>
 800238e:	0002      	movs	r2, r0
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e2b6      	b.n	800290a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800239c:	4b53      	ldr	r3, [pc, #332]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2204      	movs	r2, #4
 80023a2:	4013      	ands	r3, r2
 80023a4:	d0f1      	beq.n	800238a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4b51      	ldr	r3, [pc, #324]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4a53      	ldr	r2, [pc, #332]	@ (80024f8 <HAL_RCC_OscConfig+0x360>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	021a      	lsls	r2, r3, #8
 80023b6:	4b4d      	ldr	r3, [pc, #308]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 80023b8:	430a      	orrs	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	e018      	b.n	80023f0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023be:	4b4b      	ldr	r3, [pc, #300]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4b4a      	ldr	r3, [pc, #296]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 80023c4:	2101      	movs	r1, #1
 80023c6:	438a      	bics	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7ff f875 	bl	80014b8 <HAL_GetTick>
 80023ce:	0003      	movs	r3, r0
 80023d0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d4:	f7ff f870 	bl	80014b8 <HAL_GetTick>
 80023d8:	0002      	movs	r2, r0
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e291      	b.n	800290a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023e6:	4b41      	ldr	r3, [pc, #260]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2204      	movs	r2, #4
 80023ec:	4013      	ands	r3, r2
 80023ee:	d1f1      	bne.n	80023d4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2210      	movs	r2, #16
 80023f6:	4013      	ands	r3, r2
 80023f8:	d100      	bne.n	80023fc <HAL_RCC_OscConfig+0x264>
 80023fa:	e0a1      	b.n	8002540 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d140      	bne.n	8002484 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002402:	4b3a      	ldr	r3, [pc, #232]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	2380      	movs	r3, #128	@ 0x80
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4013      	ands	r3, r2
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x282>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e277      	b.n	800290a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800241a:	4b34      	ldr	r3, [pc, #208]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4a3a      	ldr	r2, [pc, #232]	@ (8002508 <HAL_RCC_OscConfig+0x370>)
 8002420:	4013      	ands	r3, r2
 8002422:	0019      	movs	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002428:	4b30      	ldr	r3, [pc, #192]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800242e:	4b2f      	ldr	r3, [pc, #188]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	0a19      	lsrs	r1, r3, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	061a      	lsls	r2, r3, #24
 800243c:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 800243e:	430a      	orrs	r2, r1
 8002440:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	0b5b      	lsrs	r3, r3, #13
 8002448:	3301      	adds	r3, #1
 800244a:	2280      	movs	r2, #128	@ 0x80
 800244c:	0212      	lsls	r2, r2, #8
 800244e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002450:	4b26      	ldr	r3, [pc, #152]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	210f      	movs	r1, #15
 8002458:	400b      	ands	r3, r1
 800245a:	4928      	ldr	r1, [pc, #160]	@ (80024fc <HAL_RCC_OscConfig+0x364>)
 800245c:	5ccb      	ldrb	r3, [r1, r3]
 800245e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002460:	4b27      	ldr	r3, [pc, #156]	@ (8002500 <HAL_RCC_OscConfig+0x368>)
 8002462:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002464:	4b27      	ldr	r3, [pc, #156]	@ (8002504 <HAL_RCC_OscConfig+0x36c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2513      	movs	r5, #19
 800246a:	197c      	adds	r4, r7, r5
 800246c:	0018      	movs	r0, r3
 800246e:	f7fe ffdd 	bl	800142c <HAL_InitTick>
 8002472:	0003      	movs	r3, r0
 8002474:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002476:	197b      	adds	r3, r7, r5
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d060      	beq.n	8002540 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800247e:	197b      	adds	r3, r7, r5
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	e242      	b.n	800290a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d03f      	beq.n	800250c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800248c:	4b17      	ldr	r3, [pc, #92]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 8002492:	2180      	movs	r1, #128	@ 0x80
 8002494:	0049      	lsls	r1, r1, #1
 8002496:	430a      	orrs	r2, r1
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7ff f80d 	bl	80014b8 <HAL_GetTick>
 800249e:	0003      	movs	r3, r0
 80024a0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a4:	f7ff f808 	bl	80014b8 <HAL_GetTick>
 80024a8:	0002      	movs	r2, r0
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e229      	b.n	800290a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024b6:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	2380      	movs	r3, #128	@ 0x80
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4013      	ands	r3, r2
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024c2:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4a10      	ldr	r2, [pc, #64]	@ (8002508 <HAL_RCC_OscConfig+0x370>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024d0:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 80024d2:	430a      	orrs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024d6:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	0a19      	lsrs	r1, r3, #8
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	061a      	lsls	r2, r3, #24
 80024e4:	4b01      	ldr	r3, [pc, #4]	@ (80024ec <HAL_RCC_OscConfig+0x354>)
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	e029      	b.n	8002540 <HAL_RCC_OscConfig+0x3a8>
 80024ec:	40021000 	.word	0x40021000
 80024f0:	fffeffff 	.word	0xfffeffff
 80024f4:	fffbffff 	.word	0xfffbffff
 80024f8:	ffffe0ff 	.word	0xffffe0ff
 80024fc:	0800580c 	.word	0x0800580c
 8002500:	20000000 	.word	0x20000000
 8002504:	20000004 	.word	0x20000004
 8002508:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800250c:	4bbd      	ldr	r3, [pc, #756]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4bbc      	ldr	r3, [pc, #752]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002512:	49bd      	ldr	r1, [pc, #756]	@ (8002808 <HAL_RCC_OscConfig+0x670>)
 8002514:	400a      	ands	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe ffce 	bl	80014b8 <HAL_GetTick>
 800251c:	0003      	movs	r3, r0
 800251e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002522:	f7fe ffc9 	bl	80014b8 <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e1ea      	b.n	800290a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002534:	4bb3      	ldr	r3, [pc, #716]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4013      	ands	r3, r2
 800253e:	d1f0      	bne.n	8002522 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2208      	movs	r2, #8
 8002546:	4013      	ands	r3, r2
 8002548:	d036      	beq.n	80025b8 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d019      	beq.n	8002586 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002552:	4bac      	ldr	r3, [pc, #688]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002554:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002556:	4bab      	ldr	r3, [pc, #684]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002558:	2101      	movs	r1, #1
 800255a:	430a      	orrs	r2, r1
 800255c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe ffab 	bl	80014b8 <HAL_GetTick>
 8002562:	0003      	movs	r3, r0
 8002564:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002568:	f7fe ffa6 	bl	80014b8 <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1c7      	b.n	800290a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800257a:	4ba2      	ldr	r3, [pc, #648]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 800257c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d0f1      	beq.n	8002568 <HAL_RCC_OscConfig+0x3d0>
 8002584:	e018      	b.n	80025b8 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002586:	4b9f      	ldr	r3, [pc, #636]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002588:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800258a:	4b9e      	ldr	r3, [pc, #632]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 800258c:	2101      	movs	r1, #1
 800258e:	438a      	bics	r2, r1
 8002590:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002592:	f7fe ff91 	bl	80014b8 <HAL_GetTick>
 8002596:	0003      	movs	r3, r0
 8002598:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259c:	f7fe ff8c 	bl	80014b8 <HAL_GetTick>
 80025a0:	0002      	movs	r2, r0
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1ad      	b.n	800290a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025ae:	4b95      	ldr	r3, [pc, #596]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 80025b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d1f1      	bne.n	800259c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2204      	movs	r2, #4
 80025be:	4013      	ands	r3, r2
 80025c0:	d100      	bne.n	80025c4 <HAL_RCC_OscConfig+0x42c>
 80025c2:	e0ae      	b.n	8002722 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c4:	2027      	movs	r0, #39	@ 0x27
 80025c6:	183b      	adds	r3, r7, r0
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 80025ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025d0:	2380      	movs	r3, #128	@ 0x80
 80025d2:	055b      	lsls	r3, r3, #21
 80025d4:	4013      	ands	r3, r2
 80025d6:	d109      	bne.n	80025ec <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b8a      	ldr	r3, [pc, #552]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 80025da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025dc:	4b89      	ldr	r3, [pc, #548]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 80025de:	2180      	movs	r1, #128	@ 0x80
 80025e0:	0549      	lsls	r1, r1, #21
 80025e2:	430a      	orrs	r2, r1
 80025e4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80025e6:	183b      	adds	r3, r7, r0
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	4b87      	ldr	r3, [pc, #540]	@ (800280c <HAL_RCC_OscConfig+0x674>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	@ 0x80
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4013      	ands	r3, r2
 80025f6:	d11a      	bne.n	800262e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f8:	4b84      	ldr	r3, [pc, #528]	@ (800280c <HAL_RCC_OscConfig+0x674>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b83      	ldr	r3, [pc, #524]	@ (800280c <HAL_RCC_OscConfig+0x674>)
 80025fe:	2180      	movs	r1, #128	@ 0x80
 8002600:	0049      	lsls	r1, r1, #1
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002606:	f7fe ff57 	bl	80014b8 <HAL_GetTick>
 800260a:	0003      	movs	r3, r0
 800260c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002610:	f7fe ff52 	bl	80014b8 <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	@ 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e173      	b.n	800290a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	4b7a      	ldr	r3, [pc, #488]	@ (800280c <HAL_RCC_OscConfig+0x674>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	2380      	movs	r3, #128	@ 0x80
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4013      	ands	r3, r2
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	2380      	movs	r3, #128	@ 0x80
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	429a      	cmp	r2, r3
 8002638:	d107      	bne.n	800264a <HAL_RCC_OscConfig+0x4b2>
 800263a:	4b72      	ldr	r3, [pc, #456]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 800263c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800263e:	4b71      	ldr	r3, [pc, #452]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002640:	2180      	movs	r1, #128	@ 0x80
 8002642:	0049      	lsls	r1, r1, #1
 8002644:	430a      	orrs	r2, r1
 8002646:	651a      	str	r2, [r3, #80]	@ 0x50
 8002648:	e031      	b.n	80026ae <HAL_RCC_OscConfig+0x516>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0x4d4>
 8002652:	4b6c      	ldr	r3, [pc, #432]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002654:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002656:	4b6b      	ldr	r3, [pc, #428]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002658:	496b      	ldr	r1, [pc, #428]	@ (8002808 <HAL_RCC_OscConfig+0x670>)
 800265a:	400a      	ands	r2, r1
 800265c:	651a      	str	r2, [r3, #80]	@ 0x50
 800265e:	4b69      	ldr	r3, [pc, #420]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002660:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002662:	4b68      	ldr	r3, [pc, #416]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002664:	496a      	ldr	r1, [pc, #424]	@ (8002810 <HAL_RCC_OscConfig+0x678>)
 8002666:	400a      	ands	r2, r1
 8002668:	651a      	str	r2, [r3, #80]	@ 0x50
 800266a:	e020      	b.n	80026ae <HAL_RCC_OscConfig+0x516>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	23a0      	movs	r3, #160	@ 0xa0
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	429a      	cmp	r2, r3
 8002676:	d10e      	bne.n	8002696 <HAL_RCC_OscConfig+0x4fe>
 8002678:	4b62      	ldr	r3, [pc, #392]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 800267a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800267c:	4b61      	ldr	r3, [pc, #388]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 800267e:	2180      	movs	r1, #128	@ 0x80
 8002680:	00c9      	lsls	r1, r1, #3
 8002682:	430a      	orrs	r2, r1
 8002684:	651a      	str	r2, [r3, #80]	@ 0x50
 8002686:	4b5f      	ldr	r3, [pc, #380]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002688:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800268a:	4b5e      	ldr	r3, [pc, #376]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 800268c:	2180      	movs	r1, #128	@ 0x80
 800268e:	0049      	lsls	r1, r1, #1
 8002690:	430a      	orrs	r2, r1
 8002692:	651a      	str	r2, [r3, #80]	@ 0x50
 8002694:	e00b      	b.n	80026ae <HAL_RCC_OscConfig+0x516>
 8002696:	4b5b      	ldr	r3, [pc, #364]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002698:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800269a:	4b5a      	ldr	r3, [pc, #360]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 800269c:	495a      	ldr	r1, [pc, #360]	@ (8002808 <HAL_RCC_OscConfig+0x670>)
 800269e:	400a      	ands	r2, r1
 80026a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80026a2:	4b58      	ldr	r3, [pc, #352]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 80026a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026a6:	4b57      	ldr	r3, [pc, #348]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 80026a8:	4959      	ldr	r1, [pc, #356]	@ (8002810 <HAL_RCC_OscConfig+0x678>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d015      	beq.n	80026e2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7fe feff 	bl	80014b8 <HAL_GetTick>
 80026ba:	0003      	movs	r3, r0
 80026bc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026be:	e009      	b.n	80026d4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7fe fefa 	bl	80014b8 <HAL_GetTick>
 80026c4:	0002      	movs	r2, r0
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	4a52      	ldr	r2, [pc, #328]	@ (8002814 <HAL_RCC_OscConfig+0x67c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e11a      	b.n	800290a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 80026d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026d8:	2380      	movs	r3, #128	@ 0x80
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4013      	ands	r3, r2
 80026de:	d0ef      	beq.n	80026c0 <HAL_RCC_OscConfig+0x528>
 80026e0:	e014      	b.n	800270c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fee9 	bl	80014b8 <HAL_GetTick>
 80026e6:	0003      	movs	r3, r0
 80026e8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026ea:	e009      	b.n	8002700 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7fe fee4 	bl	80014b8 <HAL_GetTick>
 80026f0:	0002      	movs	r2, r0
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	4a47      	ldr	r2, [pc, #284]	@ (8002814 <HAL_RCC_OscConfig+0x67c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e104      	b.n	800290a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002700:	4b40      	ldr	r3, [pc, #256]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002702:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4013      	ands	r3, r2
 800270a:	d1ef      	bne.n	80026ec <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800270c:	2327      	movs	r3, #39	@ 0x27
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d105      	bne.n	8002722 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002716:	4b3b      	ldr	r3, [pc, #236]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800271a:	4b3a      	ldr	r3, [pc, #232]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 800271c:	493e      	ldr	r1, [pc, #248]	@ (8002818 <HAL_RCC_OscConfig+0x680>)
 800271e:	400a      	ands	r2, r1
 8002720:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2220      	movs	r2, #32
 8002728:	4013      	ands	r3, r2
 800272a:	d049      	beq.n	80027c0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d026      	beq.n	8002782 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002734:	4b33      	ldr	r3, [pc, #204]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	4b32      	ldr	r3, [pc, #200]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 800273a:	2101      	movs	r1, #1
 800273c:	430a      	orrs	r2, r1
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	4b30      	ldr	r3, [pc, #192]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002744:	4b2f      	ldr	r3, [pc, #188]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002746:	2101      	movs	r1, #1
 8002748:	430a      	orrs	r2, r1
 800274a:	635a      	str	r2, [r3, #52]	@ 0x34
 800274c:	4b33      	ldr	r3, [pc, #204]	@ (800281c <HAL_RCC_OscConfig+0x684>)
 800274e:	6a1a      	ldr	r2, [r3, #32]
 8002750:	4b32      	ldr	r3, [pc, #200]	@ (800281c <HAL_RCC_OscConfig+0x684>)
 8002752:	2180      	movs	r1, #128	@ 0x80
 8002754:	0189      	lsls	r1, r1, #6
 8002756:	430a      	orrs	r2, r1
 8002758:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7fe fead 	bl	80014b8 <HAL_GetTick>
 800275e:	0003      	movs	r3, r0
 8002760:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002764:	f7fe fea8 	bl	80014b8 <HAL_GetTick>
 8002768:	0002      	movs	r2, r0
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0c9      	b.n	800290a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002776:	4b23      	ldr	r3, [pc, #140]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2202      	movs	r2, #2
 800277c:	4013      	ands	r3, r2
 800277e:	d0f1      	beq.n	8002764 <HAL_RCC_OscConfig+0x5cc>
 8002780:	e01e      	b.n	80027c0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002782:	4b20      	ldr	r3, [pc, #128]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	4b1f      	ldr	r3, [pc, #124]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 8002788:	2101      	movs	r1, #1
 800278a:	438a      	bics	r2, r1
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	4b23      	ldr	r3, [pc, #140]	@ (800281c <HAL_RCC_OscConfig+0x684>)
 8002790:	6a1a      	ldr	r2, [r3, #32]
 8002792:	4b22      	ldr	r3, [pc, #136]	@ (800281c <HAL_RCC_OscConfig+0x684>)
 8002794:	4922      	ldr	r1, [pc, #136]	@ (8002820 <HAL_RCC_OscConfig+0x688>)
 8002796:	400a      	ands	r2, r1
 8002798:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279a:	f7fe fe8d 	bl	80014b8 <HAL_GetTick>
 800279e:	0003      	movs	r3, r0
 80027a0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027a4:	f7fe fe88 	bl	80014b8 <HAL_GetTick>
 80027a8:	0002      	movs	r2, r0
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e0a9      	b.n	800290a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027b6:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	d1f1      	bne.n	80027a4 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d100      	bne.n	80027ca <HAL_RCC_OscConfig+0x632>
 80027c8:	e09e      	b.n	8002908 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	d100      	bne.n	80027d2 <HAL_RCC_OscConfig+0x63a>
 80027d0:	e077      	b.n	80028c2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d158      	bne.n	800288c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <HAL_RCC_OscConfig+0x66c>)
 80027e0:	4910      	ldr	r1, [pc, #64]	@ (8002824 <HAL_RCC_OscConfig+0x68c>)
 80027e2:	400a      	ands	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe fe67 	bl	80014b8 <HAL_GetTick>
 80027ea:	0003      	movs	r3, r0
 80027ec:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027ee:	e01b      	b.n	8002828 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fe62 	bl	80014b8 <HAL_GetTick>
 80027f4:	0002      	movs	r2, r0
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d914      	bls.n	8002828 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e083      	b.n	800290a <HAL_RCC_OscConfig+0x772>
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	40021000 	.word	0x40021000
 8002808:	fffffeff 	.word	0xfffffeff
 800280c:	40007000 	.word	0x40007000
 8002810:	fffffbff 	.word	0xfffffbff
 8002814:	00001388 	.word	0x00001388
 8002818:	efffffff 	.word	0xefffffff
 800281c:	40010000 	.word	0x40010000
 8002820:	ffffdfff 	.word	0xffffdfff
 8002824:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002828:	4b3a      	ldr	r3, [pc, #232]	@ (8002914 <HAL_RCC_OscConfig+0x77c>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	049b      	lsls	r3, r3, #18
 8002830:	4013      	ands	r3, r2
 8002832:	d1dd      	bne.n	80027f0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002834:	4b37      	ldr	r3, [pc, #220]	@ (8002914 <HAL_RCC_OscConfig+0x77c>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a37      	ldr	r2, [pc, #220]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 800283a:	4013      	ands	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284c:	431a      	orrs	r2, r3
 800284e:	4b31      	ldr	r3, [pc, #196]	@ (8002914 <HAL_RCC_OscConfig+0x77c>)
 8002850:	430a      	orrs	r2, r1
 8002852:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002854:	4b2f      	ldr	r3, [pc, #188]	@ (8002914 <HAL_RCC_OscConfig+0x77c>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b2e      	ldr	r3, [pc, #184]	@ (8002914 <HAL_RCC_OscConfig+0x77c>)
 800285a:	2180      	movs	r1, #128	@ 0x80
 800285c:	0449      	lsls	r1, r1, #17
 800285e:	430a      	orrs	r2, r1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe fe29 	bl	80014b8 <HAL_GetTick>
 8002866:	0003      	movs	r3, r0
 8002868:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fe24 	bl	80014b8 <HAL_GetTick>
 8002870:	0002      	movs	r2, r0
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e045      	b.n	800290a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800287e:	4b25      	ldr	r3, [pc, #148]	@ (8002914 <HAL_RCC_OscConfig+0x77c>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	2380      	movs	r3, #128	@ 0x80
 8002884:	049b      	lsls	r3, r3, #18
 8002886:	4013      	ands	r3, r2
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x6d4>
 800288a:	e03d      	b.n	8002908 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b21      	ldr	r3, [pc, #132]	@ (8002914 <HAL_RCC_OscConfig+0x77c>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b20      	ldr	r3, [pc, #128]	@ (8002914 <HAL_RCC_OscConfig+0x77c>)
 8002892:	4922      	ldr	r1, [pc, #136]	@ (800291c <HAL_RCC_OscConfig+0x784>)
 8002894:	400a      	ands	r2, r1
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe fe0e 	bl	80014b8 <HAL_GetTick>
 800289c:	0003      	movs	r3, r0
 800289e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fe fe09 	bl	80014b8 <HAL_GetTick>
 80028a6:	0002      	movs	r2, r0
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e02a      	b.n	800290a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028b4:	4b17      	ldr	r3, [pc, #92]	@ (8002914 <HAL_RCC_OscConfig+0x77c>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	2380      	movs	r3, #128	@ 0x80
 80028ba:	049b      	lsls	r3, r3, #18
 80028bc:	4013      	ands	r3, r2
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x70a>
 80028c0:	e022      	b.n	8002908 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e01d      	b.n	800290a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028ce:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <HAL_RCC_OscConfig+0x77c>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	025b      	lsls	r3, r3, #9
 80028da:	401a      	ands	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d10f      	bne.n	8002904 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	23f0      	movs	r3, #240	@ 0xf0
 80028e8:	039b      	lsls	r3, r3, #14
 80028ea:	401a      	ands	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d107      	bne.n	8002904 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	23c0      	movs	r3, #192	@ 0xc0
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	401a      	ands	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	0018      	movs	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	b00a      	add	sp, #40	@ 0x28
 8002910:	bdb0      	pop	{r4, r5, r7, pc}
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	40021000 	.word	0x40021000
 8002918:	ff02ffff 	.word	0xff02ffff
 800291c:	feffffff 	.word	0xfeffffff

08002920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e128      	b.n	8002b86 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002934:	4b96      	ldr	r3, [pc, #600]	@ (8002b90 <HAL_RCC_ClockConfig+0x270>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2201      	movs	r2, #1
 800293a:	4013      	ands	r3, r2
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d91e      	bls.n	8002980 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b93      	ldr	r3, [pc, #588]	@ (8002b90 <HAL_RCC_ClockConfig+0x270>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2201      	movs	r2, #1
 8002948:	4393      	bics	r3, r2
 800294a:	0019      	movs	r1, r3
 800294c:	4b90      	ldr	r3, [pc, #576]	@ (8002b90 <HAL_RCC_ClockConfig+0x270>)
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002954:	f7fe fdb0 	bl	80014b8 <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295c:	e009      	b.n	8002972 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295e:	f7fe fdab 	bl	80014b8 <HAL_GetTick>
 8002962:	0002      	movs	r2, r0
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	4a8a      	ldr	r2, [pc, #552]	@ (8002b94 <HAL_RCC_ClockConfig+0x274>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e109      	b.n	8002b86 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b87      	ldr	r3, [pc, #540]	@ (8002b90 <HAL_RCC_ClockConfig+0x270>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2201      	movs	r2, #1
 8002978:	4013      	ands	r3, r2
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d1ee      	bne.n	800295e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2202      	movs	r2, #2
 8002986:	4013      	ands	r3, r2
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298a:	4b83      	ldr	r3, [pc, #524]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	22f0      	movs	r2, #240	@ 0xf0
 8002990:	4393      	bics	r3, r2
 8002992:	0019      	movs	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	4b7f      	ldr	r3, [pc, #508]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 800299a:	430a      	orrs	r2, r1
 800299c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2201      	movs	r2, #1
 80029a4:	4013      	ands	r3, r2
 80029a6:	d100      	bne.n	80029aa <HAL_RCC_ClockConfig+0x8a>
 80029a8:	e089      	b.n	8002abe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029b2:	4b79      	ldr	r3, [pc, #484]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	2380      	movs	r3, #128	@ 0x80
 80029b8:	029b      	lsls	r3, r3, #10
 80029ba:	4013      	ands	r3, r2
 80029bc:	d120      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0e1      	b.n	8002b86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ca:	4b73      	ldr	r3, [pc, #460]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	2380      	movs	r3, #128	@ 0x80
 80029d0:	049b      	lsls	r3, r3, #18
 80029d2:	4013      	ands	r3, r2
 80029d4:	d114      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0d5      	b.n	8002b86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d106      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2204      	movs	r2, #4
 80029e8:	4013      	ands	r3, r2
 80029ea:	d109      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0ca      	b.n	8002b86 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029f0:	4b69      	ldr	r3, [pc, #420]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	2380      	movs	r3, #128	@ 0x80
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4013      	ands	r3, r2
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0c2      	b.n	8002b86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a00:	4b65      	ldr	r3, [pc, #404]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2203      	movs	r2, #3
 8002a06:	4393      	bics	r3, r2
 8002a08:	0019      	movs	r1, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4b62      	ldr	r3, [pc, #392]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 8002a10:	430a      	orrs	r2, r1
 8002a12:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a14:	f7fe fd50 	bl	80014b8 <HAL_GetTick>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d111      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a24:	e009      	b.n	8002a3a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a26:	f7fe fd47 	bl	80014b8 <HAL_GetTick>
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	4a58      	ldr	r2, [pc, #352]	@ (8002b94 <HAL_RCC_ClockConfig+0x274>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e0a5      	b.n	8002b86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a3a:	4b57      	ldr	r3, [pc, #348]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	220c      	movs	r2, #12
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d1ef      	bne.n	8002a26 <HAL_RCC_ClockConfig+0x106>
 8002a46:	e03a      	b.n	8002abe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d111      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a50:	e009      	b.n	8002a66 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a52:	f7fe fd31 	bl	80014b8 <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	4a4d      	ldr	r2, [pc, #308]	@ (8002b94 <HAL_RCC_ClockConfig+0x274>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e08f      	b.n	8002b86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a66:	4b4c      	ldr	r3, [pc, #304]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d1ef      	bne.n	8002a52 <HAL_RCC_ClockConfig+0x132>
 8002a72:	e024      	b.n	8002abe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d11b      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a7c:	e009      	b.n	8002a92 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7e:	f7fe fd1b 	bl	80014b8 <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	4a42      	ldr	r2, [pc, #264]	@ (8002b94 <HAL_RCC_ClockConfig+0x274>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e079      	b.n	8002b86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a92:	4b41      	ldr	r3, [pc, #260]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	220c      	movs	r2, #12
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d1ef      	bne.n	8002a7e <HAL_RCC_ClockConfig+0x15e>
 8002a9e:	e00e      	b.n	8002abe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7fe fd0a 	bl	80014b8 <HAL_GetTick>
 8002aa4:	0002      	movs	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	4a3a      	ldr	r2, [pc, #232]	@ (8002b94 <HAL_RCC_ClockConfig+0x274>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e068      	b.n	8002b86 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ab4:	4b38      	ldr	r3, [pc, #224]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	220c      	movs	r2, #12
 8002aba:	4013      	ands	r3, r2
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002abe:	4b34      	ldr	r3, [pc, #208]	@ (8002b90 <HAL_RCC_ClockConfig+0x270>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d21e      	bcs.n	8002b0a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002acc:	4b30      	ldr	r3, [pc, #192]	@ (8002b90 <HAL_RCC_ClockConfig+0x270>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4393      	bics	r3, r2
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	4b2e      	ldr	r3, [pc, #184]	@ (8002b90 <HAL_RCC_ClockConfig+0x270>)
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ade:	f7fe fceb 	bl	80014b8 <HAL_GetTick>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	e009      	b.n	8002afc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f7fe fce6 	bl	80014b8 <HAL_GetTick>
 8002aec:	0002      	movs	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	4a28      	ldr	r2, [pc, #160]	@ (8002b94 <HAL_RCC_ClockConfig+0x274>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e044      	b.n	8002b86 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afc:	4b24      	ldr	r3, [pc, #144]	@ (8002b90 <HAL_RCC_ClockConfig+0x270>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2201      	movs	r2, #1
 8002b02:	4013      	ands	r3, r2
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d1ee      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	4013      	ands	r3, r2
 8002b12:	d009      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b14:	4b20      	ldr	r3, [pc, #128]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4a20      	ldr	r2, [pc, #128]	@ (8002b9c <HAL_RCC_ClockConfig+0x27c>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	4b1d      	ldr	r3, [pc, #116]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 8002b24:	430a      	orrs	r2, r1
 8002b26:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d00a      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b32:	4b19      	ldr	r3, [pc, #100]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba0 <HAL_RCC_ClockConfig+0x280>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	00da      	lsls	r2, r3, #3
 8002b42:	4b15      	ldr	r3, [pc, #84]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 8002b44:	430a      	orrs	r2, r1
 8002b46:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b48:	f000 f832 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002b4c:	0001      	movs	r1, r0
 8002b4e:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <HAL_RCC_ClockConfig+0x278>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	220f      	movs	r2, #15
 8002b56:	4013      	ands	r3, r2
 8002b58:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <HAL_RCC_ClockConfig+0x284>)
 8002b5a:	5cd3      	ldrb	r3, [r2, r3]
 8002b5c:	000a      	movs	r2, r1
 8002b5e:	40da      	lsrs	r2, r3
 8002b60:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <HAL_RCC_ClockConfig+0x288>)
 8002b62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b64:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <HAL_RCC_ClockConfig+0x28c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	250b      	movs	r5, #11
 8002b6a:	197c      	adds	r4, r7, r5
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f7fe fc5d 	bl	800142c <HAL_InitTick>
 8002b72:	0003      	movs	r3, r0
 8002b74:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002b76:	197b      	adds	r3, r7, r5
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002b7e:	197b      	adds	r3, r7, r5
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b004      	add	sp, #16
 8002b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b8e:	46c0      	nop			@ (mov r8, r8)
 8002b90:	40022000 	.word	0x40022000
 8002b94:	00001388 	.word	0x00001388
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	fffff8ff 	.word	0xfffff8ff
 8002ba0:	ffffc7ff 	.word	0xffffc7ff
 8002ba4:	0800580c 	.word	0x0800580c
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	20000004 	.word	0x20000004

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b08e      	sub	sp, #56	@ 0x38
 8002bb4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002bb6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bbe:	230c      	movs	r3, #12
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b0c      	cmp	r3, #12
 8002bc4:	d014      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bc6:	d900      	bls.n	8002bca <HAL_RCC_GetSysClockFreq+0x1a>
 8002bc8:	e07b      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x112>
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d002      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x24>
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d00b      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0x3a>
 8002bd2:	e076      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002bd4:	4b44      	ldr	r3, [pc, #272]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2210      	movs	r2, #16
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d002      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002bde:	4b43      	ldr	r3, [pc, #268]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x13c>)
 8002be0:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002be2:	e07c      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002be4:	4b42      	ldr	r3, [pc, #264]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002be6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002be8:	e079      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bea:	4b42      	ldr	r3, [pc, #264]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002bec:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002bee:	e076      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf2:	0c9a      	lsrs	r2, r3, #18
 8002bf4:	230f      	movs	r3, #15
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x148>)
 8002bfa:	5c9b      	ldrb	r3, [r3, r2]
 8002bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c00:	0d9a      	lsrs	r2, r3, #22
 8002c02:	2303      	movs	r3, #3
 8002c04:	4013      	ands	r3, r2
 8002c06:	3301      	adds	r3, #1
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c0a:	4b37      	ldr	r3, [pc, #220]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	2380      	movs	r3, #128	@ 0x80
 8002c10:	025b      	lsls	r3, r3, #9
 8002c12:	4013      	ands	r3, r2
 8002c14:	d01a      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	4a35      	ldr	r2, [pc, #212]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002c20:	2300      	movs	r3, #0
 8002c22:	69b8      	ldr	r0, [r7, #24]
 8002c24:	69f9      	ldr	r1, [r7, #28]
 8002c26:	f7fd fb25 	bl	8000274 <__aeabi_lmul>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	000b      	movs	r3, r1
 8002c2e:	0010      	movs	r0, r2
 8002c30:	0019      	movs	r1, r3
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f7fd faf9 	bl	8000234 <__aeabi_uldivmod>
 8002c42:	0002      	movs	r2, r0
 8002c44:	000b      	movs	r3, r1
 8002c46:	0013      	movs	r3, r2
 8002c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c4a:	e037      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c4c:	4b26      	ldr	r3, [pc, #152]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2210      	movs	r2, #16
 8002c52:	4013      	ands	r3, r2
 8002c54:	d01a      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	4a23      	ldr	r2, [pc, #140]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c60:	2300      	movs	r3, #0
 8002c62:	68b8      	ldr	r0, [r7, #8]
 8002c64:	68f9      	ldr	r1, [r7, #12]
 8002c66:	f7fd fb05 	bl	8000274 <__aeabi_lmul>
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	000b      	movs	r3, r1
 8002c6e:	0010      	movs	r0, r2
 8002c70:	0019      	movs	r1, r3
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f7fd fad9 	bl	8000234 <__aeabi_uldivmod>
 8002c82:	0002      	movs	r2, r0
 8002c84:	000b      	movs	r3, r1
 8002c86:	0013      	movs	r3, r2
 8002c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c8a:	e017      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8e:	0018      	movs	r0, r3
 8002c90:	2300      	movs	r3, #0
 8002c92:	0019      	movs	r1, r3
 8002c94:	4a16      	ldr	r2, [pc, #88]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002c96:	2300      	movs	r3, #0
 8002c98:	f7fd faec 	bl	8000274 <__aeabi_lmul>
 8002c9c:	0002      	movs	r2, r0
 8002c9e:	000b      	movs	r3, r1
 8002ca0:	0010      	movs	r0, r2
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	001c      	movs	r4, r3
 8002ca8:	2300      	movs	r3, #0
 8002caa:	001d      	movs	r5, r3
 8002cac:	0022      	movs	r2, r4
 8002cae:	002b      	movs	r3, r5
 8002cb0:	f7fd fac0 	bl	8000234 <__aeabi_uldivmod>
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	000b      	movs	r3, r1
 8002cb8:	0013      	movs	r3, r2
 8002cba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cbe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002cc0:	e00d      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002cc2:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	0b5b      	lsrs	r3, r3, #13
 8002cc8:	2207      	movs	r2, #7
 8002cca:	4013      	ands	r3, r2
 8002ccc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	2280      	movs	r2, #128	@ 0x80
 8002cd4:	0212      	lsls	r2, r2, #8
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	0013      	movs	r3, r2
 8002cda:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002cdc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b00e      	add	sp, #56	@ 0x38
 8002ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	003d0900 	.word	0x003d0900
 8002cf0:	00f42400 	.word	0x00f42400
 8002cf4:	016e3600 	.word	0x016e3600
 8002cf8:	08005824 	.word	0x08005824

08002cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d00:	4b02      	ldr	r3, [pc, #8]	@ (8002d0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	20000000 	.word	0x20000000

08002d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d14:	f7ff fff2 	bl	8002cfc <HAL_RCC_GetHCLKFreq>
 8002d18:	0001      	movs	r1, r0
 8002d1a:	4b06      	ldr	r3, [pc, #24]	@ (8002d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	2207      	movs	r2, #7
 8002d22:	4013      	ands	r3, r2
 8002d24:	4a04      	ldr	r2, [pc, #16]	@ (8002d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	40d9      	lsrs	r1, r3
 8002d2a:	000b      	movs	r3, r1
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	46c0      	nop			@ (mov r8, r8)
 8002d34:	40021000 	.word	0x40021000
 8002d38:	0800581c 	.word	0x0800581c

08002d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d40:	f7ff ffdc 	bl	8002cfc <HAL_RCC_GetHCLKFreq>
 8002d44:	0001      	movs	r1, r0
 8002d46:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	0adb      	lsrs	r3, r3, #11
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	4013      	ands	r3, r2
 8002d50:	4a04      	ldr	r2, [pc, #16]	@ (8002d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d52:	5cd3      	ldrb	r3, [r2, r3]
 8002d54:	40d9      	lsrs	r1, r3
 8002d56:	000b      	movs	r3, r1
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	40021000 	.word	0x40021000
 8002d64:	0800581c 	.word	0x0800581c

08002d68 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002d70:	2317      	movs	r3, #23
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d106      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	2380      	movs	r3, #128	@ 0x80
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d100      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002d8e:	e104      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d90:	4bb1      	ldr	r3, [pc, #708]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d94:	2380      	movs	r3, #128	@ 0x80
 8002d96:	055b      	lsls	r3, r3, #21
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d10a      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9c:	4bae      	ldr	r3, [pc, #696]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002da0:	4bad      	ldr	r3, [pc, #692]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002da2:	2180      	movs	r1, #128	@ 0x80
 8002da4:	0549      	lsls	r1, r1, #21
 8002da6:	430a      	orrs	r2, r1
 8002da8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002daa:	2317      	movs	r3, #23
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db2:	4baa      	ldr	r3, [pc, #680]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	2380      	movs	r3, #128	@ 0x80
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d11a      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dbe:	4ba7      	ldr	r3, [pc, #668]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4ba6      	ldr	r3, [pc, #664]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dc4:	2180      	movs	r1, #128	@ 0x80
 8002dc6:	0049      	lsls	r1, r1, #1
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fb74 	bl	80014b8 <HAL_GetTick>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd4:	e008      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd6:	f7fe fb6f 	bl	80014b8 <HAL_GetTick>
 8002dda:	0002      	movs	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b64      	cmp	r3, #100	@ 0x64
 8002de2:	d901      	bls.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e133      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de8:	4b9c      	ldr	r3, [pc, #624]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	@ 0x80
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4013      	ands	r3, r2
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002df4:	4b98      	ldr	r3, [pc, #608]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	23c0      	movs	r3, #192	@ 0xc0
 8002dfa:	039b      	lsls	r3, r3, #14
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	23c0      	movs	r3, #192	@ 0xc0
 8002e06:	039b      	lsls	r3, r3, #14
 8002e08:	4013      	ands	r3, r2
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	23c0      	movs	r3, #192	@ 0xc0
 8002e16:	039b      	lsls	r3, r3, #14
 8002e18:	4013      	ands	r3, r2
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	23c0      	movs	r3, #192	@ 0xc0
 8002e26:	029b      	lsls	r3, r3, #10
 8002e28:	401a      	ands	r2, r3
 8002e2a:	23c0      	movs	r3, #192	@ 0xc0
 8002e2c:	029b      	lsls	r3, r3, #10
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d10a      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002e32:	4b89      	ldr	r3, [pc, #548]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	2380      	movs	r3, #128	@ 0x80
 8002e38:	029b      	lsls	r3, r3, #10
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	2380      	movs	r3, #128	@ 0x80
 8002e3e:	029b      	lsls	r3, r3, #10
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d101      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e103      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002e48:	4b83      	ldr	r3, [pc, #524]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e4c:	23c0      	movs	r3, #192	@ 0xc0
 8002e4e:	029b      	lsls	r3, r3, #10
 8002e50:	4013      	ands	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d049      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	23c0      	movs	r3, #192	@ 0xc0
 8002e60:	029b      	lsls	r3, r3, #10
 8002e62:	4013      	ands	r3, r2
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d004      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	4013      	ands	r3, r2
 8002e72:	d10d      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	23c0      	movs	r3, #192	@ 0xc0
 8002e7a:	029b      	lsls	r3, r3, #10
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d034      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	2380      	movs	r3, #128	@ 0x80
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d02e      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002e90:	4b71      	ldr	r3, [pc, #452]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e94:	4a72      	ldr	r2, [pc, #456]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e9a:	4b6f      	ldr	r3, [pc, #444]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e9e:	4b6e      	ldr	r3, [pc, #440]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ea0:	2180      	movs	r1, #128	@ 0x80
 8002ea2:	0309      	lsls	r1, r1, #12
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea8:	4b6b      	ldr	r3, [pc, #428]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002eaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002eac:	4b6a      	ldr	r3, [pc, #424]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002eae:	496d      	ldr	r1, [pc, #436]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002eb4:	4b68      	ldr	r3, [pc, #416]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	2380      	movs	r3, #128	@ 0x80
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d014      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe faf8 	bl	80014b8 <HAL_GetTick>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ecc:	e009      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7fe faf3 	bl	80014b8 <HAL_GetTick>
 8002ed2:	0002      	movs	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	4a63      	ldr	r2, [pc, #396]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e0b6      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ee4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ee6:	2380      	movs	r3, #128	@ 0x80
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	d0ef      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	2380      	movs	r3, #128	@ 0x80
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d01f      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	23c0      	movs	r3, #192	@ 0xc0
 8002f00:	029b      	lsls	r3, r3, #10
 8002f02:	401a      	ands	r2, r3
 8002f04:	23c0      	movs	r3, #192	@ 0xc0
 8002f06:	029b      	lsls	r3, r3, #10
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d10c      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002f0c:	4b52      	ldr	r3, [pc, #328]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a56      	ldr	r2, [pc, #344]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	23c0      	movs	r3, #192	@ 0xc0
 8002f1c:	039b      	lsls	r3, r3, #14
 8002f1e:	401a      	ands	r2, r3
 8002f20:	4b4d      	ldr	r3, [pc, #308]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	4b4c      	ldr	r3, [pc, #304]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	23c0      	movs	r3, #192	@ 0xc0
 8002f30:	029b      	lsls	r3, r3, #10
 8002f32:	401a      	ands	r2, r3
 8002f34:	4b48      	ldr	r3, [pc, #288]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f36:	430a      	orrs	r2, r1
 8002f38:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	4013      	ands	r3, r2
 8002f42:	d01f      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	23c0      	movs	r3, #192	@ 0xc0
 8002f4a:	029b      	lsls	r3, r3, #10
 8002f4c:	401a      	ands	r2, r3
 8002f4e:	23c0      	movs	r3, #192	@ 0xc0
 8002f50:	029b      	lsls	r3, r3, #10
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002f56:	4b40      	ldr	r3, [pc, #256]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a44      	ldr	r2, [pc, #272]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	23c0      	movs	r3, #192	@ 0xc0
 8002f66:	039b      	lsls	r3, r3, #14
 8002f68:	401a      	ands	r2, r3
 8002f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	4b39      	ldr	r3, [pc, #228]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f72:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	23c0      	movs	r3, #192	@ 0xc0
 8002f7a:	029b      	lsls	r3, r3, #10
 8002f7c:	401a      	ands	r2, r3
 8002f7e:	4b36      	ldr	r3, [pc, #216]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f80:	430a      	orrs	r2, r1
 8002f82:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f84:	2317      	movs	r3, #23
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d105      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8e:	4b32      	ldr	r3, [pc, #200]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f92:	4b31      	ldr	r3, [pc, #196]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f94:	4936      	ldr	r1, [pc, #216]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f96:	400a      	ands	r2, r1
 8002f98:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d009      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa8:	2203      	movs	r2, #3
 8002faa:	4393      	bics	r3, r2
 8002fac:	0019      	movs	r1, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	4b29      	ldr	r3, [pc, #164]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fc2:	4b25      	ldr	r3, [pc, #148]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	4393      	bics	r3, r2
 8002fca:	0019      	movs	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	4b21      	ldr	r3, [pc, #132]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2204      	movs	r2, #4
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d009      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe4:	4a23      	ldr	r2, [pc, #140]	@ (8003074 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	4b1a      	ldr	r3, [pc, #104]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d009      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ffe:	4b16      	ldr	r3, [pc, #88]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003002:	4a1d      	ldr	r2, [pc, #116]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003004:	4013      	ands	r3, r2
 8003006:	0019      	movs	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699a      	ldr	r2, [r3, #24]
 800300c:	4b12      	ldr	r3, [pc, #72]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800300e:	430a      	orrs	r2, r1
 8003010:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2240      	movs	r2, #64	@ 0x40
 8003018:	4013      	ands	r3, r2
 800301a:	d009      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800301c:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800301e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003020:	4a16      	ldr	r2, [pc, #88]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003022:	4013      	ands	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1a      	ldr	r2, [r3, #32]
 800302a:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800302c:	430a      	orrs	r2, r1
 800302e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2280      	movs	r2, #128	@ 0x80
 8003036:	4013      	ands	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800303a:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303e:	4a10      	ldr	r2, [pc, #64]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003040:	4013      	ands	r3, r2
 8003042:	0019      	movs	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	4b03      	ldr	r3, [pc, #12]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800304a:	430a      	orrs	r2, r1
 800304c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b006      	add	sp, #24
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40021000 	.word	0x40021000
 800305c:	40007000 	.word	0x40007000
 8003060:	fffcffff 	.word	0xfffcffff
 8003064:	fff7ffff 	.word	0xfff7ffff
 8003068:	00001388 	.word	0x00001388
 800306c:	ffcfffff 	.word	0xffcfffff
 8003070:	efffffff 	.word	0xefffffff
 8003074:	fffff3ff 	.word	0xfffff3ff
 8003078:	ffffcfff 	.word	0xffffcfff
 800307c:	fbffffff 	.word	0xfbffffff
 8003080:	fff3ffff 	.word	0xfff3ffff

08003084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e032      	b.n	80030fc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2239      	movs	r2, #57	@ 0x39
 800309a:	5c9b      	ldrb	r3, [r3, r2]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d107      	bne.n	80030b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2238      	movs	r2, #56	@ 0x38
 80030a6:	2100      	movs	r1, #0
 80030a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7fd ffed 	bl	800108c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2239      	movs	r2, #57	@ 0x39
 80030b6:	2102      	movs	r1, #2
 80030b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	0019      	movs	r1, r3
 80030c4:	0010      	movs	r0, r2
 80030c6:	f000 fc05 	bl	80038d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	223e      	movs	r2, #62	@ 0x3e
 80030ce:	2101      	movs	r1, #1
 80030d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	223a      	movs	r2, #58	@ 0x3a
 80030d6:	2101      	movs	r1, #1
 80030d8:	5499      	strb	r1, [r3, r2]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	223b      	movs	r2, #59	@ 0x3b
 80030de:	2101      	movs	r1, #1
 80030e0:	5499      	strb	r1, [r3, r2]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	223c      	movs	r2, #60	@ 0x3c
 80030e6:	2101      	movs	r1, #1
 80030e8:	5499      	strb	r1, [r3, r2]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	223d      	movs	r2, #61	@ 0x3d
 80030ee:	2101      	movs	r1, #1
 80030f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2239      	movs	r2, #57	@ 0x39
 80030f6:	2101      	movs	r1, #1
 80030f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2239      	movs	r2, #57	@ 0x39
 8003110:	5c9b      	ldrb	r3, [r3, r2]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d001      	beq.n	800311c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e036      	b.n	800318a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2239      	movs	r2, #57	@ 0x39
 8003120:	2102      	movs	r1, #2
 8003122:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2101      	movs	r1, #1
 8003130:	430a      	orrs	r2, r1
 8003132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	2380      	movs	r3, #128	@ 0x80
 800313a:	05db      	lsls	r3, r3, #23
 800313c:	429a      	cmp	r2, r3
 800313e:	d009      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x50>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a13      	ldr	r2, [pc, #76]	@ (8003194 <HAL_TIM_Base_Start_IT+0x90>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d004      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x50>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a12      	ldr	r2, [pc, #72]	@ (8003198 <HAL_TIM_Base_Start_IT+0x94>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d111      	bne.n	8003178 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2207      	movs	r2, #7
 800315c:	4013      	ands	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b06      	cmp	r3, #6
 8003164:	d010      	beq.n	8003188 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2101      	movs	r1, #1
 8003172:	430a      	orrs	r2, r1
 8003174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003176:	e007      	b.n	8003188 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2101      	movs	r1, #1
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	0018      	movs	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	b004      	add	sp, #16
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	40010800 	.word	0x40010800
 8003198:	40011400 	.word	0x40011400

0800319c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2101      	movs	r1, #1
 80031b0:	438a      	bics	r2, r1
 80031b2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4a0a      	ldr	r2, [pc, #40]	@ (80031e4 <HAL_TIM_Base_Stop_IT+0x48>)
 80031bc:	4013      	ands	r3, r2
 80031be:	d107      	bne.n	80031d0 <HAL_TIM_Base_Stop_IT+0x34>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2101      	movs	r1, #1
 80031cc:	438a      	bics	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2239      	movs	r2, #57	@ 0x39
 80031d4:	2101      	movs	r1, #1
 80031d6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	0018      	movs	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	b002      	add	sp, #8
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			@ (mov r8, r8)
 80031e4:	00001111 	.word	0x00001111

080031e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e032      	b.n	8003260 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2239      	movs	r2, #57	@ 0x39
 80031fe:	5c9b      	ldrb	r3, [r3, r2]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d107      	bne.n	8003216 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2238      	movs	r2, #56	@ 0x38
 800320a:	2100      	movs	r1, #0
 800320c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0018      	movs	r0, r3
 8003212:	f000 f829 	bl	8003268 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2239      	movs	r2, #57	@ 0x39
 800321a:	2102      	movs	r1, #2
 800321c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	0019      	movs	r1, r3
 8003228:	0010      	movs	r0, r2
 800322a:	f000 fb53 	bl	80038d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	223e      	movs	r2, #62	@ 0x3e
 8003232:	2101      	movs	r1, #1
 8003234:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	223a      	movs	r2, #58	@ 0x3a
 800323a:	2101      	movs	r1, #1
 800323c:	5499      	strb	r1, [r3, r2]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	223b      	movs	r2, #59	@ 0x3b
 8003242:	2101      	movs	r1, #1
 8003244:	5499      	strb	r1, [r3, r2]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	223c      	movs	r2, #60	@ 0x3c
 800324a:	2101      	movs	r1, #1
 800324c:	5499      	strb	r1, [r3, r2]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	223d      	movs	r2, #61	@ 0x3d
 8003252:	2101      	movs	r1, #1
 8003254:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2239      	movs	r2, #57	@ 0x39
 800325a:	2101      	movs	r1, #1
 800325c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b002      	add	sp, #8
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003270:	46c0      	nop			@ (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	b002      	add	sp, #8
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d108      	bne.n	800329a <HAL_TIM_PWM_Start+0x22>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	223a      	movs	r2, #58	@ 0x3a
 800328c:	5c9b      	ldrb	r3, [r3, r2]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	1e5a      	subs	r2, r3, #1
 8003294:	4193      	sbcs	r3, r2
 8003296:	b2db      	uxtb	r3, r3
 8003298:	e01f      	b.n	80032da <HAL_TIM_PWM_Start+0x62>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b04      	cmp	r3, #4
 800329e:	d108      	bne.n	80032b2 <HAL_TIM_PWM_Start+0x3a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	223b      	movs	r2, #59	@ 0x3b
 80032a4:	5c9b      	ldrb	r3, [r3, r2]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	1e5a      	subs	r2, r3, #1
 80032ac:	4193      	sbcs	r3, r2
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	e013      	b.n	80032da <HAL_TIM_PWM_Start+0x62>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d108      	bne.n	80032ca <HAL_TIM_PWM_Start+0x52>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	223c      	movs	r2, #60	@ 0x3c
 80032bc:	5c9b      	ldrb	r3, [r3, r2]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	3b01      	subs	r3, #1
 80032c2:	1e5a      	subs	r2, r3, #1
 80032c4:	4193      	sbcs	r3, r2
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	e007      	b.n	80032da <HAL_TIM_PWM_Start+0x62>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	223d      	movs	r2, #61	@ 0x3d
 80032ce:	5c9b      	ldrb	r3, [r3, r2]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	1e5a      	subs	r2, r3, #1
 80032d6:	4193      	sbcs	r3, r2
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e04d      	b.n	800337e <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d104      	bne.n	80032f2 <HAL_TIM_PWM_Start+0x7a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	223a      	movs	r2, #58	@ 0x3a
 80032ec:	2102      	movs	r1, #2
 80032ee:	5499      	strb	r1, [r3, r2]
 80032f0:	e013      	b.n	800331a <HAL_TIM_PWM_Start+0xa2>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d104      	bne.n	8003302 <HAL_TIM_PWM_Start+0x8a>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	223b      	movs	r2, #59	@ 0x3b
 80032fc:	2102      	movs	r1, #2
 80032fe:	5499      	strb	r1, [r3, r2]
 8003300:	e00b      	b.n	800331a <HAL_TIM_PWM_Start+0xa2>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b08      	cmp	r3, #8
 8003306:	d104      	bne.n	8003312 <HAL_TIM_PWM_Start+0x9a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	223c      	movs	r2, #60	@ 0x3c
 800330c:	2102      	movs	r1, #2
 800330e:	5499      	strb	r1, [r3, r2]
 8003310:	e003      	b.n	800331a <HAL_TIM_PWM_Start+0xa2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	223d      	movs	r2, #61	@ 0x3d
 8003316:	2102      	movs	r1, #2
 8003318:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6839      	ldr	r1, [r7, #0]
 8003320:	2201      	movs	r2, #1
 8003322:	0018      	movs	r0, r3
 8003324:	f000 fcc8 	bl	8003cb8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	2380      	movs	r3, #128	@ 0x80
 800332e:	05db      	lsls	r3, r3, #23
 8003330:	429a      	cmp	r2, r3
 8003332:	d009      	beq.n	8003348 <HAL_TIM_PWM_Start+0xd0>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a13      	ldr	r2, [pc, #76]	@ (8003388 <HAL_TIM_PWM_Start+0x110>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d004      	beq.n	8003348 <HAL_TIM_PWM_Start+0xd0>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a12      	ldr	r2, [pc, #72]	@ (800338c <HAL_TIM_PWM_Start+0x114>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d111      	bne.n	800336c <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2207      	movs	r2, #7
 8003350:	4013      	ands	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b06      	cmp	r3, #6
 8003358:	d010      	beq.n	800337c <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2101      	movs	r1, #1
 8003366:	430a      	orrs	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336a:	e007      	b.n	800337c <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2101      	movs	r1, #1
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	0018      	movs	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	b004      	add	sp, #16
 8003384:	bd80      	pop	{r7, pc}
 8003386:	46c0      	nop			@ (mov r8, r8)
 8003388:	40010800 	.word	0x40010800
 800338c:	40011400 	.word	0x40011400

08003390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2202      	movs	r2, #2
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d124      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2202      	movs	r2, #2
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d11d      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2203      	movs	r2, #3
 80033ba:	4252      	negs	r2, r2
 80033bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2203      	movs	r2, #3
 80033cc:	4013      	ands	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 fa66 	bl	80038a4 <HAL_TIM_IC_CaptureCallback>
 80033d8:	e007      	b.n	80033ea <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 fa59 	bl	8003894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f000 fa65 	bl	80038b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	2204      	movs	r2, #4
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d125      	bne.n	800344a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2204      	movs	r2, #4
 8003406:	4013      	ands	r3, r2
 8003408:	2b04      	cmp	r3, #4
 800340a:	d11e      	bne.n	800344a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2205      	movs	r2, #5
 8003412:	4252      	negs	r2, r2
 8003414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	23c0      	movs	r3, #192	@ 0xc0
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4013      	ands	r3, r2
 8003428:	d004      	beq.n	8003434 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	0018      	movs	r0, r3
 800342e:	f000 fa39 	bl	80038a4 <HAL_TIM_IC_CaptureCallback>
 8003432:	e007      	b.n	8003444 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	0018      	movs	r0, r3
 8003438:	f000 fa2c 	bl	8003894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	0018      	movs	r0, r3
 8003440:	f000 fa38 	bl	80038b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2208      	movs	r2, #8
 8003452:	4013      	ands	r3, r2
 8003454:	2b08      	cmp	r3, #8
 8003456:	d124      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	2208      	movs	r2, #8
 8003460:	4013      	ands	r3, r2
 8003462:	2b08      	cmp	r3, #8
 8003464:	d11d      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2209      	movs	r2, #9
 800346c:	4252      	negs	r2, r2
 800346e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2204      	movs	r2, #4
 8003474:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	2203      	movs	r2, #3
 800347e:	4013      	ands	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	0018      	movs	r0, r3
 8003486:	f000 fa0d 	bl	80038a4 <HAL_TIM_IC_CaptureCallback>
 800348a:	e007      	b.n	800349c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	0018      	movs	r0, r3
 8003490:	f000 fa00 	bl	8003894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	0018      	movs	r0, r3
 8003498:	f000 fa0c 	bl	80038b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2210      	movs	r2, #16
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d125      	bne.n	80034fc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2210      	movs	r2, #16
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b10      	cmp	r3, #16
 80034bc:	d11e      	bne.n	80034fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2211      	movs	r2, #17
 80034c4:	4252      	negs	r2, r2
 80034c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2208      	movs	r2, #8
 80034cc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	23c0      	movs	r3, #192	@ 0xc0
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4013      	ands	r3, r2
 80034da:	d004      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 f9e0 	bl	80038a4 <HAL_TIM_IC_CaptureCallback>
 80034e4:	e007      	b.n	80034f6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f000 f9d3 	bl	8003894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 f9df 	bl	80038b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2201      	movs	r2, #1
 8003504:	4013      	ands	r3, r2
 8003506:	2b01      	cmp	r3, #1
 8003508:	d10f      	bne.n	800352a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	4013      	ands	r3, r2
 8003514:	2b01      	cmp	r3, #1
 8003516:	d108      	bne.n	800352a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2202      	movs	r2, #2
 800351e:	4252      	negs	r2, r2
 8003520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	0018      	movs	r0, r3
 8003526:	f7fc fff9 	bl	800051c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	2240      	movs	r2, #64	@ 0x40
 8003532:	4013      	ands	r3, r2
 8003534:	2b40      	cmp	r3, #64	@ 0x40
 8003536:	d10f      	bne.n	8003558 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2240      	movs	r2, #64	@ 0x40
 8003540:	4013      	ands	r3, r2
 8003542:	2b40      	cmp	r3, #64	@ 0x40
 8003544:	d108      	bne.n	8003558 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2241      	movs	r2, #65	@ 0x41
 800354c:	4252      	negs	r2, r2
 800354e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	0018      	movs	r0, r3
 8003554:	f000 f9b6 	bl	80038c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003558:	46c0      	nop			@ (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b002      	add	sp, #8
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800356c:	2317      	movs	r3, #23
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2238      	movs	r2, #56	@ 0x38
 8003578:	5c9b      	ldrb	r3, [r3, r2]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_TIM_PWM_ConfigChannel+0x22>
 800357e:	2302      	movs	r3, #2
 8003580:	e0ad      	b.n	80036de <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2238      	movs	r2, #56	@ 0x38
 8003586:	2101      	movs	r1, #1
 8003588:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b0c      	cmp	r3, #12
 800358e:	d100      	bne.n	8003592 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003590:	e076      	b.n	8003680 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d900      	bls.n	800359a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003598:	e095      	b.n	80036c6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d04e      	beq.n	800363e <HAL_TIM_PWM_ConfigChannel+0xde>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d900      	bls.n	80035a8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80035a6:	e08e      	b.n	80036c6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d021      	beq.n	80035f8 <HAL_TIM_PWM_ConfigChannel+0x98>
 80035b4:	e087      	b.n	80036c6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	0011      	movs	r1, r2
 80035be:	0018      	movs	r0, r3
 80035c0:	f000 f9dc 	bl	800397c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2108      	movs	r1, #8
 80035d0:	430a      	orrs	r2, r1
 80035d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2104      	movs	r1, #4
 80035e0:	438a      	bics	r2, r1
 80035e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6999      	ldr	r1, [r3, #24]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	619a      	str	r2, [r3, #24]
      break;
 80035f6:	e06b      	b.n	80036d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	0011      	movs	r1, r2
 8003600:	0018      	movs	r0, r3
 8003602:	f000 f9f7 	bl	80039f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699a      	ldr	r2, [r3, #24]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2180      	movs	r1, #128	@ 0x80
 8003612:	0109      	lsls	r1, r1, #4
 8003614:	430a      	orrs	r2, r1
 8003616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4931      	ldr	r1, [pc, #196]	@ (80036e8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003624:	400a      	ands	r2, r1
 8003626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6999      	ldr	r1, [r3, #24]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	021a      	lsls	r2, r3, #8
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	619a      	str	r2, [r3, #24]
      break;
 800363c:	e048      	b.n	80036d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	0011      	movs	r1, r2
 8003646:	0018      	movs	r0, r3
 8003648:	f000 fa16 	bl	8003a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	69da      	ldr	r2, [r3, #28]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2108      	movs	r1, #8
 8003658:	430a      	orrs	r2, r1
 800365a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69da      	ldr	r2, [r3, #28]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2104      	movs	r1, #4
 8003668:	438a      	bics	r2, r1
 800366a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69d9      	ldr	r1, [r3, #28]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	61da      	str	r2, [r3, #28]
      break;
 800367e:	e027      	b.n	80036d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	0011      	movs	r1, r2
 8003688:	0018      	movs	r0, r3
 800368a:	f000 fa35 	bl	8003af8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69da      	ldr	r2, [r3, #28]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2180      	movs	r1, #128	@ 0x80
 800369a:	0109      	lsls	r1, r1, #4
 800369c:	430a      	orrs	r2, r1
 800369e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	490f      	ldr	r1, [pc, #60]	@ (80036e8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80036ac:	400a      	ands	r2, r1
 80036ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69d9      	ldr	r1, [r3, #28]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	021a      	lsls	r2, r3, #8
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	61da      	str	r2, [r3, #28]
      break;
 80036c4:	e004      	b.n	80036d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80036c6:	2317      	movs	r3, #23
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	2201      	movs	r2, #1
 80036cc:	701a      	strb	r2, [r3, #0]
      break;
 80036ce:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2238      	movs	r2, #56	@ 0x38
 80036d4:	2100      	movs	r1, #0
 80036d6:	5499      	strb	r1, [r3, r2]

  return status;
 80036d8:	2317      	movs	r3, #23
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	781b      	ldrb	r3, [r3, #0]
}
 80036de:	0018      	movs	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b006      	add	sp, #24
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	fffffbff 	.word	0xfffffbff

080036ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036f6:	230f      	movs	r3, #15
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	2200      	movs	r2, #0
 80036fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2238      	movs	r2, #56	@ 0x38
 8003702:	5c9b      	ldrb	r3, [r3, r2]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_TIM_ConfigClockSource+0x20>
 8003708:	2302      	movs	r3, #2
 800370a:	e0bc      	b.n	8003886 <HAL_TIM_ConfigClockSource+0x19a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2238      	movs	r2, #56	@ 0x38
 8003710:	2101      	movs	r1, #1
 8003712:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2239      	movs	r2, #57	@ 0x39
 8003718:	2102      	movs	r1, #2
 800371a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2277      	movs	r2, #119	@ 0x77
 8003728:	4393      	bics	r3, r2
 800372a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4a58      	ldr	r2, [pc, #352]	@ (8003890 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003730:	4013      	ands	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2280      	movs	r2, #128	@ 0x80
 8003742:	0192      	lsls	r2, r2, #6
 8003744:	4293      	cmp	r3, r2
 8003746:	d040      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0xde>
 8003748:	2280      	movs	r2, #128	@ 0x80
 800374a:	0192      	lsls	r2, r2, #6
 800374c:	4293      	cmp	r3, r2
 800374e:	d900      	bls.n	8003752 <HAL_TIM_ConfigClockSource+0x66>
 8003750:	e088      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x178>
 8003752:	2280      	movs	r2, #128	@ 0x80
 8003754:	0152      	lsls	r2, r2, #5
 8003756:	4293      	cmp	r3, r2
 8003758:	d100      	bne.n	800375c <HAL_TIM_ConfigClockSource+0x70>
 800375a:	e088      	b.n	800386e <HAL_TIM_ConfigClockSource+0x182>
 800375c:	2280      	movs	r2, #128	@ 0x80
 800375e:	0152      	lsls	r2, r2, #5
 8003760:	4293      	cmp	r3, r2
 8003762:	d900      	bls.n	8003766 <HAL_TIM_ConfigClockSource+0x7a>
 8003764:	e07e      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x178>
 8003766:	2b70      	cmp	r3, #112	@ 0x70
 8003768:	d018      	beq.n	800379c <HAL_TIM_ConfigClockSource+0xb0>
 800376a:	d900      	bls.n	800376e <HAL_TIM_ConfigClockSource+0x82>
 800376c:	e07a      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x178>
 800376e:	2b60      	cmp	r3, #96	@ 0x60
 8003770:	d04f      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x126>
 8003772:	d900      	bls.n	8003776 <HAL_TIM_ConfigClockSource+0x8a>
 8003774:	e076      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x178>
 8003776:	2b50      	cmp	r3, #80	@ 0x50
 8003778:	d03b      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0x106>
 800377a:	d900      	bls.n	800377e <HAL_TIM_ConfigClockSource+0x92>
 800377c:	e072      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x178>
 800377e:	2b40      	cmp	r3, #64	@ 0x40
 8003780:	d057      	beq.n	8003832 <HAL_TIM_ConfigClockSource+0x146>
 8003782:	d900      	bls.n	8003786 <HAL_TIM_ConfigClockSource+0x9a>
 8003784:	e06e      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x178>
 8003786:	2b30      	cmp	r3, #48	@ 0x30
 8003788:	d063      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x166>
 800378a:	d86b      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x178>
 800378c:	2b20      	cmp	r3, #32
 800378e:	d060      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x166>
 8003790:	d868      	bhi.n	8003864 <HAL_TIM_ConfigClockSource+0x178>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d05d      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x166>
 8003796:	2b10      	cmp	r3, #16
 8003798:	d05b      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x166>
 800379a:	e063      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037ac:	f000 fa64 	bl	8003c78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2277      	movs	r2, #119	@ 0x77
 80037bc:	4313      	orrs	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	609a      	str	r2, [r3, #8]
      break;
 80037c8:	e052      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037da:	f000 fa4d 	bl	8003c78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2180      	movs	r1, #128	@ 0x80
 80037ea:	01c9      	lsls	r1, r1, #7
 80037ec:	430a      	orrs	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]
      break;
 80037f0:	e03e      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fe:	001a      	movs	r2, r3
 8003800:	f000 f9c0 	bl	8003b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2150      	movs	r1, #80	@ 0x50
 800380a:	0018      	movs	r0, r3
 800380c:	f000 fa1a 	bl	8003c44 <TIM_ITRx_SetConfig>
      break;
 8003810:	e02e      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800381e:	001a      	movs	r2, r3
 8003820:	f000 f9de 	bl	8003be0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2160      	movs	r1, #96	@ 0x60
 800382a:	0018      	movs	r0, r3
 800382c:	f000 fa0a 	bl	8003c44 <TIM_ITRx_SetConfig>
      break;
 8003830:	e01e      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800383e:	001a      	movs	r2, r3
 8003840:	f000 f9a0 	bl	8003b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2140      	movs	r1, #64	@ 0x40
 800384a:	0018      	movs	r0, r3
 800384c:	f000 f9fa 	bl	8003c44 <TIM_ITRx_SetConfig>
      break;
 8003850:	e00e      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	0019      	movs	r1, r3
 800385c:	0010      	movs	r0, r2
 800385e:	f000 f9f1 	bl	8003c44 <TIM_ITRx_SetConfig>
      break;
 8003862:	e005      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003864:	230f      	movs	r3, #15
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
      break;
 800386c:	e000      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800386e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2239      	movs	r2, #57	@ 0x39
 8003874:	2101      	movs	r1, #1
 8003876:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2238      	movs	r2, #56	@ 0x38
 800387c:	2100      	movs	r1, #0
 800387e:	5499      	strb	r1, [r3, r2]

  return status;
 8003880:	230f      	movs	r3, #15
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	781b      	ldrb	r3, [r3, #0]
}
 8003886:	0018      	movs	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	b004      	add	sp, #16
 800388c:	bd80      	pop	{r7, pc}
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	ffff00ff 	.word	0xffff00ff

08003894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800389c:	46c0      	nop			@ (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038ac:	46c0      	nop			@ (mov r8, r8)
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b002      	add	sp, #8
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038bc:	46c0      	nop			@ (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038cc:	46c0      	nop			@ (mov r8, r8)
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b002      	add	sp, #8
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	2380      	movs	r3, #128	@ 0x80
 80038e8:	05db      	lsls	r3, r3, #23
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d007      	beq.n	80038fe <TIM_Base_SetConfig+0x2a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003970 <TIM_Base_SetConfig+0x9c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d003      	beq.n	80038fe <TIM_Base_SetConfig+0x2a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003974 <TIM_Base_SetConfig+0xa0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d108      	bne.n	8003910 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2270      	movs	r2, #112	@ 0x70
 8003902:	4393      	bics	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	2380      	movs	r3, #128	@ 0x80
 8003914:	05db      	lsls	r3, r3, #23
 8003916:	429a      	cmp	r2, r3
 8003918:	d007      	beq.n	800392a <TIM_Base_SetConfig+0x56>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a14      	ldr	r2, [pc, #80]	@ (8003970 <TIM_Base_SetConfig+0x9c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_Base_SetConfig+0x56>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a13      	ldr	r2, [pc, #76]	@ (8003974 <TIM_Base_SetConfig+0xa0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d108      	bne.n	800393c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4a12      	ldr	r2, [pc, #72]	@ (8003978 <TIM_Base_SetConfig+0xa4>)
 800392e:	4013      	ands	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2280      	movs	r2, #128	@ 0x80
 8003940:	4393      	bics	r3, r2
 8003942:	001a      	movs	r2, r3
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	615a      	str	r2, [r3, #20]
}
 8003968:	46c0      	nop			@ (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b004      	add	sp, #16
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40010800 	.word	0x40010800
 8003974:	40011400 	.word	0x40011400
 8003978:	fffffcff 	.word	0xfffffcff

0800397c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	2201      	movs	r2, #1
 800398c:	4393      	bics	r3, r2
 800398e:	001a      	movs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2270      	movs	r2, #112	@ 0x70
 80039aa:	4393      	bics	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2203      	movs	r2, #3
 80039b2:	4393      	bics	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2202      	movs	r2, #2
 80039c4:	4393      	bics	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	621a      	str	r2, [r3, #32]
}
 80039ec:	46c0      	nop			@ (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b006      	add	sp, #24
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	2210      	movs	r2, #16
 8003a04:	4393      	bics	r3, r2
 8003a06:	001a      	movs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4a13      	ldr	r2, [pc, #76]	@ (8003a70 <TIM_OC2_SetConfig+0x7c>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a12      	ldr	r2, [pc, #72]	@ (8003a74 <TIM_OC2_SetConfig+0x80>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	4393      	bics	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	621a      	str	r2, [r3, #32]
}
 8003a68:	46c0      	nop			@ (mov r8, r8)
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b006      	add	sp, #24
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	ffff8fff 	.word	0xffff8fff
 8003a74:	fffffcff 	.word	0xfffffcff

08003a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	4a1a      	ldr	r2, [pc, #104]	@ (8003af0 <TIM_OC3_SetConfig+0x78>)
 8003a88:	401a      	ands	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2270      	movs	r2, #112	@ 0x70
 8003aa4:	4393      	bics	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2203      	movs	r2, #3
 8003aac:	4393      	bics	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	4a0d      	ldr	r2, [pc, #52]	@ (8003af4 <TIM_OC3_SetConfig+0x7c>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	621a      	str	r2, [r3, #32]
}
 8003ae8:	46c0      	nop			@ (mov r8, r8)
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b006      	add	sp, #24
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	fffffeff 	.word	0xfffffeff
 8003af4:	fffffdff 	.word	0xfffffdff

08003af8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	4a1b      	ldr	r2, [pc, #108]	@ (8003b74 <TIM_OC4_SetConfig+0x7c>)
 8003b08:	401a      	ands	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a15      	ldr	r2, [pc, #84]	@ (8003b78 <TIM_OC4_SetConfig+0x80>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a14      	ldr	r2, [pc, #80]	@ (8003b7c <TIM_OC4_SetConfig+0x84>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	4a10      	ldr	r2, [pc, #64]	@ (8003b80 <TIM_OC4_SetConfig+0x88>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	031b      	lsls	r3, r3, #12
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	621a      	str	r2, [r3, #32]
}
 8003b6a:	46c0      	nop			@ (mov r8, r8)
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b006      	add	sp, #24
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	ffffefff 	.word	0xffffefff
 8003b78:	ffff8fff 	.word	0xffff8fff
 8003b7c:	fffffcff 	.word	0xfffffcff
 8003b80:	ffffdfff 	.word	0xffffdfff

08003b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	4393      	bics	r3, r2
 8003b9e:	001a      	movs	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	22f0      	movs	r2, #240	@ 0xf0
 8003bae:	4393      	bics	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	220a      	movs	r2, #10
 8003bc0:	4393      	bics	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	621a      	str	r2, [r3, #32]
}
 8003bd8:	46c0      	nop			@ (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b006      	add	sp, #24
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	4393      	bics	r3, r2
 8003bf4:	001a      	movs	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	4a0d      	ldr	r2, [pc, #52]	@ (8003c40 <TIM_TI2_ConfigInputStage+0x60>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	031b      	lsls	r3, r3, #12
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	22a0      	movs	r2, #160	@ 0xa0
 8003c1c:	4393      	bics	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	46c0      	nop			@ (mov r8, r8)
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b006      	add	sp, #24
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	ffff0fff 	.word	0xffff0fff

08003c44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2270      	movs	r2, #112	@ 0x70
 8003c58:	4393      	bics	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	2207      	movs	r2, #7
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	609a      	str	r2, [r3, #8]
}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b004      	add	sp, #16
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	4a09      	ldr	r2, [pc, #36]	@ (8003cb4 <TIM_ETR_SetConfig+0x3c>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	021a      	lsls	r2, r3, #8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	609a      	str	r2, [r3, #8]
}
 8003cac:	46c0      	nop			@ (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b006      	add	sp, #24
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	ffff00ff 	.word	0xffff00ff

08003cb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	221f      	movs	r2, #31
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2201      	movs	r2, #1
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	0013      	movs	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	43d2      	mvns	r2, r2
 8003cda:	401a      	ands	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	211f      	movs	r1, #31
 8003ce8:	400b      	ands	r3, r1
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4099      	lsls	r1, r3
 8003cee:	000b      	movs	r3, r1
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	621a      	str	r2, [r3, #32]
}
 8003cf6:	46c0      	nop			@ (mov r8, r8)
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b006      	add	sp, #24
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2238      	movs	r2, #56	@ 0x38
 8003d0e:	5c9b      	ldrb	r3, [r3, r2]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e042      	b.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2238      	movs	r2, #56	@ 0x38
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2239      	movs	r2, #57	@ 0x39
 8003d24:	2102      	movs	r1, #2
 8003d26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2270      	movs	r2, #112	@ 0x70
 8003d3c:	4393      	bics	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	2380      	movs	r3, #128	@ 0x80
 8003d58:	05db      	lsls	r3, r3, #23
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d009      	beq.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a11      	ldr	r2, [pc, #68]	@ (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a0f      	ldr	r2, [pc, #60]	@ (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d10c      	bne.n	8003d8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2280      	movs	r2, #128	@ 0x80
 8003d76:	4393      	bics	r3, r2
 8003d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2239      	movs	r2, #57	@ 0x39
 8003d90:	2101      	movs	r1, #1
 8003d92:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2238      	movs	r2, #56	@ 0x38
 8003d98:	2100      	movs	r1, #0
 8003d9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	0018      	movs	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b004      	add	sp, #16
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	40010800 	.word	0x40010800
 8003dac:	40011400 	.word	0x40011400

08003db0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e044      	b.n	8003e4c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d107      	bne.n	8003dda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2278      	movs	r2, #120	@ 0x78
 8003dce:	2100      	movs	r1, #0
 8003dd0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7fd f9e5 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2224      	movs	r2, #36	@ 0x24
 8003dde:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2101      	movs	r1, #1
 8003dec:	438a      	bics	r2, r1
 8003dee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	0018      	movs	r0, r3
 8003df4:	f000 f8d0 	bl	8003f98 <UART_SetConfig>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e024      	b.n	8003e4c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f000 fb47 	bl	80044a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	490d      	ldr	r1, [pc, #52]	@ (8003e54 <HAL_UART_Init+0xa4>)
 8003e1e:	400a      	ands	r2, r1
 8003e20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	212a      	movs	r1, #42	@ 0x2a
 8003e2e:	438a      	bics	r2, r1
 8003e30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	0018      	movs	r0, r3
 8003e46:	f000 fbdf 	bl	8004608 <UART_CheckIdleState>
 8003e4a:	0003      	movs	r3, r0
}
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b002      	add	sp, #8
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	ffffb7ff 	.word	0xffffb7ff

08003e58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08a      	sub	sp, #40	@ 0x28
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	1dbb      	adds	r3, r7, #6
 8003e66:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d000      	beq.n	8003e72 <HAL_UART_Transmit+0x1a>
 8003e70:	e08c      	b.n	8003f8c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_UART_Transmit+0x28>
 8003e78:	1dbb      	adds	r3, r7, #6
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e084      	b.n	8003f8e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	2380      	movs	r3, #128	@ 0x80
 8003e8a:	015b      	lsls	r3, r3, #5
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d109      	bne.n	8003ea4 <HAL_UART_Transmit+0x4c>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d001      	beq.n	8003ea4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e074      	b.n	8003f8e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2284      	movs	r2, #132	@ 0x84
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2221      	movs	r2, #33	@ 0x21
 8003eb0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eb2:	f7fd fb01 	bl	80014b8 <HAL_GetTick>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1dba      	adds	r2, r7, #6
 8003ebe:	2150      	movs	r1, #80	@ 0x50
 8003ec0:	8812      	ldrh	r2, [r2, #0]
 8003ec2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	1dba      	adds	r2, r7, #6
 8003ec8:	2152      	movs	r1, #82	@ 0x52
 8003eca:	8812      	ldrh	r2, [r2, #0]
 8003ecc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	2380      	movs	r3, #128	@ 0x80
 8003ed4:	015b      	lsls	r3, r3, #5
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d108      	bne.n	8003eec <HAL_UART_Transmit+0x94>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d104      	bne.n	8003eec <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	e003      	b.n	8003ef4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ef4:	e02f      	b.n	8003f56 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	0013      	movs	r3, r2
 8003f00:	2200      	movs	r2, #0
 8003f02:	2180      	movs	r1, #128	@ 0x80
 8003f04:	f000 fc28 	bl	8004758 <UART_WaitOnFlagUntilTimeout>
 8003f08:	1e03      	subs	r3, r0, #0
 8003f0a:	d004      	beq.n	8003f16 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e03b      	b.n	8003f8e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	001a      	movs	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	05d2      	lsls	r2, r2, #23
 8003f28:	0dd2      	lsrs	r2, r2, #23
 8003f2a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	3302      	adds	r3, #2
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	e007      	b.n	8003f44 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	781a      	ldrb	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	3301      	adds	r3, #1
 8003f42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2252      	movs	r2, #82	@ 0x52
 8003f48:	5a9b      	ldrh	r3, [r3, r2]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b299      	uxth	r1, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2252      	movs	r2, #82	@ 0x52
 8003f54:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2252      	movs	r2, #82	@ 0x52
 8003f5a:	5a9b      	ldrh	r3, [r3, r2]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1c9      	bne.n	8003ef6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	0013      	movs	r3, r2
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2140      	movs	r1, #64	@ 0x40
 8003f70:	f000 fbf2 	bl	8004758 <UART_WaitOnFlagUntilTimeout>
 8003f74:	1e03      	subs	r3, r0, #0
 8003f76:	d004      	beq.n	8003f82 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e005      	b.n	8003f8e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	e000      	b.n	8003f8e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003f8c:	2302      	movs	r3, #2
  }
}
 8003f8e:	0018      	movs	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b008      	add	sp, #32
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f98:	b5b0      	push	{r4, r5, r7, lr}
 8003f9a:	b08e      	sub	sp, #56	@ 0x38
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fa0:	231a      	movs	r3, #26
 8003fa2:	2218      	movs	r2, #24
 8003fa4:	189b      	adds	r3, r3, r2
 8003fa6:	19db      	adds	r3, r3, r7
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4ac6      	ldr	r2, [pc, #792]	@ (80042e4 <UART_SetConfig+0x34c>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	0019      	movs	r1, r3
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4ac1      	ldr	r2, [pc, #772]	@ (80042e8 <UART_SetConfig+0x350>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	0019      	movs	r1, r3
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4abb      	ldr	r2, [pc, #748]	@ (80042ec <UART_SetConfig+0x354>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d004      	beq.n	800400c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004008:	4313      	orrs	r3, r2
 800400a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	4ab7      	ldr	r2, [pc, #732]	@ (80042f0 <UART_SetConfig+0x358>)
 8004014:	4013      	ands	r3, r2
 8004016:	0019      	movs	r1, r3
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800401e:	430a      	orrs	r2, r1
 8004020:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4ab3      	ldr	r2, [pc, #716]	@ (80042f4 <UART_SetConfig+0x35c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d131      	bne.n	8004090 <UART_SetConfig+0xf8>
 800402c:	4bb2      	ldr	r3, [pc, #712]	@ (80042f8 <UART_SetConfig+0x360>)
 800402e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004030:	2203      	movs	r2, #3
 8004032:	4013      	ands	r3, r2
 8004034:	2b03      	cmp	r3, #3
 8004036:	d01d      	beq.n	8004074 <UART_SetConfig+0xdc>
 8004038:	d823      	bhi.n	8004082 <UART_SetConfig+0xea>
 800403a:	2b02      	cmp	r3, #2
 800403c:	d00c      	beq.n	8004058 <UART_SetConfig+0xc0>
 800403e:	d820      	bhi.n	8004082 <UART_SetConfig+0xea>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <UART_SetConfig+0xb2>
 8004044:	2b01      	cmp	r3, #1
 8004046:	d00e      	beq.n	8004066 <UART_SetConfig+0xce>
 8004048:	e01b      	b.n	8004082 <UART_SetConfig+0xea>
 800404a:	231b      	movs	r3, #27
 800404c:	2218      	movs	r2, #24
 800404e:	189b      	adds	r3, r3, r2
 8004050:	19db      	adds	r3, r3, r7
 8004052:	2201      	movs	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	e09c      	b.n	8004192 <UART_SetConfig+0x1fa>
 8004058:	231b      	movs	r3, #27
 800405a:	2218      	movs	r2, #24
 800405c:	189b      	adds	r3, r3, r2
 800405e:	19db      	adds	r3, r3, r7
 8004060:	2202      	movs	r2, #2
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	e095      	b.n	8004192 <UART_SetConfig+0x1fa>
 8004066:	231b      	movs	r3, #27
 8004068:	2218      	movs	r2, #24
 800406a:	189b      	adds	r3, r3, r2
 800406c:	19db      	adds	r3, r3, r7
 800406e:	2204      	movs	r2, #4
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e08e      	b.n	8004192 <UART_SetConfig+0x1fa>
 8004074:	231b      	movs	r3, #27
 8004076:	2218      	movs	r2, #24
 8004078:	189b      	adds	r3, r3, r2
 800407a:	19db      	adds	r3, r3, r7
 800407c:	2208      	movs	r2, #8
 800407e:	701a      	strb	r2, [r3, #0]
 8004080:	e087      	b.n	8004192 <UART_SetConfig+0x1fa>
 8004082:	231b      	movs	r3, #27
 8004084:	2218      	movs	r2, #24
 8004086:	189b      	adds	r3, r3, r2
 8004088:	19db      	adds	r3, r3, r7
 800408a:	2210      	movs	r2, #16
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	e080      	b.n	8004192 <UART_SetConfig+0x1fa>
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a99      	ldr	r2, [pc, #612]	@ (80042fc <UART_SetConfig+0x364>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d131      	bne.n	80040fe <UART_SetConfig+0x166>
 800409a:	4b97      	ldr	r3, [pc, #604]	@ (80042f8 <UART_SetConfig+0x360>)
 800409c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409e:	220c      	movs	r2, #12
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d01d      	beq.n	80040e2 <UART_SetConfig+0x14a>
 80040a6:	d823      	bhi.n	80040f0 <UART_SetConfig+0x158>
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d00c      	beq.n	80040c6 <UART_SetConfig+0x12e>
 80040ac:	d820      	bhi.n	80040f0 <UART_SetConfig+0x158>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <UART_SetConfig+0x120>
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d00e      	beq.n	80040d4 <UART_SetConfig+0x13c>
 80040b6:	e01b      	b.n	80040f0 <UART_SetConfig+0x158>
 80040b8:	231b      	movs	r3, #27
 80040ba:	2218      	movs	r2, #24
 80040bc:	189b      	adds	r3, r3, r2
 80040be:	19db      	adds	r3, r3, r7
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	e065      	b.n	8004192 <UART_SetConfig+0x1fa>
 80040c6:	231b      	movs	r3, #27
 80040c8:	2218      	movs	r2, #24
 80040ca:	189b      	adds	r3, r3, r2
 80040cc:	19db      	adds	r3, r3, r7
 80040ce:	2202      	movs	r2, #2
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	e05e      	b.n	8004192 <UART_SetConfig+0x1fa>
 80040d4:	231b      	movs	r3, #27
 80040d6:	2218      	movs	r2, #24
 80040d8:	189b      	adds	r3, r3, r2
 80040da:	19db      	adds	r3, r3, r7
 80040dc:	2204      	movs	r2, #4
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	e057      	b.n	8004192 <UART_SetConfig+0x1fa>
 80040e2:	231b      	movs	r3, #27
 80040e4:	2218      	movs	r2, #24
 80040e6:	189b      	adds	r3, r3, r2
 80040e8:	19db      	adds	r3, r3, r7
 80040ea:	2208      	movs	r2, #8
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e050      	b.n	8004192 <UART_SetConfig+0x1fa>
 80040f0:	231b      	movs	r3, #27
 80040f2:	2218      	movs	r2, #24
 80040f4:	189b      	adds	r3, r3, r2
 80040f6:	19db      	adds	r3, r3, r7
 80040f8:	2210      	movs	r2, #16
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	e049      	b.n	8004192 <UART_SetConfig+0x1fa>
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a7a      	ldr	r2, [pc, #488]	@ (80042ec <UART_SetConfig+0x354>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d13e      	bne.n	8004186 <UART_SetConfig+0x1ee>
 8004108:	4b7b      	ldr	r3, [pc, #492]	@ (80042f8 <UART_SetConfig+0x360>)
 800410a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800410c:	23c0      	movs	r3, #192	@ 0xc0
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	4013      	ands	r3, r2
 8004112:	22c0      	movs	r2, #192	@ 0xc0
 8004114:	0112      	lsls	r2, r2, #4
 8004116:	4293      	cmp	r3, r2
 8004118:	d027      	beq.n	800416a <UART_SetConfig+0x1d2>
 800411a:	22c0      	movs	r2, #192	@ 0xc0
 800411c:	0112      	lsls	r2, r2, #4
 800411e:	4293      	cmp	r3, r2
 8004120:	d82a      	bhi.n	8004178 <UART_SetConfig+0x1e0>
 8004122:	2280      	movs	r2, #128	@ 0x80
 8004124:	0112      	lsls	r2, r2, #4
 8004126:	4293      	cmp	r3, r2
 8004128:	d011      	beq.n	800414e <UART_SetConfig+0x1b6>
 800412a:	2280      	movs	r2, #128	@ 0x80
 800412c:	0112      	lsls	r2, r2, #4
 800412e:	4293      	cmp	r3, r2
 8004130:	d822      	bhi.n	8004178 <UART_SetConfig+0x1e0>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <UART_SetConfig+0x1a8>
 8004136:	2280      	movs	r2, #128	@ 0x80
 8004138:	00d2      	lsls	r2, r2, #3
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <UART_SetConfig+0x1c4>
 800413e:	e01b      	b.n	8004178 <UART_SetConfig+0x1e0>
 8004140:	231b      	movs	r3, #27
 8004142:	2218      	movs	r2, #24
 8004144:	189b      	adds	r3, r3, r2
 8004146:	19db      	adds	r3, r3, r7
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	e021      	b.n	8004192 <UART_SetConfig+0x1fa>
 800414e:	231b      	movs	r3, #27
 8004150:	2218      	movs	r2, #24
 8004152:	189b      	adds	r3, r3, r2
 8004154:	19db      	adds	r3, r3, r7
 8004156:	2202      	movs	r2, #2
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	e01a      	b.n	8004192 <UART_SetConfig+0x1fa>
 800415c:	231b      	movs	r3, #27
 800415e:	2218      	movs	r2, #24
 8004160:	189b      	adds	r3, r3, r2
 8004162:	19db      	adds	r3, r3, r7
 8004164:	2204      	movs	r2, #4
 8004166:	701a      	strb	r2, [r3, #0]
 8004168:	e013      	b.n	8004192 <UART_SetConfig+0x1fa>
 800416a:	231b      	movs	r3, #27
 800416c:	2218      	movs	r2, #24
 800416e:	189b      	adds	r3, r3, r2
 8004170:	19db      	adds	r3, r3, r7
 8004172:	2208      	movs	r2, #8
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	e00c      	b.n	8004192 <UART_SetConfig+0x1fa>
 8004178:	231b      	movs	r3, #27
 800417a:	2218      	movs	r2, #24
 800417c:	189b      	adds	r3, r3, r2
 800417e:	19db      	adds	r3, r3, r7
 8004180:	2210      	movs	r2, #16
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	e005      	b.n	8004192 <UART_SetConfig+0x1fa>
 8004186:	231b      	movs	r3, #27
 8004188:	2218      	movs	r2, #24
 800418a:	189b      	adds	r3, r3, r2
 800418c:	19db      	adds	r3, r3, r7
 800418e:	2210      	movs	r2, #16
 8004190:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a55      	ldr	r2, [pc, #340]	@ (80042ec <UART_SetConfig+0x354>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d000      	beq.n	800419e <UART_SetConfig+0x206>
 800419c:	e084      	b.n	80042a8 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800419e:	231b      	movs	r3, #27
 80041a0:	2218      	movs	r2, #24
 80041a2:	189b      	adds	r3, r3, r2
 80041a4:	19db      	adds	r3, r3, r7
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d01d      	beq.n	80041e8 <UART_SetConfig+0x250>
 80041ac:	dc20      	bgt.n	80041f0 <UART_SetConfig+0x258>
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d015      	beq.n	80041de <UART_SetConfig+0x246>
 80041b2:	dc1d      	bgt.n	80041f0 <UART_SetConfig+0x258>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <UART_SetConfig+0x226>
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d005      	beq.n	80041c8 <UART_SetConfig+0x230>
 80041bc:	e018      	b.n	80041f0 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041be:	f7fe fda7 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 80041c2:	0003      	movs	r3, r0
 80041c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80041c6:	e01c      	b.n	8004202 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041c8:	4b4b      	ldr	r3, [pc, #300]	@ (80042f8 <UART_SetConfig+0x360>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2210      	movs	r2, #16
 80041ce:	4013      	ands	r3, r2
 80041d0:	d002      	beq.n	80041d8 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80041d2:	4b4b      	ldr	r3, [pc, #300]	@ (8004300 <UART_SetConfig+0x368>)
 80041d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80041d6:	e014      	b.n	8004202 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80041d8:	4b4a      	ldr	r3, [pc, #296]	@ (8004304 <UART_SetConfig+0x36c>)
 80041da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80041dc:	e011      	b.n	8004202 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041de:	f7fe fce7 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 80041e2:	0003      	movs	r3, r0
 80041e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80041e6:	e00c      	b.n	8004202 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e8:	2380      	movs	r3, #128	@ 0x80
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80041ee:	e008      	b.n	8004202 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80041f4:	231a      	movs	r3, #26
 80041f6:	2218      	movs	r2, #24
 80041f8:	189b      	adds	r3, r3, r2
 80041fa:	19db      	adds	r3, r3, r7
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
        break;
 8004200:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d100      	bne.n	800420a <UART_SetConfig+0x272>
 8004208:	e132      	b.n	8004470 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	0013      	movs	r3, r2
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	189b      	adds	r3, r3, r2
 8004214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004216:	429a      	cmp	r2, r3
 8004218:	d305      	bcc.n	8004226 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004222:	429a      	cmp	r2, r3
 8004224:	d906      	bls.n	8004234 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8004226:	231a      	movs	r3, #26
 8004228:	2218      	movs	r2, #24
 800422a:	189b      	adds	r3, r3, r2
 800422c:	19db      	adds	r3, r3, r7
 800422e:	2201      	movs	r2, #1
 8004230:	701a      	strb	r2, [r3, #0]
 8004232:	e11d      	b.n	8004470 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	6939      	ldr	r1, [r7, #16]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	000b      	movs	r3, r1
 8004242:	0e1b      	lsrs	r3, r3, #24
 8004244:	0010      	movs	r0, r2
 8004246:	0205      	lsls	r5, r0, #8
 8004248:	431d      	orrs	r5, r3
 800424a:	000b      	movs	r3, r1
 800424c:	021c      	lsls	r4, r3, #8
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	085b      	lsrs	r3, r3, #1
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	68b8      	ldr	r0, [r7, #8]
 800425c:	68f9      	ldr	r1, [r7, #12]
 800425e:	1900      	adds	r0, r0, r4
 8004260:	4169      	adcs	r1, r5
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	2300      	movs	r3, #0
 800426a:	607b      	str	r3, [r7, #4]
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f7fb ffe0 	bl	8000234 <__aeabi_uldivmod>
 8004274:	0002      	movs	r2, r0
 8004276:	000b      	movs	r3, r1
 8004278:	0013      	movs	r3, r2
 800427a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800427c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800427e:	23c0      	movs	r3, #192	@ 0xc0
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	429a      	cmp	r2, r3
 8004284:	d309      	bcc.n	800429a <UART_SetConfig+0x302>
 8004286:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004288:	2380      	movs	r3, #128	@ 0x80
 800428a:	035b      	lsls	r3, r3, #13
 800428c:	429a      	cmp	r2, r3
 800428e:	d204      	bcs.n	800429a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004296:	60da      	str	r2, [r3, #12]
 8004298:	e0ea      	b.n	8004470 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800429a:	231a      	movs	r3, #26
 800429c:	2218      	movs	r2, #24
 800429e:	189b      	adds	r3, r3, r2
 80042a0:	19db      	adds	r3, r3, r7
 80042a2:	2201      	movs	r2, #1
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	e0e3      	b.n	8004470 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	2380      	movs	r3, #128	@ 0x80
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d000      	beq.n	80042b6 <UART_SetConfig+0x31e>
 80042b4:	e085      	b.n	80043c2 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80042b6:	231b      	movs	r3, #27
 80042b8:	2218      	movs	r2, #24
 80042ba:	189b      	adds	r3, r3, r2
 80042bc:	19db      	adds	r3, r3, r7
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d837      	bhi.n	8004334 <UART_SetConfig+0x39c>
 80042c4:	009a      	lsls	r2, r3, #2
 80042c6:	4b10      	ldr	r3, [pc, #64]	@ (8004308 <UART_SetConfig+0x370>)
 80042c8:	18d3      	adds	r3, r2, r3
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ce:	f7fe fd1f 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 80042d2:	0003      	movs	r3, r0
 80042d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042d6:	e036      	b.n	8004346 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042d8:	f7fe fd30 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 80042dc:	0003      	movs	r3, r0
 80042de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042e0:	e031      	b.n	8004346 <UART_SetConfig+0x3ae>
 80042e2:	46c0      	nop			@ (mov r8, r8)
 80042e4:	efff69f3 	.word	0xefff69f3
 80042e8:	ffffcfff 	.word	0xffffcfff
 80042ec:	40004800 	.word	0x40004800
 80042f0:	fffff4ff 	.word	0xfffff4ff
 80042f4:	40013800 	.word	0x40013800
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40004400 	.word	0x40004400
 8004300:	003d0900 	.word	0x003d0900
 8004304:	00f42400 	.word	0x00f42400
 8004308:	08005830 	.word	0x08005830
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800430c:	4b60      	ldr	r3, [pc, #384]	@ (8004490 <UART_SetConfig+0x4f8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2210      	movs	r2, #16
 8004312:	4013      	ands	r3, r2
 8004314:	d002      	beq.n	800431c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004316:	4b5f      	ldr	r3, [pc, #380]	@ (8004494 <UART_SetConfig+0x4fc>)
 8004318:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800431a:	e014      	b.n	8004346 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 800431c:	4b5e      	ldr	r3, [pc, #376]	@ (8004498 <UART_SetConfig+0x500>)
 800431e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004320:	e011      	b.n	8004346 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004322:	f7fe fc45 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8004326:	0003      	movs	r3, r0
 8004328:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800432a:	e00c      	b.n	8004346 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800432c:	2380      	movs	r3, #128	@ 0x80
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004332:	e008      	b.n	8004346 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004338:	231a      	movs	r3, #26
 800433a:	2218      	movs	r2, #24
 800433c:	189b      	adds	r3, r3, r2
 800433e:	19db      	adds	r3, r3, r7
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
        break;
 8004344:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d100      	bne.n	800434e <UART_SetConfig+0x3b6>
 800434c:	e090      	b.n	8004470 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800434e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004350:	005a      	lsls	r2, r3, #1
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	085b      	lsrs	r3, r3, #1
 8004358:	18d2      	adds	r2, r2, r3
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	0019      	movs	r1, r3
 8004360:	0010      	movs	r0, r2
 8004362:	f7fb fedb 	bl	800011c <__udivsi3>
 8004366:	0003      	movs	r3, r0
 8004368:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800436a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436c:	2b0f      	cmp	r3, #15
 800436e:	d921      	bls.n	80043b4 <UART_SetConfig+0x41c>
 8004370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004372:	2380      	movs	r3, #128	@ 0x80
 8004374:	025b      	lsls	r3, r3, #9
 8004376:	429a      	cmp	r2, r3
 8004378:	d21c      	bcs.n	80043b4 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437c:	b29a      	uxth	r2, r3
 800437e:	200e      	movs	r0, #14
 8004380:	2418      	movs	r4, #24
 8004382:	1903      	adds	r3, r0, r4
 8004384:	19db      	adds	r3, r3, r7
 8004386:	210f      	movs	r1, #15
 8004388:	438a      	bics	r2, r1
 800438a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800438c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438e:	085b      	lsrs	r3, r3, #1
 8004390:	b29b      	uxth	r3, r3
 8004392:	2207      	movs	r2, #7
 8004394:	4013      	ands	r3, r2
 8004396:	b299      	uxth	r1, r3
 8004398:	1903      	adds	r3, r0, r4
 800439a:	19db      	adds	r3, r3, r7
 800439c:	1902      	adds	r2, r0, r4
 800439e:	19d2      	adds	r2, r2, r7
 80043a0:	8812      	ldrh	r2, [r2, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	1902      	adds	r2, r0, r4
 80043ac:	19d2      	adds	r2, r2, r7
 80043ae:	8812      	ldrh	r2, [r2, #0]
 80043b0:	60da      	str	r2, [r3, #12]
 80043b2:	e05d      	b.n	8004470 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80043b4:	231a      	movs	r3, #26
 80043b6:	2218      	movs	r2, #24
 80043b8:	189b      	adds	r3, r3, r2
 80043ba:	19db      	adds	r3, r3, r7
 80043bc:	2201      	movs	r2, #1
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	e056      	b.n	8004470 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043c2:	231b      	movs	r3, #27
 80043c4:	2218      	movs	r2, #24
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	19db      	adds	r3, r3, r7
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d822      	bhi.n	8004416 <UART_SetConfig+0x47e>
 80043d0:	009a      	lsls	r2, r3, #2
 80043d2:	4b32      	ldr	r3, [pc, #200]	@ (800449c <UART_SetConfig+0x504>)
 80043d4:	18d3      	adds	r3, r2, r3
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043da:	f7fe fc99 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 80043de:	0003      	movs	r3, r0
 80043e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043e2:	e021      	b.n	8004428 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043e4:	f7fe fcaa 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 80043e8:	0003      	movs	r3, r0
 80043ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043ec:	e01c      	b.n	8004428 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043ee:	4b28      	ldr	r3, [pc, #160]	@ (8004490 <UART_SetConfig+0x4f8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2210      	movs	r2, #16
 80043f4:	4013      	ands	r3, r2
 80043f6:	d002      	beq.n	80043fe <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80043f8:	4b26      	ldr	r3, [pc, #152]	@ (8004494 <UART_SetConfig+0x4fc>)
 80043fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80043fc:	e014      	b.n	8004428 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80043fe:	4b26      	ldr	r3, [pc, #152]	@ (8004498 <UART_SetConfig+0x500>)
 8004400:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004402:	e011      	b.n	8004428 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004404:	f7fe fbd4 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8004408:	0003      	movs	r3, r0
 800440a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800440c:	e00c      	b.n	8004428 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440e:	2380      	movs	r3, #128	@ 0x80
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004414:	e008      	b.n	8004428 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800441a:	231a      	movs	r3, #26
 800441c:	2218      	movs	r2, #24
 800441e:	189b      	adds	r3, r3, r2
 8004420:	19db      	adds	r3, r3, r7
 8004422:	2201      	movs	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]
        break;
 8004426:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d020      	beq.n	8004470 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	085a      	lsrs	r2, r3, #1
 8004434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004436:	18d2      	adds	r2, r2, r3
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	0019      	movs	r1, r3
 800443e:	0010      	movs	r0, r2
 8004440:	f7fb fe6c 	bl	800011c <__udivsi3>
 8004444:	0003      	movs	r3, r0
 8004446:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444a:	2b0f      	cmp	r3, #15
 800444c:	d90a      	bls.n	8004464 <UART_SetConfig+0x4cc>
 800444e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004450:	2380      	movs	r3, #128	@ 0x80
 8004452:	025b      	lsls	r3, r3, #9
 8004454:	429a      	cmp	r2, r3
 8004456:	d205      	bcs.n	8004464 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445a:	b29a      	uxth	r2, r3
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	e005      	b.n	8004470 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004464:	231a      	movs	r3, #26
 8004466:	2218      	movs	r2, #24
 8004468:	189b      	adds	r3, r3, r2
 800446a:	19db      	adds	r3, r3, r7
 800446c:	2201      	movs	r2, #1
 800446e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2200      	movs	r2, #0
 8004474:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	2200      	movs	r2, #0
 800447a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800447c:	231a      	movs	r3, #26
 800447e:	2218      	movs	r2, #24
 8004480:	189b      	adds	r3, r3, r2
 8004482:	19db      	adds	r3, r3, r7
 8004484:	781b      	ldrb	r3, [r3, #0]
}
 8004486:	0018      	movs	r0, r3
 8004488:	46bd      	mov	sp, r7
 800448a:	b00e      	add	sp, #56	@ 0x38
 800448c:	bdb0      	pop	{r4, r5, r7, pc}
 800448e:	46c0      	nop			@ (mov r8, r8)
 8004490:	40021000 	.word	0x40021000
 8004494:	003d0900 	.word	0x003d0900
 8004498:	00f42400 	.word	0x00f42400
 800449c:	08005854 	.word	0x08005854

080044a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	2201      	movs	r2, #1
 80044ae:	4013      	ands	r3, r2
 80044b0:	d00b      	beq.n	80044ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4a4a      	ldr	r2, [pc, #296]	@ (80045e4 <UART_AdvFeatureConfig+0x144>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	0019      	movs	r1, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ce:	2202      	movs	r2, #2
 80044d0:	4013      	ands	r3, r2
 80044d2:	d00b      	beq.n	80044ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	4a43      	ldr	r2, [pc, #268]	@ (80045e8 <UART_AdvFeatureConfig+0x148>)
 80044dc:	4013      	ands	r3, r2
 80044de:	0019      	movs	r1, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	2204      	movs	r2, #4
 80044f2:	4013      	ands	r3, r2
 80044f4:	d00b      	beq.n	800450e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	4a3b      	ldr	r2, [pc, #236]	@ (80045ec <UART_AdvFeatureConfig+0x14c>)
 80044fe:	4013      	ands	r3, r2
 8004500:	0019      	movs	r1, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	2208      	movs	r2, #8
 8004514:	4013      	ands	r3, r2
 8004516:	d00b      	beq.n	8004530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4a34      	ldr	r2, [pc, #208]	@ (80045f0 <UART_AdvFeatureConfig+0x150>)
 8004520:	4013      	ands	r3, r2
 8004522:	0019      	movs	r1, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004534:	2210      	movs	r2, #16
 8004536:	4013      	ands	r3, r2
 8004538:	d00b      	beq.n	8004552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4a2c      	ldr	r2, [pc, #176]	@ (80045f4 <UART_AdvFeatureConfig+0x154>)
 8004542:	4013      	ands	r3, r2
 8004544:	0019      	movs	r1, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004556:	2220      	movs	r2, #32
 8004558:	4013      	ands	r3, r2
 800455a:	d00b      	beq.n	8004574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	4a25      	ldr	r2, [pc, #148]	@ (80045f8 <UART_AdvFeatureConfig+0x158>)
 8004564:	4013      	ands	r3, r2
 8004566:	0019      	movs	r1, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004578:	2240      	movs	r2, #64	@ 0x40
 800457a:	4013      	ands	r3, r2
 800457c:	d01d      	beq.n	80045ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4a1d      	ldr	r2, [pc, #116]	@ (80045fc <UART_AdvFeatureConfig+0x15c>)
 8004586:	4013      	ands	r3, r2
 8004588:	0019      	movs	r1, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800459a:	2380      	movs	r3, #128	@ 0x80
 800459c:	035b      	lsls	r3, r3, #13
 800459e:	429a      	cmp	r2, r3
 80045a0:	d10b      	bne.n	80045ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	4a15      	ldr	r2, [pc, #84]	@ (8004600 <UART_AdvFeatureConfig+0x160>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	0019      	movs	r1, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	2280      	movs	r2, #128	@ 0x80
 80045c0:	4013      	ands	r3, r2
 80045c2:	d00b      	beq.n	80045dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004604 <UART_AdvFeatureConfig+0x164>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	0019      	movs	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	605a      	str	r2, [r3, #4]
  }
}
 80045dc:	46c0      	nop			@ (mov r8, r8)
 80045de:	46bd      	mov	sp, r7
 80045e0:	b002      	add	sp, #8
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	fffdffff 	.word	0xfffdffff
 80045e8:	fffeffff 	.word	0xfffeffff
 80045ec:	fffbffff 	.word	0xfffbffff
 80045f0:	ffff7fff 	.word	0xffff7fff
 80045f4:	ffffefff 	.word	0xffffefff
 80045f8:	ffffdfff 	.word	0xffffdfff
 80045fc:	ffefffff 	.word	0xffefffff
 8004600:	ff9fffff 	.word	0xff9fffff
 8004604:	fff7ffff 	.word	0xfff7ffff

08004608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b092      	sub	sp, #72	@ 0x48
 800460c:	af02      	add	r7, sp, #8
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2284      	movs	r2, #132	@ 0x84
 8004614:	2100      	movs	r1, #0
 8004616:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004618:	f7fc ff4e 	bl	80014b8 <HAL_GetTick>
 800461c:	0003      	movs	r3, r0
 800461e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2208      	movs	r2, #8
 8004628:	4013      	ands	r3, r2
 800462a:	2b08      	cmp	r3, #8
 800462c:	d12c      	bne.n	8004688 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800462e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004630:	2280      	movs	r2, #128	@ 0x80
 8004632:	0391      	lsls	r1, r2, #14
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4a46      	ldr	r2, [pc, #280]	@ (8004750 <UART_CheckIdleState+0x148>)
 8004638:	9200      	str	r2, [sp, #0]
 800463a:	2200      	movs	r2, #0
 800463c:	f000 f88c 	bl	8004758 <UART_WaitOnFlagUntilTimeout>
 8004640:	1e03      	subs	r3, r0, #0
 8004642:	d021      	beq.n	8004688 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004644:	f3ef 8310 	mrs	r3, PRIMASK
 8004648:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800464c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800464e:	2301      	movs	r3, #1
 8004650:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004654:	f383 8810 	msr	PRIMASK, r3
}
 8004658:	46c0      	nop			@ (mov r8, r8)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2180      	movs	r1, #128	@ 0x80
 8004666:	438a      	bics	r2, r1
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004670:	f383 8810 	msr	PRIMASK, r3
}
 8004674:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2278      	movs	r2, #120	@ 0x78
 8004680:	2100      	movs	r1, #0
 8004682:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e05f      	b.n	8004748 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2204      	movs	r2, #4
 8004690:	4013      	ands	r3, r2
 8004692:	2b04      	cmp	r3, #4
 8004694:	d146      	bne.n	8004724 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004698:	2280      	movs	r2, #128	@ 0x80
 800469a:	03d1      	lsls	r1, r2, #15
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4a2c      	ldr	r2, [pc, #176]	@ (8004750 <UART_CheckIdleState+0x148>)
 80046a0:	9200      	str	r2, [sp, #0]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f000 f858 	bl	8004758 <UART_WaitOnFlagUntilTimeout>
 80046a8:	1e03      	subs	r3, r0, #0
 80046aa:	d03b      	beq.n	8004724 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ac:	f3ef 8310 	mrs	r3, PRIMASK
 80046b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80046b2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046b6:	2301      	movs	r3, #1
 80046b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f383 8810 	msr	PRIMASK, r3
}
 80046c0:	46c0      	nop			@ (mov r8, r8)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4921      	ldr	r1, [pc, #132]	@ (8004754 <UART_CheckIdleState+0x14c>)
 80046ce:	400a      	ands	r2, r1
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f383 8810 	msr	PRIMASK, r3
}
 80046dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046de:	f3ef 8310 	mrs	r3, PRIMASK
 80046e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80046e4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80046e8:	2301      	movs	r3, #1
 80046ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f383 8810 	msr	PRIMASK, r3
}
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2101      	movs	r1, #1
 8004700:	438a      	bics	r2, r1
 8004702:	609a      	str	r2, [r3, #8]
 8004704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004706:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	f383 8810 	msr	PRIMASK, r3
}
 800470e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2280      	movs	r2, #128	@ 0x80
 8004714:	2120      	movs	r1, #32
 8004716:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2278      	movs	r2, #120	@ 0x78
 800471c:	2100      	movs	r1, #0
 800471e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e011      	b.n	8004748 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2280      	movs	r2, #128	@ 0x80
 800472e:	2120      	movs	r1, #32
 8004730:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2278      	movs	r2, #120	@ 0x78
 8004742:	2100      	movs	r1, #0
 8004744:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	0018      	movs	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	b010      	add	sp, #64	@ 0x40
 800474e:	bd80      	pop	{r7, pc}
 8004750:	01ffffff 	.word	0x01ffffff
 8004754:	fffffedf 	.word	0xfffffedf

08004758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	1dfb      	adds	r3, r7, #7
 8004766:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004768:	e04b      	b.n	8004802 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	3301      	adds	r3, #1
 800476e:	d048      	beq.n	8004802 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004770:	f7fc fea2 	bl	80014b8 <HAL_GetTick>
 8004774:	0002      	movs	r2, r0
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	429a      	cmp	r2, r3
 800477e:	d302      	bcc.n	8004786 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e04b      	b.n	8004822 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2204      	movs	r2, #4
 8004792:	4013      	ands	r3, r2
 8004794:	d035      	beq.n	8004802 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	2208      	movs	r2, #8
 800479e:	4013      	ands	r3, r2
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d111      	bne.n	80047c8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2208      	movs	r2, #8
 80047aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	0018      	movs	r0, r3
 80047b0:	f000 f83c 	bl	800482c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2284      	movs	r2, #132	@ 0x84
 80047b8:	2108      	movs	r1, #8
 80047ba:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2278      	movs	r2, #120	@ 0x78
 80047c0:	2100      	movs	r1, #0
 80047c2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e02c      	b.n	8004822 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	2380      	movs	r3, #128	@ 0x80
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	401a      	ands	r2, r3
 80047d4:	2380      	movs	r3, #128	@ 0x80
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	429a      	cmp	r2, r3
 80047da:	d112      	bne.n	8004802 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2280      	movs	r2, #128	@ 0x80
 80047e2:	0112      	lsls	r2, r2, #4
 80047e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f000 f81f 	bl	800482c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2284      	movs	r2, #132	@ 0x84
 80047f2:	2120      	movs	r1, #32
 80047f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2278      	movs	r2, #120	@ 0x78
 80047fa:	2100      	movs	r1, #0
 80047fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e00f      	b.n	8004822 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	4013      	ands	r3, r2
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	425a      	negs	r2, r3
 8004812:	4153      	adcs	r3, r2
 8004814:	b2db      	uxtb	r3, r3
 8004816:	001a      	movs	r2, r3
 8004818:	1dfb      	adds	r3, r7, #7
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d0a4      	beq.n	800476a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	0018      	movs	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	b004      	add	sp, #16
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08e      	sub	sp, #56	@ 0x38
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004834:	f3ef 8310 	mrs	r3, PRIMASK
 8004838:	617b      	str	r3, [r7, #20]
  return(result);
 800483a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483c:	637b      	str	r3, [r7, #52]	@ 0x34
 800483e:	2301      	movs	r3, #1
 8004840:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	f383 8810 	msr	PRIMASK, r3
}
 8004848:	46c0      	nop			@ (mov r8, r8)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4926      	ldr	r1, [pc, #152]	@ (80048f0 <UART_EndRxTransfer+0xc4>)
 8004856:	400a      	ands	r2, r1
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	f383 8810 	msr	PRIMASK, r3
}
 8004864:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004866:	f3ef 8310 	mrs	r3, PRIMASK
 800486a:	623b      	str	r3, [r7, #32]
  return(result);
 800486c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004870:	2301      	movs	r3, #1
 8004872:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	f383 8810 	msr	PRIMASK, r3
}
 800487a:	46c0      	nop			@ (mov r8, r8)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2101      	movs	r1, #1
 8004888:	438a      	bics	r2, r1
 800488a:	609a      	str	r2, [r3, #8]
 800488c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004892:	f383 8810 	msr	PRIMASK, r3
}
 8004896:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800489c:	2b01      	cmp	r3, #1
 800489e:	d118      	bne.n	80048d2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a0:	f3ef 8310 	mrs	r3, PRIMASK
 80048a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80048a6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048aa:	2301      	movs	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f383 8810 	msr	PRIMASK, r3
}
 80048b4:	46c0      	nop			@ (mov r8, r8)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2110      	movs	r1, #16
 80048c2:	438a      	bics	r2, r1
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f383 8810 	msr	PRIMASK, r3
}
 80048d0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2280      	movs	r2, #128	@ 0x80
 80048d6:	2120      	movs	r1, #32
 80048d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80048e6:	46c0      	nop			@ (mov r8, r8)
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b00e      	add	sp, #56	@ 0x38
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	46c0      	nop			@ (mov r8, r8)
 80048f0:	fffffedf 	.word	0xfffffedf

080048f4 <std>:
 80048f4:	2300      	movs	r3, #0
 80048f6:	b510      	push	{r4, lr}
 80048f8:	0004      	movs	r4, r0
 80048fa:	6003      	str	r3, [r0, #0]
 80048fc:	6043      	str	r3, [r0, #4]
 80048fe:	6083      	str	r3, [r0, #8]
 8004900:	8181      	strh	r1, [r0, #12]
 8004902:	6643      	str	r3, [r0, #100]	@ 0x64
 8004904:	81c2      	strh	r2, [r0, #14]
 8004906:	6103      	str	r3, [r0, #16]
 8004908:	6143      	str	r3, [r0, #20]
 800490a:	6183      	str	r3, [r0, #24]
 800490c:	0019      	movs	r1, r3
 800490e:	2208      	movs	r2, #8
 8004910:	305c      	adds	r0, #92	@ 0x5c
 8004912:	f000 f90f 	bl	8004b34 <memset>
 8004916:	4b0b      	ldr	r3, [pc, #44]	@ (8004944 <std+0x50>)
 8004918:	6224      	str	r4, [r4, #32]
 800491a:	6263      	str	r3, [r4, #36]	@ 0x24
 800491c:	4b0a      	ldr	r3, [pc, #40]	@ (8004948 <std+0x54>)
 800491e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004920:	4b0a      	ldr	r3, [pc, #40]	@ (800494c <std+0x58>)
 8004922:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004924:	4b0a      	ldr	r3, [pc, #40]	@ (8004950 <std+0x5c>)
 8004926:	6323      	str	r3, [r4, #48]	@ 0x30
 8004928:	4b0a      	ldr	r3, [pc, #40]	@ (8004954 <std+0x60>)
 800492a:	429c      	cmp	r4, r3
 800492c:	d005      	beq.n	800493a <std+0x46>
 800492e:	4b0a      	ldr	r3, [pc, #40]	@ (8004958 <std+0x64>)
 8004930:	429c      	cmp	r4, r3
 8004932:	d002      	beq.n	800493a <std+0x46>
 8004934:	4b09      	ldr	r3, [pc, #36]	@ (800495c <std+0x68>)
 8004936:	429c      	cmp	r4, r3
 8004938:	d103      	bne.n	8004942 <std+0x4e>
 800493a:	0020      	movs	r0, r4
 800493c:	3058      	adds	r0, #88	@ 0x58
 800493e:	f000 f979 	bl	8004c34 <__retarget_lock_init_recursive>
 8004942:	bd10      	pop	{r4, pc}
 8004944:	08004a9d 	.word	0x08004a9d
 8004948:	08004ac5 	.word	0x08004ac5
 800494c:	08004afd 	.word	0x08004afd
 8004950:	08004b29 	.word	0x08004b29
 8004954:	200001f4 	.word	0x200001f4
 8004958:	2000025c 	.word	0x2000025c
 800495c:	200002c4 	.word	0x200002c4

08004960 <stdio_exit_handler>:
 8004960:	b510      	push	{r4, lr}
 8004962:	4a03      	ldr	r2, [pc, #12]	@ (8004970 <stdio_exit_handler+0x10>)
 8004964:	4903      	ldr	r1, [pc, #12]	@ (8004974 <stdio_exit_handler+0x14>)
 8004966:	4804      	ldr	r0, [pc, #16]	@ (8004978 <stdio_exit_handler+0x18>)
 8004968:	f000 f86c 	bl	8004a44 <_fwalk_sglue>
 800496c:	bd10      	pop	{r4, pc}
 800496e:	46c0      	nop			@ (mov r8, r8)
 8004970:	2000000c 	.word	0x2000000c
 8004974:	080054c5 	.word	0x080054c5
 8004978:	2000001c 	.word	0x2000001c

0800497c <cleanup_stdio>:
 800497c:	6841      	ldr	r1, [r0, #4]
 800497e:	4b0b      	ldr	r3, [pc, #44]	@ (80049ac <cleanup_stdio+0x30>)
 8004980:	b510      	push	{r4, lr}
 8004982:	0004      	movs	r4, r0
 8004984:	4299      	cmp	r1, r3
 8004986:	d001      	beq.n	800498c <cleanup_stdio+0x10>
 8004988:	f000 fd9c 	bl	80054c4 <_fflush_r>
 800498c:	68a1      	ldr	r1, [r4, #8]
 800498e:	4b08      	ldr	r3, [pc, #32]	@ (80049b0 <cleanup_stdio+0x34>)
 8004990:	4299      	cmp	r1, r3
 8004992:	d002      	beq.n	800499a <cleanup_stdio+0x1e>
 8004994:	0020      	movs	r0, r4
 8004996:	f000 fd95 	bl	80054c4 <_fflush_r>
 800499a:	68e1      	ldr	r1, [r4, #12]
 800499c:	4b05      	ldr	r3, [pc, #20]	@ (80049b4 <cleanup_stdio+0x38>)
 800499e:	4299      	cmp	r1, r3
 80049a0:	d002      	beq.n	80049a8 <cleanup_stdio+0x2c>
 80049a2:	0020      	movs	r0, r4
 80049a4:	f000 fd8e 	bl	80054c4 <_fflush_r>
 80049a8:	bd10      	pop	{r4, pc}
 80049aa:	46c0      	nop			@ (mov r8, r8)
 80049ac:	200001f4 	.word	0x200001f4
 80049b0:	2000025c 	.word	0x2000025c
 80049b4:	200002c4 	.word	0x200002c4

080049b8 <global_stdio_init.part.0>:
 80049b8:	b510      	push	{r4, lr}
 80049ba:	4b09      	ldr	r3, [pc, #36]	@ (80049e0 <global_stdio_init.part.0+0x28>)
 80049bc:	4a09      	ldr	r2, [pc, #36]	@ (80049e4 <global_stdio_init.part.0+0x2c>)
 80049be:	2104      	movs	r1, #4
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	4809      	ldr	r0, [pc, #36]	@ (80049e8 <global_stdio_init.part.0+0x30>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	f7ff ff95 	bl	80048f4 <std>
 80049ca:	2201      	movs	r2, #1
 80049cc:	2109      	movs	r1, #9
 80049ce:	4807      	ldr	r0, [pc, #28]	@ (80049ec <global_stdio_init.part.0+0x34>)
 80049d0:	f7ff ff90 	bl	80048f4 <std>
 80049d4:	2202      	movs	r2, #2
 80049d6:	2112      	movs	r1, #18
 80049d8:	4805      	ldr	r0, [pc, #20]	@ (80049f0 <global_stdio_init.part.0+0x38>)
 80049da:	f7ff ff8b 	bl	80048f4 <std>
 80049de:	bd10      	pop	{r4, pc}
 80049e0:	2000032c 	.word	0x2000032c
 80049e4:	08004961 	.word	0x08004961
 80049e8:	200001f4 	.word	0x200001f4
 80049ec:	2000025c 	.word	0x2000025c
 80049f0:	200002c4 	.word	0x200002c4

080049f4 <__sfp_lock_acquire>:
 80049f4:	b510      	push	{r4, lr}
 80049f6:	4802      	ldr	r0, [pc, #8]	@ (8004a00 <__sfp_lock_acquire+0xc>)
 80049f8:	f000 f91d 	bl	8004c36 <__retarget_lock_acquire_recursive>
 80049fc:	bd10      	pop	{r4, pc}
 80049fe:	46c0      	nop			@ (mov r8, r8)
 8004a00:	20000335 	.word	0x20000335

08004a04 <__sfp_lock_release>:
 8004a04:	b510      	push	{r4, lr}
 8004a06:	4802      	ldr	r0, [pc, #8]	@ (8004a10 <__sfp_lock_release+0xc>)
 8004a08:	f000 f916 	bl	8004c38 <__retarget_lock_release_recursive>
 8004a0c:	bd10      	pop	{r4, pc}
 8004a0e:	46c0      	nop			@ (mov r8, r8)
 8004a10:	20000335 	.word	0x20000335

08004a14 <__sinit>:
 8004a14:	b510      	push	{r4, lr}
 8004a16:	0004      	movs	r4, r0
 8004a18:	f7ff ffec 	bl	80049f4 <__sfp_lock_acquire>
 8004a1c:	6a23      	ldr	r3, [r4, #32]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <__sinit+0x14>
 8004a22:	f7ff ffef 	bl	8004a04 <__sfp_lock_release>
 8004a26:	bd10      	pop	{r4, pc}
 8004a28:	4b04      	ldr	r3, [pc, #16]	@ (8004a3c <__sinit+0x28>)
 8004a2a:	6223      	str	r3, [r4, #32]
 8004a2c:	4b04      	ldr	r3, [pc, #16]	@ (8004a40 <__sinit+0x2c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f6      	bne.n	8004a22 <__sinit+0xe>
 8004a34:	f7ff ffc0 	bl	80049b8 <global_stdio_init.part.0>
 8004a38:	e7f3      	b.n	8004a22 <__sinit+0xe>
 8004a3a:	46c0      	nop			@ (mov r8, r8)
 8004a3c:	0800497d 	.word	0x0800497d
 8004a40:	2000032c 	.word	0x2000032c

08004a44 <_fwalk_sglue>:
 8004a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a46:	0014      	movs	r4, r2
 8004a48:	2600      	movs	r6, #0
 8004a4a:	9000      	str	r0, [sp, #0]
 8004a4c:	9101      	str	r1, [sp, #4]
 8004a4e:	68a5      	ldr	r5, [r4, #8]
 8004a50:	6867      	ldr	r7, [r4, #4]
 8004a52:	3f01      	subs	r7, #1
 8004a54:	d504      	bpl.n	8004a60 <_fwalk_sglue+0x1c>
 8004a56:	6824      	ldr	r4, [r4, #0]
 8004a58:	2c00      	cmp	r4, #0
 8004a5a:	d1f8      	bne.n	8004a4e <_fwalk_sglue+0xa>
 8004a5c:	0030      	movs	r0, r6
 8004a5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a60:	89ab      	ldrh	r3, [r5, #12]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d908      	bls.n	8004a78 <_fwalk_sglue+0x34>
 8004a66:	220e      	movs	r2, #14
 8004a68:	5eab      	ldrsh	r3, [r5, r2]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	d004      	beq.n	8004a78 <_fwalk_sglue+0x34>
 8004a6e:	0029      	movs	r1, r5
 8004a70:	9800      	ldr	r0, [sp, #0]
 8004a72:	9b01      	ldr	r3, [sp, #4]
 8004a74:	4798      	blx	r3
 8004a76:	4306      	orrs	r6, r0
 8004a78:	3568      	adds	r5, #104	@ 0x68
 8004a7a:	e7ea      	b.n	8004a52 <_fwalk_sglue+0xe>

08004a7c <iprintf>:
 8004a7c:	b40f      	push	{r0, r1, r2, r3}
 8004a7e:	b507      	push	{r0, r1, r2, lr}
 8004a80:	4905      	ldr	r1, [pc, #20]	@ (8004a98 <iprintf+0x1c>)
 8004a82:	ab04      	add	r3, sp, #16
 8004a84:	6808      	ldr	r0, [r1, #0]
 8004a86:	cb04      	ldmia	r3!, {r2}
 8004a88:	6881      	ldr	r1, [r0, #8]
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	f000 f9fa 	bl	8004e84 <_vfiprintf_r>
 8004a90:	b003      	add	sp, #12
 8004a92:	bc08      	pop	{r3}
 8004a94:	b004      	add	sp, #16
 8004a96:	4718      	bx	r3
 8004a98:	20000018 	.word	0x20000018

08004a9c <__sread>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	000c      	movs	r4, r1
 8004aa0:	250e      	movs	r5, #14
 8004aa2:	5f49      	ldrsh	r1, [r1, r5]
 8004aa4:	f000 f874 	bl	8004b90 <_read_r>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	db03      	blt.n	8004ab4 <__sread+0x18>
 8004aac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004aae:	181b      	adds	r3, r3, r0
 8004ab0:	6563      	str	r3, [r4, #84]	@ 0x54
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	4a02      	ldr	r2, [pc, #8]	@ (8004ac0 <__sread+0x24>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	81a3      	strh	r3, [r4, #12]
 8004abc:	e7f9      	b.n	8004ab2 <__sread+0x16>
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	ffffefff 	.word	0xffffefff

08004ac4 <__swrite>:
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	001f      	movs	r7, r3
 8004ac8:	898b      	ldrh	r3, [r1, #12]
 8004aca:	0005      	movs	r5, r0
 8004acc:	000c      	movs	r4, r1
 8004ace:	0016      	movs	r6, r2
 8004ad0:	05db      	lsls	r3, r3, #23
 8004ad2:	d505      	bpl.n	8004ae0 <__swrite+0x1c>
 8004ad4:	230e      	movs	r3, #14
 8004ad6:	5ec9      	ldrsh	r1, [r1, r3]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2302      	movs	r3, #2
 8004adc:	f000 f844 	bl	8004b68 <_lseek_r>
 8004ae0:	89a3      	ldrh	r3, [r4, #12]
 8004ae2:	4a05      	ldr	r2, [pc, #20]	@ (8004af8 <__swrite+0x34>)
 8004ae4:	0028      	movs	r0, r5
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	81a3      	strh	r3, [r4, #12]
 8004aea:	0032      	movs	r2, r6
 8004aec:	230e      	movs	r3, #14
 8004aee:	5ee1      	ldrsh	r1, [r4, r3]
 8004af0:	003b      	movs	r3, r7
 8004af2:	f000 f861 	bl	8004bb8 <_write_r>
 8004af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af8:	ffffefff 	.word	0xffffefff

08004afc <__sseek>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	000c      	movs	r4, r1
 8004b00:	250e      	movs	r5, #14
 8004b02:	5f49      	ldrsh	r1, [r1, r5]
 8004b04:	f000 f830 	bl	8004b68 <_lseek_r>
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	1c42      	adds	r2, r0, #1
 8004b0c:	d103      	bne.n	8004b16 <__sseek+0x1a>
 8004b0e:	4a05      	ldr	r2, [pc, #20]	@ (8004b24 <__sseek+0x28>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	81a3      	strh	r3, [r4, #12]
 8004b14:	bd70      	pop	{r4, r5, r6, pc}
 8004b16:	2280      	movs	r2, #128	@ 0x80
 8004b18:	0152      	lsls	r2, r2, #5
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	81a3      	strh	r3, [r4, #12]
 8004b1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004b20:	e7f8      	b.n	8004b14 <__sseek+0x18>
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	ffffefff 	.word	0xffffefff

08004b28 <__sclose>:
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	230e      	movs	r3, #14
 8004b2c:	5ec9      	ldrsh	r1, [r1, r3]
 8004b2e:	f000 f809 	bl	8004b44 <_close_r>
 8004b32:	bd10      	pop	{r4, pc}

08004b34 <memset>:
 8004b34:	0003      	movs	r3, r0
 8004b36:	1882      	adds	r2, r0, r2
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d100      	bne.n	8004b3e <memset+0xa>
 8004b3c:	4770      	bx	lr
 8004b3e:	7019      	strb	r1, [r3, #0]
 8004b40:	3301      	adds	r3, #1
 8004b42:	e7f9      	b.n	8004b38 <memset+0x4>

08004b44 <_close_r>:
 8004b44:	2300      	movs	r3, #0
 8004b46:	b570      	push	{r4, r5, r6, lr}
 8004b48:	4d06      	ldr	r5, [pc, #24]	@ (8004b64 <_close_r+0x20>)
 8004b4a:	0004      	movs	r4, r0
 8004b4c:	0008      	movs	r0, r1
 8004b4e:	602b      	str	r3, [r5, #0]
 8004b50:	f7fc fbb9 	bl	80012c6 <_close>
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	d103      	bne.n	8004b60 <_close_r+0x1c>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d000      	beq.n	8004b60 <_close_r+0x1c>
 8004b5e:	6023      	str	r3, [r4, #0]
 8004b60:	bd70      	pop	{r4, r5, r6, pc}
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	20000330 	.word	0x20000330

08004b68 <_lseek_r>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	0004      	movs	r4, r0
 8004b6c:	0008      	movs	r0, r1
 8004b6e:	0011      	movs	r1, r2
 8004b70:	001a      	movs	r2, r3
 8004b72:	2300      	movs	r3, #0
 8004b74:	4d05      	ldr	r5, [pc, #20]	@ (8004b8c <_lseek_r+0x24>)
 8004b76:	602b      	str	r3, [r5, #0]
 8004b78:	f7fc fbc6 	bl	8001308 <_lseek>
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	d103      	bne.n	8004b88 <_lseek_r+0x20>
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d000      	beq.n	8004b88 <_lseek_r+0x20>
 8004b86:	6023      	str	r3, [r4, #0]
 8004b88:	bd70      	pop	{r4, r5, r6, pc}
 8004b8a:	46c0      	nop			@ (mov r8, r8)
 8004b8c:	20000330 	.word	0x20000330

08004b90 <_read_r>:
 8004b90:	b570      	push	{r4, r5, r6, lr}
 8004b92:	0004      	movs	r4, r0
 8004b94:	0008      	movs	r0, r1
 8004b96:	0011      	movs	r1, r2
 8004b98:	001a      	movs	r2, r3
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	4d05      	ldr	r5, [pc, #20]	@ (8004bb4 <_read_r+0x24>)
 8004b9e:	602b      	str	r3, [r5, #0]
 8004ba0:	f7fc fb74 	bl	800128c <_read>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d103      	bne.n	8004bb0 <_read_r+0x20>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d000      	beq.n	8004bb0 <_read_r+0x20>
 8004bae:	6023      	str	r3, [r4, #0]
 8004bb0:	bd70      	pop	{r4, r5, r6, pc}
 8004bb2:	46c0      	nop			@ (mov r8, r8)
 8004bb4:	20000330 	.word	0x20000330

08004bb8 <_write_r>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	0004      	movs	r4, r0
 8004bbc:	0008      	movs	r0, r1
 8004bbe:	0011      	movs	r1, r2
 8004bc0:	001a      	movs	r2, r3
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	4d05      	ldr	r5, [pc, #20]	@ (8004bdc <_write_r+0x24>)
 8004bc6:	602b      	str	r3, [r5, #0]
 8004bc8:	f7fb fc78 	bl	80004bc <_write>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d103      	bne.n	8004bd8 <_write_r+0x20>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d000      	beq.n	8004bd8 <_write_r+0x20>
 8004bd6:	6023      	str	r3, [r4, #0]
 8004bd8:	bd70      	pop	{r4, r5, r6, pc}
 8004bda:	46c0      	nop			@ (mov r8, r8)
 8004bdc:	20000330 	.word	0x20000330

08004be0 <__errno>:
 8004be0:	4b01      	ldr	r3, [pc, #4]	@ (8004be8 <__errno+0x8>)
 8004be2:	6818      	ldr	r0, [r3, #0]
 8004be4:	4770      	bx	lr
 8004be6:	46c0      	nop			@ (mov r8, r8)
 8004be8:	20000018 	.word	0x20000018

08004bec <__libc_init_array>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	2600      	movs	r6, #0
 8004bf0:	4c0c      	ldr	r4, [pc, #48]	@ (8004c24 <__libc_init_array+0x38>)
 8004bf2:	4d0d      	ldr	r5, [pc, #52]	@ (8004c28 <__libc_init_array+0x3c>)
 8004bf4:	1b64      	subs	r4, r4, r5
 8004bf6:	10a4      	asrs	r4, r4, #2
 8004bf8:	42a6      	cmp	r6, r4
 8004bfa:	d109      	bne.n	8004c10 <__libc_init_array+0x24>
 8004bfc:	2600      	movs	r6, #0
 8004bfe:	f000 fddb 	bl	80057b8 <_init>
 8004c02:	4c0a      	ldr	r4, [pc, #40]	@ (8004c2c <__libc_init_array+0x40>)
 8004c04:	4d0a      	ldr	r5, [pc, #40]	@ (8004c30 <__libc_init_array+0x44>)
 8004c06:	1b64      	subs	r4, r4, r5
 8004c08:	10a4      	asrs	r4, r4, #2
 8004c0a:	42a6      	cmp	r6, r4
 8004c0c:	d105      	bne.n	8004c1a <__libc_init_array+0x2e>
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	00b3      	lsls	r3, r6, #2
 8004c12:	58eb      	ldr	r3, [r5, r3]
 8004c14:	4798      	blx	r3
 8004c16:	3601      	adds	r6, #1
 8004c18:	e7ee      	b.n	8004bf8 <__libc_init_array+0xc>
 8004c1a:	00b3      	lsls	r3, r6, #2
 8004c1c:	58eb      	ldr	r3, [r5, r3]
 8004c1e:	4798      	blx	r3
 8004c20:	3601      	adds	r6, #1
 8004c22:	e7f2      	b.n	8004c0a <__libc_init_array+0x1e>
 8004c24:	080058b4 	.word	0x080058b4
 8004c28:	080058b4 	.word	0x080058b4
 8004c2c:	080058b8 	.word	0x080058b8
 8004c30:	080058b4 	.word	0x080058b4

08004c34 <__retarget_lock_init_recursive>:
 8004c34:	4770      	bx	lr

08004c36 <__retarget_lock_acquire_recursive>:
 8004c36:	4770      	bx	lr

08004c38 <__retarget_lock_release_recursive>:
 8004c38:	4770      	bx	lr
	...

08004c3c <_free_r>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	0005      	movs	r5, r0
 8004c40:	1e0c      	subs	r4, r1, #0
 8004c42:	d010      	beq.n	8004c66 <_free_r+0x2a>
 8004c44:	3c04      	subs	r4, #4
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	da00      	bge.n	8004c4e <_free_r+0x12>
 8004c4c:	18e4      	adds	r4, r4, r3
 8004c4e:	0028      	movs	r0, r5
 8004c50:	f000 f8e0 	bl	8004e14 <__malloc_lock>
 8004c54:	4a1d      	ldr	r2, [pc, #116]	@ (8004ccc <_free_r+0x90>)
 8004c56:	6813      	ldr	r3, [r2, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d105      	bne.n	8004c68 <_free_r+0x2c>
 8004c5c:	6063      	str	r3, [r4, #4]
 8004c5e:	6014      	str	r4, [r2, #0]
 8004c60:	0028      	movs	r0, r5
 8004c62:	f000 f8df 	bl	8004e24 <__malloc_unlock>
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
 8004c68:	42a3      	cmp	r3, r4
 8004c6a:	d908      	bls.n	8004c7e <_free_r+0x42>
 8004c6c:	6820      	ldr	r0, [r4, #0]
 8004c6e:	1821      	adds	r1, r4, r0
 8004c70:	428b      	cmp	r3, r1
 8004c72:	d1f3      	bne.n	8004c5c <_free_r+0x20>
 8004c74:	6819      	ldr	r1, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	1809      	adds	r1, r1, r0
 8004c7a:	6021      	str	r1, [r4, #0]
 8004c7c:	e7ee      	b.n	8004c5c <_free_r+0x20>
 8004c7e:	001a      	movs	r2, r3
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <_free_r+0x4e>
 8004c86:	42a3      	cmp	r3, r4
 8004c88:	d9f9      	bls.n	8004c7e <_free_r+0x42>
 8004c8a:	6811      	ldr	r1, [r2, #0]
 8004c8c:	1850      	adds	r0, r2, r1
 8004c8e:	42a0      	cmp	r0, r4
 8004c90:	d10b      	bne.n	8004caa <_free_r+0x6e>
 8004c92:	6820      	ldr	r0, [r4, #0]
 8004c94:	1809      	adds	r1, r1, r0
 8004c96:	1850      	adds	r0, r2, r1
 8004c98:	6011      	str	r1, [r2, #0]
 8004c9a:	4283      	cmp	r3, r0
 8004c9c:	d1e0      	bne.n	8004c60 <_free_r+0x24>
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	1841      	adds	r1, r0, r1
 8004ca4:	6011      	str	r1, [r2, #0]
 8004ca6:	6053      	str	r3, [r2, #4]
 8004ca8:	e7da      	b.n	8004c60 <_free_r+0x24>
 8004caa:	42a0      	cmp	r0, r4
 8004cac:	d902      	bls.n	8004cb4 <_free_r+0x78>
 8004cae:	230c      	movs	r3, #12
 8004cb0:	602b      	str	r3, [r5, #0]
 8004cb2:	e7d5      	b.n	8004c60 <_free_r+0x24>
 8004cb4:	6820      	ldr	r0, [r4, #0]
 8004cb6:	1821      	adds	r1, r4, r0
 8004cb8:	428b      	cmp	r3, r1
 8004cba:	d103      	bne.n	8004cc4 <_free_r+0x88>
 8004cbc:	6819      	ldr	r1, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	1809      	adds	r1, r1, r0
 8004cc2:	6021      	str	r1, [r4, #0]
 8004cc4:	6063      	str	r3, [r4, #4]
 8004cc6:	6054      	str	r4, [r2, #4]
 8004cc8:	e7ca      	b.n	8004c60 <_free_r+0x24>
 8004cca:	46c0      	nop			@ (mov r8, r8)
 8004ccc:	2000033c 	.word	0x2000033c

08004cd0 <sbrk_aligned>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	4e0f      	ldr	r6, [pc, #60]	@ (8004d10 <sbrk_aligned+0x40>)
 8004cd4:	000d      	movs	r5, r1
 8004cd6:	6831      	ldr	r1, [r6, #0]
 8004cd8:	0004      	movs	r4, r0
 8004cda:	2900      	cmp	r1, #0
 8004cdc:	d102      	bne.n	8004ce4 <sbrk_aligned+0x14>
 8004cde:	f000 fcbd 	bl	800565c <_sbrk_r>
 8004ce2:	6030      	str	r0, [r6, #0]
 8004ce4:	0029      	movs	r1, r5
 8004ce6:	0020      	movs	r0, r4
 8004ce8:	f000 fcb8 	bl	800565c <_sbrk_r>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d103      	bne.n	8004cf8 <sbrk_aligned+0x28>
 8004cf0:	2501      	movs	r5, #1
 8004cf2:	426d      	negs	r5, r5
 8004cf4:	0028      	movs	r0, r5
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	1cc5      	adds	r5, r0, #3
 8004cfc:	439d      	bics	r5, r3
 8004cfe:	42a8      	cmp	r0, r5
 8004d00:	d0f8      	beq.n	8004cf4 <sbrk_aligned+0x24>
 8004d02:	1a29      	subs	r1, r5, r0
 8004d04:	0020      	movs	r0, r4
 8004d06:	f000 fca9 	bl	800565c <_sbrk_r>
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d1f2      	bne.n	8004cf4 <sbrk_aligned+0x24>
 8004d0e:	e7ef      	b.n	8004cf0 <sbrk_aligned+0x20>
 8004d10:	20000338 	.word	0x20000338

08004d14 <_malloc_r>:
 8004d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d16:	2203      	movs	r2, #3
 8004d18:	1ccb      	adds	r3, r1, #3
 8004d1a:	4393      	bics	r3, r2
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	0005      	movs	r5, r0
 8004d20:	001f      	movs	r7, r3
 8004d22:	2b0c      	cmp	r3, #12
 8004d24:	d234      	bcs.n	8004d90 <_malloc_r+0x7c>
 8004d26:	270c      	movs	r7, #12
 8004d28:	42b9      	cmp	r1, r7
 8004d2a:	d833      	bhi.n	8004d94 <_malloc_r+0x80>
 8004d2c:	0028      	movs	r0, r5
 8004d2e:	f000 f871 	bl	8004e14 <__malloc_lock>
 8004d32:	4e37      	ldr	r6, [pc, #220]	@ (8004e10 <_malloc_r+0xfc>)
 8004d34:	6833      	ldr	r3, [r6, #0]
 8004d36:	001c      	movs	r4, r3
 8004d38:	2c00      	cmp	r4, #0
 8004d3a:	d12f      	bne.n	8004d9c <_malloc_r+0x88>
 8004d3c:	0039      	movs	r1, r7
 8004d3e:	0028      	movs	r0, r5
 8004d40:	f7ff ffc6 	bl	8004cd0 <sbrk_aligned>
 8004d44:	0004      	movs	r4, r0
 8004d46:	1c43      	adds	r3, r0, #1
 8004d48:	d15f      	bne.n	8004e0a <_malloc_r+0xf6>
 8004d4a:	6834      	ldr	r4, [r6, #0]
 8004d4c:	9400      	str	r4, [sp, #0]
 8004d4e:	9b00      	ldr	r3, [sp, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d14a      	bne.n	8004dea <_malloc_r+0xd6>
 8004d54:	2c00      	cmp	r4, #0
 8004d56:	d052      	beq.n	8004dfe <_malloc_r+0xea>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	0028      	movs	r0, r5
 8004d5c:	18e3      	adds	r3, r4, r3
 8004d5e:	9900      	ldr	r1, [sp, #0]
 8004d60:	9301      	str	r3, [sp, #4]
 8004d62:	f000 fc7b 	bl	800565c <_sbrk_r>
 8004d66:	9b01      	ldr	r3, [sp, #4]
 8004d68:	4283      	cmp	r3, r0
 8004d6a:	d148      	bne.n	8004dfe <_malloc_r+0xea>
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	0028      	movs	r0, r5
 8004d70:	1aff      	subs	r7, r7, r3
 8004d72:	0039      	movs	r1, r7
 8004d74:	f7ff ffac 	bl	8004cd0 <sbrk_aligned>
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d040      	beq.n	8004dfe <_malloc_r+0xea>
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	19db      	adds	r3, r3, r7
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	6833      	ldr	r3, [r6, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	2a00      	cmp	r2, #0
 8004d88:	d133      	bne.n	8004df2 <_malloc_r+0xde>
 8004d8a:	9b00      	ldr	r3, [sp, #0]
 8004d8c:	6033      	str	r3, [r6, #0]
 8004d8e:	e019      	b.n	8004dc4 <_malloc_r+0xb0>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	dac9      	bge.n	8004d28 <_malloc_r+0x14>
 8004d94:	230c      	movs	r3, #12
 8004d96:	602b      	str	r3, [r5, #0]
 8004d98:	2000      	movs	r0, #0
 8004d9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d9c:	6821      	ldr	r1, [r4, #0]
 8004d9e:	1bc9      	subs	r1, r1, r7
 8004da0:	d420      	bmi.n	8004de4 <_malloc_r+0xd0>
 8004da2:	290b      	cmp	r1, #11
 8004da4:	d90a      	bls.n	8004dbc <_malloc_r+0xa8>
 8004da6:	19e2      	adds	r2, r4, r7
 8004da8:	6027      	str	r7, [r4, #0]
 8004daa:	42a3      	cmp	r3, r4
 8004dac:	d104      	bne.n	8004db8 <_malloc_r+0xa4>
 8004dae:	6032      	str	r2, [r6, #0]
 8004db0:	6863      	ldr	r3, [r4, #4]
 8004db2:	6011      	str	r1, [r2, #0]
 8004db4:	6053      	str	r3, [r2, #4]
 8004db6:	e005      	b.n	8004dc4 <_malloc_r+0xb0>
 8004db8:	605a      	str	r2, [r3, #4]
 8004dba:	e7f9      	b.n	8004db0 <_malloc_r+0x9c>
 8004dbc:	6862      	ldr	r2, [r4, #4]
 8004dbe:	42a3      	cmp	r3, r4
 8004dc0:	d10e      	bne.n	8004de0 <_malloc_r+0xcc>
 8004dc2:	6032      	str	r2, [r6, #0]
 8004dc4:	0028      	movs	r0, r5
 8004dc6:	f000 f82d 	bl	8004e24 <__malloc_unlock>
 8004dca:	0020      	movs	r0, r4
 8004dcc:	2207      	movs	r2, #7
 8004dce:	300b      	adds	r0, #11
 8004dd0:	1d23      	adds	r3, r4, #4
 8004dd2:	4390      	bics	r0, r2
 8004dd4:	1ac2      	subs	r2, r0, r3
 8004dd6:	4298      	cmp	r0, r3
 8004dd8:	d0df      	beq.n	8004d9a <_malloc_r+0x86>
 8004dda:	1a1b      	subs	r3, r3, r0
 8004ddc:	50a3      	str	r3, [r4, r2]
 8004dde:	e7dc      	b.n	8004d9a <_malloc_r+0x86>
 8004de0:	605a      	str	r2, [r3, #4]
 8004de2:	e7ef      	b.n	8004dc4 <_malloc_r+0xb0>
 8004de4:	0023      	movs	r3, r4
 8004de6:	6864      	ldr	r4, [r4, #4]
 8004de8:	e7a6      	b.n	8004d38 <_malloc_r+0x24>
 8004dea:	9c00      	ldr	r4, [sp, #0]
 8004dec:	6863      	ldr	r3, [r4, #4]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	e7ad      	b.n	8004d4e <_malloc_r+0x3a>
 8004df2:	001a      	movs	r2, r3
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	42a3      	cmp	r3, r4
 8004df8:	d1fb      	bne.n	8004df2 <_malloc_r+0xde>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e7da      	b.n	8004db4 <_malloc_r+0xa0>
 8004dfe:	230c      	movs	r3, #12
 8004e00:	0028      	movs	r0, r5
 8004e02:	602b      	str	r3, [r5, #0]
 8004e04:	f000 f80e 	bl	8004e24 <__malloc_unlock>
 8004e08:	e7c6      	b.n	8004d98 <_malloc_r+0x84>
 8004e0a:	6007      	str	r7, [r0, #0]
 8004e0c:	e7da      	b.n	8004dc4 <_malloc_r+0xb0>
 8004e0e:	46c0      	nop			@ (mov r8, r8)
 8004e10:	2000033c 	.word	0x2000033c

08004e14 <__malloc_lock>:
 8004e14:	b510      	push	{r4, lr}
 8004e16:	4802      	ldr	r0, [pc, #8]	@ (8004e20 <__malloc_lock+0xc>)
 8004e18:	f7ff ff0d 	bl	8004c36 <__retarget_lock_acquire_recursive>
 8004e1c:	bd10      	pop	{r4, pc}
 8004e1e:	46c0      	nop			@ (mov r8, r8)
 8004e20:	20000334 	.word	0x20000334

08004e24 <__malloc_unlock>:
 8004e24:	b510      	push	{r4, lr}
 8004e26:	4802      	ldr	r0, [pc, #8]	@ (8004e30 <__malloc_unlock+0xc>)
 8004e28:	f7ff ff06 	bl	8004c38 <__retarget_lock_release_recursive>
 8004e2c:	bd10      	pop	{r4, pc}
 8004e2e:	46c0      	nop			@ (mov r8, r8)
 8004e30:	20000334 	.word	0x20000334

08004e34 <__sfputc_r>:
 8004e34:	6893      	ldr	r3, [r2, #8]
 8004e36:	b510      	push	{r4, lr}
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	6093      	str	r3, [r2, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	da04      	bge.n	8004e4a <__sfputc_r+0x16>
 8004e40:	6994      	ldr	r4, [r2, #24]
 8004e42:	42a3      	cmp	r3, r4
 8004e44:	db07      	blt.n	8004e56 <__sfputc_r+0x22>
 8004e46:	290a      	cmp	r1, #10
 8004e48:	d005      	beq.n	8004e56 <__sfputc_r+0x22>
 8004e4a:	6813      	ldr	r3, [r2, #0]
 8004e4c:	1c58      	adds	r0, r3, #1
 8004e4e:	6010      	str	r0, [r2, #0]
 8004e50:	7019      	strb	r1, [r3, #0]
 8004e52:	0008      	movs	r0, r1
 8004e54:	bd10      	pop	{r4, pc}
 8004e56:	f000 fb60 	bl	800551a <__swbuf_r>
 8004e5a:	0001      	movs	r1, r0
 8004e5c:	e7f9      	b.n	8004e52 <__sfputc_r+0x1e>

08004e5e <__sfputs_r>:
 8004e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e60:	0006      	movs	r6, r0
 8004e62:	000f      	movs	r7, r1
 8004e64:	0014      	movs	r4, r2
 8004e66:	18d5      	adds	r5, r2, r3
 8004e68:	42ac      	cmp	r4, r5
 8004e6a:	d101      	bne.n	8004e70 <__sfputs_r+0x12>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	e007      	b.n	8004e80 <__sfputs_r+0x22>
 8004e70:	7821      	ldrb	r1, [r4, #0]
 8004e72:	003a      	movs	r2, r7
 8004e74:	0030      	movs	r0, r6
 8004e76:	f7ff ffdd 	bl	8004e34 <__sfputc_r>
 8004e7a:	3401      	adds	r4, #1
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	d1f3      	bne.n	8004e68 <__sfputs_r+0xa>
 8004e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e84 <_vfiprintf_r>:
 8004e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e86:	b0a1      	sub	sp, #132	@ 0x84
 8004e88:	000f      	movs	r7, r1
 8004e8a:	0015      	movs	r5, r2
 8004e8c:	001e      	movs	r6, r3
 8004e8e:	9003      	str	r0, [sp, #12]
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d004      	beq.n	8004e9e <_vfiprintf_r+0x1a>
 8004e94:	6a03      	ldr	r3, [r0, #32]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <_vfiprintf_r+0x1a>
 8004e9a:	f7ff fdbb 	bl	8004a14 <__sinit>
 8004e9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ea0:	07db      	lsls	r3, r3, #31
 8004ea2:	d405      	bmi.n	8004eb0 <_vfiprintf_r+0x2c>
 8004ea4:	89bb      	ldrh	r3, [r7, #12]
 8004ea6:	059b      	lsls	r3, r3, #22
 8004ea8:	d402      	bmi.n	8004eb0 <_vfiprintf_r+0x2c>
 8004eaa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004eac:	f7ff fec3 	bl	8004c36 <__retarget_lock_acquire_recursive>
 8004eb0:	89bb      	ldrh	r3, [r7, #12]
 8004eb2:	071b      	lsls	r3, r3, #28
 8004eb4:	d502      	bpl.n	8004ebc <_vfiprintf_r+0x38>
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d113      	bne.n	8004ee4 <_vfiprintf_r+0x60>
 8004ebc:	0039      	movs	r1, r7
 8004ebe:	9803      	ldr	r0, [sp, #12]
 8004ec0:	f000 fb6e 	bl	80055a0 <__swsetup_r>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d00d      	beq.n	8004ee4 <_vfiprintf_r+0x60>
 8004ec8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eca:	07db      	lsls	r3, r3, #31
 8004ecc:	d503      	bpl.n	8004ed6 <_vfiprintf_r+0x52>
 8004ece:	2001      	movs	r0, #1
 8004ed0:	4240      	negs	r0, r0
 8004ed2:	b021      	add	sp, #132	@ 0x84
 8004ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ed6:	89bb      	ldrh	r3, [r7, #12]
 8004ed8:	059b      	lsls	r3, r3, #22
 8004eda:	d4f8      	bmi.n	8004ece <_vfiprintf_r+0x4a>
 8004edc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004ede:	f7ff feab 	bl	8004c38 <__retarget_lock_release_recursive>
 8004ee2:	e7f4      	b.n	8004ece <_vfiprintf_r+0x4a>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	ac08      	add	r4, sp, #32
 8004ee8:	6163      	str	r3, [r4, #20]
 8004eea:	3320      	adds	r3, #32
 8004eec:	7663      	strb	r3, [r4, #25]
 8004eee:	3310      	adds	r3, #16
 8004ef0:	76a3      	strb	r3, [r4, #26]
 8004ef2:	9607      	str	r6, [sp, #28]
 8004ef4:	002e      	movs	r6, r5
 8004ef6:	7833      	ldrb	r3, [r6, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <_vfiprintf_r+0x7c>
 8004efc:	2b25      	cmp	r3, #37	@ 0x25
 8004efe:	d148      	bne.n	8004f92 <_vfiprintf_r+0x10e>
 8004f00:	1b73      	subs	r3, r6, r5
 8004f02:	9305      	str	r3, [sp, #20]
 8004f04:	42ae      	cmp	r6, r5
 8004f06:	d00b      	beq.n	8004f20 <_vfiprintf_r+0x9c>
 8004f08:	002a      	movs	r2, r5
 8004f0a:	0039      	movs	r1, r7
 8004f0c:	9803      	ldr	r0, [sp, #12]
 8004f0e:	f7ff ffa6 	bl	8004e5e <__sfputs_r>
 8004f12:	3001      	adds	r0, #1
 8004f14:	d100      	bne.n	8004f18 <_vfiprintf_r+0x94>
 8004f16:	e0ae      	b.n	8005076 <_vfiprintf_r+0x1f2>
 8004f18:	6963      	ldr	r3, [r4, #20]
 8004f1a:	9a05      	ldr	r2, [sp, #20]
 8004f1c:	189b      	adds	r3, r3, r2
 8004f1e:	6163      	str	r3, [r4, #20]
 8004f20:	7833      	ldrb	r3, [r6, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d100      	bne.n	8004f28 <_vfiprintf_r+0xa4>
 8004f26:	e0a6      	b.n	8005076 <_vfiprintf_r+0x1f2>
 8004f28:	2201      	movs	r2, #1
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	4252      	negs	r2, r2
 8004f2e:	6062      	str	r2, [r4, #4]
 8004f30:	a904      	add	r1, sp, #16
 8004f32:	3254      	adds	r2, #84	@ 0x54
 8004f34:	1852      	adds	r2, r2, r1
 8004f36:	1c75      	adds	r5, r6, #1
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	60e3      	str	r3, [r4, #12]
 8004f3c:	60a3      	str	r3, [r4, #8]
 8004f3e:	7013      	strb	r3, [r2, #0]
 8004f40:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004f42:	4b59      	ldr	r3, [pc, #356]	@ (80050a8 <_vfiprintf_r+0x224>)
 8004f44:	2205      	movs	r2, #5
 8004f46:	0018      	movs	r0, r3
 8004f48:	7829      	ldrb	r1, [r5, #0]
 8004f4a:	9305      	str	r3, [sp, #20]
 8004f4c:	f000 fb98 	bl	8005680 <memchr>
 8004f50:	1c6e      	adds	r6, r5, #1
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d11f      	bne.n	8004f96 <_vfiprintf_r+0x112>
 8004f56:	6822      	ldr	r2, [r4, #0]
 8004f58:	06d3      	lsls	r3, r2, #27
 8004f5a:	d504      	bpl.n	8004f66 <_vfiprintf_r+0xe2>
 8004f5c:	2353      	movs	r3, #83	@ 0x53
 8004f5e:	a904      	add	r1, sp, #16
 8004f60:	185b      	adds	r3, r3, r1
 8004f62:	2120      	movs	r1, #32
 8004f64:	7019      	strb	r1, [r3, #0]
 8004f66:	0713      	lsls	r3, r2, #28
 8004f68:	d504      	bpl.n	8004f74 <_vfiprintf_r+0xf0>
 8004f6a:	2353      	movs	r3, #83	@ 0x53
 8004f6c:	a904      	add	r1, sp, #16
 8004f6e:	185b      	adds	r3, r3, r1
 8004f70:	212b      	movs	r1, #43	@ 0x2b
 8004f72:	7019      	strb	r1, [r3, #0]
 8004f74:	782b      	ldrb	r3, [r5, #0]
 8004f76:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f78:	d016      	beq.n	8004fa8 <_vfiprintf_r+0x124>
 8004f7a:	002e      	movs	r6, r5
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	200a      	movs	r0, #10
 8004f80:	68e3      	ldr	r3, [r4, #12]
 8004f82:	7832      	ldrb	r2, [r6, #0]
 8004f84:	1c75      	adds	r5, r6, #1
 8004f86:	3a30      	subs	r2, #48	@ 0x30
 8004f88:	2a09      	cmp	r2, #9
 8004f8a:	d950      	bls.n	800502e <_vfiprintf_r+0x1aa>
 8004f8c:	2900      	cmp	r1, #0
 8004f8e:	d111      	bne.n	8004fb4 <_vfiprintf_r+0x130>
 8004f90:	e017      	b.n	8004fc2 <_vfiprintf_r+0x13e>
 8004f92:	3601      	adds	r6, #1
 8004f94:	e7af      	b.n	8004ef6 <_vfiprintf_r+0x72>
 8004f96:	9b05      	ldr	r3, [sp, #20]
 8004f98:	6822      	ldr	r2, [r4, #0]
 8004f9a:	1ac0      	subs	r0, r0, r3
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	4083      	lsls	r3, r0
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	0035      	movs	r5, r6
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	e7cc      	b.n	8004f42 <_vfiprintf_r+0xbe>
 8004fa8:	9b07      	ldr	r3, [sp, #28]
 8004faa:	1d19      	adds	r1, r3, #4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	9107      	str	r1, [sp, #28]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	db01      	blt.n	8004fb8 <_vfiprintf_r+0x134>
 8004fb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fb6:	e004      	b.n	8004fc2 <_vfiprintf_r+0x13e>
 8004fb8:	425b      	negs	r3, r3
 8004fba:	60e3      	str	r3, [r4, #12]
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	7833      	ldrb	r3, [r6, #0]
 8004fc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fc6:	d10c      	bne.n	8004fe2 <_vfiprintf_r+0x15e>
 8004fc8:	7873      	ldrb	r3, [r6, #1]
 8004fca:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fcc:	d134      	bne.n	8005038 <_vfiprintf_r+0x1b4>
 8004fce:	9b07      	ldr	r3, [sp, #28]
 8004fd0:	3602      	adds	r6, #2
 8004fd2:	1d1a      	adds	r2, r3, #4
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	9207      	str	r2, [sp, #28]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	da01      	bge.n	8004fe0 <_vfiprintf_r+0x15c>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	425b      	negs	r3, r3
 8004fe0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fe2:	4d32      	ldr	r5, [pc, #200]	@ (80050ac <_vfiprintf_r+0x228>)
 8004fe4:	2203      	movs	r2, #3
 8004fe6:	0028      	movs	r0, r5
 8004fe8:	7831      	ldrb	r1, [r6, #0]
 8004fea:	f000 fb49 	bl	8005680 <memchr>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	d006      	beq.n	8005000 <_vfiprintf_r+0x17c>
 8004ff2:	2340      	movs	r3, #64	@ 0x40
 8004ff4:	1b40      	subs	r0, r0, r5
 8004ff6:	4083      	lsls	r3, r0
 8004ff8:	6822      	ldr	r2, [r4, #0]
 8004ffa:	3601      	adds	r6, #1
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	7831      	ldrb	r1, [r6, #0]
 8005002:	2206      	movs	r2, #6
 8005004:	482a      	ldr	r0, [pc, #168]	@ (80050b0 <_vfiprintf_r+0x22c>)
 8005006:	1c75      	adds	r5, r6, #1
 8005008:	7621      	strb	r1, [r4, #24]
 800500a:	f000 fb39 	bl	8005680 <memchr>
 800500e:	2800      	cmp	r0, #0
 8005010:	d040      	beq.n	8005094 <_vfiprintf_r+0x210>
 8005012:	4b28      	ldr	r3, [pc, #160]	@ (80050b4 <_vfiprintf_r+0x230>)
 8005014:	2b00      	cmp	r3, #0
 8005016:	d122      	bne.n	800505e <_vfiprintf_r+0x1da>
 8005018:	2207      	movs	r2, #7
 800501a:	9b07      	ldr	r3, [sp, #28]
 800501c:	3307      	adds	r3, #7
 800501e:	4393      	bics	r3, r2
 8005020:	3308      	adds	r3, #8
 8005022:	9307      	str	r3, [sp, #28]
 8005024:	6963      	ldr	r3, [r4, #20]
 8005026:	9a04      	ldr	r2, [sp, #16]
 8005028:	189b      	adds	r3, r3, r2
 800502a:	6163      	str	r3, [r4, #20]
 800502c:	e762      	b.n	8004ef4 <_vfiprintf_r+0x70>
 800502e:	4343      	muls	r3, r0
 8005030:	002e      	movs	r6, r5
 8005032:	2101      	movs	r1, #1
 8005034:	189b      	adds	r3, r3, r2
 8005036:	e7a4      	b.n	8004f82 <_vfiprintf_r+0xfe>
 8005038:	2300      	movs	r3, #0
 800503a:	200a      	movs	r0, #10
 800503c:	0019      	movs	r1, r3
 800503e:	3601      	adds	r6, #1
 8005040:	6063      	str	r3, [r4, #4]
 8005042:	7832      	ldrb	r2, [r6, #0]
 8005044:	1c75      	adds	r5, r6, #1
 8005046:	3a30      	subs	r2, #48	@ 0x30
 8005048:	2a09      	cmp	r2, #9
 800504a:	d903      	bls.n	8005054 <_vfiprintf_r+0x1d0>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0c8      	beq.n	8004fe2 <_vfiprintf_r+0x15e>
 8005050:	9109      	str	r1, [sp, #36]	@ 0x24
 8005052:	e7c6      	b.n	8004fe2 <_vfiprintf_r+0x15e>
 8005054:	4341      	muls	r1, r0
 8005056:	002e      	movs	r6, r5
 8005058:	2301      	movs	r3, #1
 800505a:	1889      	adds	r1, r1, r2
 800505c:	e7f1      	b.n	8005042 <_vfiprintf_r+0x1be>
 800505e:	aa07      	add	r2, sp, #28
 8005060:	9200      	str	r2, [sp, #0]
 8005062:	0021      	movs	r1, r4
 8005064:	003a      	movs	r2, r7
 8005066:	4b14      	ldr	r3, [pc, #80]	@ (80050b8 <_vfiprintf_r+0x234>)
 8005068:	9803      	ldr	r0, [sp, #12]
 800506a:	e000      	b.n	800506e <_vfiprintf_r+0x1ea>
 800506c:	bf00      	nop
 800506e:	9004      	str	r0, [sp, #16]
 8005070:	9b04      	ldr	r3, [sp, #16]
 8005072:	3301      	adds	r3, #1
 8005074:	d1d6      	bne.n	8005024 <_vfiprintf_r+0x1a0>
 8005076:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005078:	07db      	lsls	r3, r3, #31
 800507a:	d405      	bmi.n	8005088 <_vfiprintf_r+0x204>
 800507c:	89bb      	ldrh	r3, [r7, #12]
 800507e:	059b      	lsls	r3, r3, #22
 8005080:	d402      	bmi.n	8005088 <_vfiprintf_r+0x204>
 8005082:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005084:	f7ff fdd8 	bl	8004c38 <__retarget_lock_release_recursive>
 8005088:	89bb      	ldrh	r3, [r7, #12]
 800508a:	065b      	lsls	r3, r3, #25
 800508c:	d500      	bpl.n	8005090 <_vfiprintf_r+0x20c>
 800508e:	e71e      	b.n	8004ece <_vfiprintf_r+0x4a>
 8005090:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005092:	e71e      	b.n	8004ed2 <_vfiprintf_r+0x4e>
 8005094:	aa07      	add	r2, sp, #28
 8005096:	9200      	str	r2, [sp, #0]
 8005098:	0021      	movs	r1, r4
 800509a:	003a      	movs	r2, r7
 800509c:	4b06      	ldr	r3, [pc, #24]	@ (80050b8 <_vfiprintf_r+0x234>)
 800509e:	9803      	ldr	r0, [sp, #12]
 80050a0:	f000 f87c 	bl	800519c <_printf_i>
 80050a4:	e7e3      	b.n	800506e <_vfiprintf_r+0x1ea>
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	08005878 	.word	0x08005878
 80050ac:	0800587e 	.word	0x0800587e
 80050b0:	08005882 	.word	0x08005882
 80050b4:	00000000 	.word	0x00000000
 80050b8:	08004e5f 	.word	0x08004e5f

080050bc <_printf_common>:
 80050bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050be:	0016      	movs	r6, r2
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	688a      	ldr	r2, [r1, #8]
 80050c4:	690b      	ldr	r3, [r1, #16]
 80050c6:	000c      	movs	r4, r1
 80050c8:	9000      	str	r0, [sp, #0]
 80050ca:	4293      	cmp	r3, r2
 80050cc:	da00      	bge.n	80050d0 <_printf_common+0x14>
 80050ce:	0013      	movs	r3, r2
 80050d0:	0022      	movs	r2, r4
 80050d2:	6033      	str	r3, [r6, #0]
 80050d4:	3243      	adds	r2, #67	@ 0x43
 80050d6:	7812      	ldrb	r2, [r2, #0]
 80050d8:	2a00      	cmp	r2, #0
 80050da:	d001      	beq.n	80050e0 <_printf_common+0x24>
 80050dc:	3301      	adds	r3, #1
 80050de:	6033      	str	r3, [r6, #0]
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	069b      	lsls	r3, r3, #26
 80050e4:	d502      	bpl.n	80050ec <_printf_common+0x30>
 80050e6:	6833      	ldr	r3, [r6, #0]
 80050e8:	3302      	adds	r3, #2
 80050ea:	6033      	str	r3, [r6, #0]
 80050ec:	6822      	ldr	r2, [r4, #0]
 80050ee:	2306      	movs	r3, #6
 80050f0:	0015      	movs	r5, r2
 80050f2:	401d      	ands	r5, r3
 80050f4:	421a      	tst	r2, r3
 80050f6:	d027      	beq.n	8005148 <_printf_common+0x8c>
 80050f8:	0023      	movs	r3, r4
 80050fa:	3343      	adds	r3, #67	@ 0x43
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	1e5a      	subs	r2, r3, #1
 8005100:	4193      	sbcs	r3, r2
 8005102:	6822      	ldr	r2, [r4, #0]
 8005104:	0692      	lsls	r2, r2, #26
 8005106:	d430      	bmi.n	800516a <_printf_common+0xae>
 8005108:	0022      	movs	r2, r4
 800510a:	9901      	ldr	r1, [sp, #4]
 800510c:	9800      	ldr	r0, [sp, #0]
 800510e:	9d08      	ldr	r5, [sp, #32]
 8005110:	3243      	adds	r2, #67	@ 0x43
 8005112:	47a8      	blx	r5
 8005114:	3001      	adds	r0, #1
 8005116:	d025      	beq.n	8005164 <_printf_common+0xa8>
 8005118:	2206      	movs	r2, #6
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	2500      	movs	r5, #0
 800511e:	4013      	ands	r3, r2
 8005120:	2b04      	cmp	r3, #4
 8005122:	d105      	bne.n	8005130 <_printf_common+0x74>
 8005124:	6833      	ldr	r3, [r6, #0]
 8005126:	68e5      	ldr	r5, [r4, #12]
 8005128:	1aed      	subs	r5, r5, r3
 800512a:	43eb      	mvns	r3, r5
 800512c:	17db      	asrs	r3, r3, #31
 800512e:	401d      	ands	r5, r3
 8005130:	68a3      	ldr	r3, [r4, #8]
 8005132:	6922      	ldr	r2, [r4, #16]
 8005134:	4293      	cmp	r3, r2
 8005136:	dd01      	ble.n	800513c <_printf_common+0x80>
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	18ed      	adds	r5, r5, r3
 800513c:	2600      	movs	r6, #0
 800513e:	42b5      	cmp	r5, r6
 8005140:	d120      	bne.n	8005184 <_printf_common+0xc8>
 8005142:	2000      	movs	r0, #0
 8005144:	e010      	b.n	8005168 <_printf_common+0xac>
 8005146:	3501      	adds	r5, #1
 8005148:	68e3      	ldr	r3, [r4, #12]
 800514a:	6832      	ldr	r2, [r6, #0]
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	42ab      	cmp	r3, r5
 8005150:	ddd2      	ble.n	80050f8 <_printf_common+0x3c>
 8005152:	0022      	movs	r2, r4
 8005154:	2301      	movs	r3, #1
 8005156:	9901      	ldr	r1, [sp, #4]
 8005158:	9800      	ldr	r0, [sp, #0]
 800515a:	9f08      	ldr	r7, [sp, #32]
 800515c:	3219      	adds	r2, #25
 800515e:	47b8      	blx	r7
 8005160:	3001      	adds	r0, #1
 8005162:	d1f0      	bne.n	8005146 <_printf_common+0x8a>
 8005164:	2001      	movs	r0, #1
 8005166:	4240      	negs	r0, r0
 8005168:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800516a:	2030      	movs	r0, #48	@ 0x30
 800516c:	18e1      	adds	r1, r4, r3
 800516e:	3143      	adds	r1, #67	@ 0x43
 8005170:	7008      	strb	r0, [r1, #0]
 8005172:	0021      	movs	r1, r4
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	3145      	adds	r1, #69	@ 0x45
 8005178:	7809      	ldrb	r1, [r1, #0]
 800517a:	18a2      	adds	r2, r4, r2
 800517c:	3243      	adds	r2, #67	@ 0x43
 800517e:	3302      	adds	r3, #2
 8005180:	7011      	strb	r1, [r2, #0]
 8005182:	e7c1      	b.n	8005108 <_printf_common+0x4c>
 8005184:	0022      	movs	r2, r4
 8005186:	2301      	movs	r3, #1
 8005188:	9901      	ldr	r1, [sp, #4]
 800518a:	9800      	ldr	r0, [sp, #0]
 800518c:	9f08      	ldr	r7, [sp, #32]
 800518e:	321a      	adds	r2, #26
 8005190:	47b8      	blx	r7
 8005192:	3001      	adds	r0, #1
 8005194:	d0e6      	beq.n	8005164 <_printf_common+0xa8>
 8005196:	3601      	adds	r6, #1
 8005198:	e7d1      	b.n	800513e <_printf_common+0x82>
	...

0800519c <_printf_i>:
 800519c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800519e:	b08b      	sub	sp, #44	@ 0x2c
 80051a0:	9206      	str	r2, [sp, #24]
 80051a2:	000a      	movs	r2, r1
 80051a4:	3243      	adds	r2, #67	@ 0x43
 80051a6:	9307      	str	r3, [sp, #28]
 80051a8:	9005      	str	r0, [sp, #20]
 80051aa:	9203      	str	r2, [sp, #12]
 80051ac:	7e0a      	ldrb	r2, [r1, #24]
 80051ae:	000c      	movs	r4, r1
 80051b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80051b2:	2a78      	cmp	r2, #120	@ 0x78
 80051b4:	d809      	bhi.n	80051ca <_printf_i+0x2e>
 80051b6:	2a62      	cmp	r2, #98	@ 0x62
 80051b8:	d80b      	bhi.n	80051d2 <_printf_i+0x36>
 80051ba:	2a00      	cmp	r2, #0
 80051bc:	d100      	bne.n	80051c0 <_printf_i+0x24>
 80051be:	e0bc      	b.n	800533a <_printf_i+0x19e>
 80051c0:	497b      	ldr	r1, [pc, #492]	@ (80053b0 <_printf_i+0x214>)
 80051c2:	9104      	str	r1, [sp, #16]
 80051c4:	2a58      	cmp	r2, #88	@ 0x58
 80051c6:	d100      	bne.n	80051ca <_printf_i+0x2e>
 80051c8:	e090      	b.n	80052ec <_printf_i+0x150>
 80051ca:	0025      	movs	r5, r4
 80051cc:	3542      	adds	r5, #66	@ 0x42
 80051ce:	702a      	strb	r2, [r5, #0]
 80051d0:	e022      	b.n	8005218 <_printf_i+0x7c>
 80051d2:	0010      	movs	r0, r2
 80051d4:	3863      	subs	r0, #99	@ 0x63
 80051d6:	2815      	cmp	r0, #21
 80051d8:	d8f7      	bhi.n	80051ca <_printf_i+0x2e>
 80051da:	f7fa ff95 	bl	8000108 <__gnu_thumb1_case_shi>
 80051de:	0016      	.short	0x0016
 80051e0:	fff6001f 	.word	0xfff6001f
 80051e4:	fff6fff6 	.word	0xfff6fff6
 80051e8:	001ffff6 	.word	0x001ffff6
 80051ec:	fff6fff6 	.word	0xfff6fff6
 80051f0:	fff6fff6 	.word	0xfff6fff6
 80051f4:	003600a1 	.word	0x003600a1
 80051f8:	fff60080 	.word	0xfff60080
 80051fc:	00b2fff6 	.word	0x00b2fff6
 8005200:	0036fff6 	.word	0x0036fff6
 8005204:	fff6fff6 	.word	0xfff6fff6
 8005208:	0084      	.short	0x0084
 800520a:	0025      	movs	r5, r4
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	3542      	adds	r5, #66	@ 0x42
 8005210:	1d11      	adds	r1, r2, #4
 8005212:	6019      	str	r1, [r3, #0]
 8005214:	6813      	ldr	r3, [r2, #0]
 8005216:	702b      	strb	r3, [r5, #0]
 8005218:	2301      	movs	r3, #1
 800521a:	e0a0      	b.n	800535e <_printf_i+0x1c2>
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	6809      	ldr	r1, [r1, #0]
 8005220:	1d02      	adds	r2, r0, #4
 8005222:	060d      	lsls	r5, r1, #24
 8005224:	d50b      	bpl.n	800523e <_printf_i+0xa2>
 8005226:	6806      	ldr	r6, [r0, #0]
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	2e00      	cmp	r6, #0
 800522c:	da03      	bge.n	8005236 <_printf_i+0x9a>
 800522e:	232d      	movs	r3, #45	@ 0x2d
 8005230:	9a03      	ldr	r2, [sp, #12]
 8005232:	4276      	negs	r6, r6
 8005234:	7013      	strb	r3, [r2, #0]
 8005236:	4b5e      	ldr	r3, [pc, #376]	@ (80053b0 <_printf_i+0x214>)
 8005238:	270a      	movs	r7, #10
 800523a:	9304      	str	r3, [sp, #16]
 800523c:	e018      	b.n	8005270 <_printf_i+0xd4>
 800523e:	6806      	ldr	r6, [r0, #0]
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	0649      	lsls	r1, r1, #25
 8005244:	d5f1      	bpl.n	800522a <_printf_i+0x8e>
 8005246:	b236      	sxth	r6, r6
 8005248:	e7ef      	b.n	800522a <_printf_i+0x8e>
 800524a:	6808      	ldr	r0, [r1, #0]
 800524c:	6819      	ldr	r1, [r3, #0]
 800524e:	c940      	ldmia	r1!, {r6}
 8005250:	0605      	lsls	r5, r0, #24
 8005252:	d402      	bmi.n	800525a <_printf_i+0xbe>
 8005254:	0640      	lsls	r0, r0, #25
 8005256:	d500      	bpl.n	800525a <_printf_i+0xbe>
 8005258:	b2b6      	uxth	r6, r6
 800525a:	6019      	str	r1, [r3, #0]
 800525c:	4b54      	ldr	r3, [pc, #336]	@ (80053b0 <_printf_i+0x214>)
 800525e:	270a      	movs	r7, #10
 8005260:	9304      	str	r3, [sp, #16]
 8005262:	2a6f      	cmp	r2, #111	@ 0x6f
 8005264:	d100      	bne.n	8005268 <_printf_i+0xcc>
 8005266:	3f02      	subs	r7, #2
 8005268:	0023      	movs	r3, r4
 800526a:	2200      	movs	r2, #0
 800526c:	3343      	adds	r3, #67	@ 0x43
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	6863      	ldr	r3, [r4, #4]
 8005272:	60a3      	str	r3, [r4, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	db03      	blt.n	8005280 <_printf_i+0xe4>
 8005278:	2104      	movs	r1, #4
 800527a:	6822      	ldr	r2, [r4, #0]
 800527c:	438a      	bics	r2, r1
 800527e:	6022      	str	r2, [r4, #0]
 8005280:	2e00      	cmp	r6, #0
 8005282:	d102      	bne.n	800528a <_printf_i+0xee>
 8005284:	9d03      	ldr	r5, [sp, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00c      	beq.n	80052a4 <_printf_i+0x108>
 800528a:	9d03      	ldr	r5, [sp, #12]
 800528c:	0030      	movs	r0, r6
 800528e:	0039      	movs	r1, r7
 8005290:	f7fa ffca 	bl	8000228 <__aeabi_uidivmod>
 8005294:	9b04      	ldr	r3, [sp, #16]
 8005296:	3d01      	subs	r5, #1
 8005298:	5c5b      	ldrb	r3, [r3, r1]
 800529a:	702b      	strb	r3, [r5, #0]
 800529c:	0033      	movs	r3, r6
 800529e:	0006      	movs	r6, r0
 80052a0:	429f      	cmp	r7, r3
 80052a2:	d9f3      	bls.n	800528c <_printf_i+0xf0>
 80052a4:	2f08      	cmp	r7, #8
 80052a6:	d109      	bne.n	80052bc <_printf_i+0x120>
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	07db      	lsls	r3, r3, #31
 80052ac:	d506      	bpl.n	80052bc <_printf_i+0x120>
 80052ae:	6862      	ldr	r2, [r4, #4]
 80052b0:	6923      	ldr	r3, [r4, #16]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	dc02      	bgt.n	80052bc <_printf_i+0x120>
 80052b6:	2330      	movs	r3, #48	@ 0x30
 80052b8:	3d01      	subs	r5, #1
 80052ba:	702b      	strb	r3, [r5, #0]
 80052bc:	9b03      	ldr	r3, [sp, #12]
 80052be:	1b5b      	subs	r3, r3, r5
 80052c0:	6123      	str	r3, [r4, #16]
 80052c2:	9b07      	ldr	r3, [sp, #28]
 80052c4:	0021      	movs	r1, r4
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	9805      	ldr	r0, [sp, #20]
 80052ca:	9b06      	ldr	r3, [sp, #24]
 80052cc:	aa09      	add	r2, sp, #36	@ 0x24
 80052ce:	f7ff fef5 	bl	80050bc <_printf_common>
 80052d2:	3001      	adds	r0, #1
 80052d4:	d148      	bne.n	8005368 <_printf_i+0x1cc>
 80052d6:	2001      	movs	r0, #1
 80052d8:	4240      	negs	r0, r0
 80052da:	b00b      	add	sp, #44	@ 0x2c
 80052dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052de:	2220      	movs	r2, #32
 80052e0:	6809      	ldr	r1, [r1, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	6022      	str	r2, [r4, #0]
 80052e6:	2278      	movs	r2, #120	@ 0x78
 80052e8:	4932      	ldr	r1, [pc, #200]	@ (80053b4 <_printf_i+0x218>)
 80052ea:	9104      	str	r1, [sp, #16]
 80052ec:	0021      	movs	r1, r4
 80052ee:	3145      	adds	r1, #69	@ 0x45
 80052f0:	700a      	strb	r2, [r1, #0]
 80052f2:	6819      	ldr	r1, [r3, #0]
 80052f4:	6822      	ldr	r2, [r4, #0]
 80052f6:	c940      	ldmia	r1!, {r6}
 80052f8:	0610      	lsls	r0, r2, #24
 80052fa:	d402      	bmi.n	8005302 <_printf_i+0x166>
 80052fc:	0650      	lsls	r0, r2, #25
 80052fe:	d500      	bpl.n	8005302 <_printf_i+0x166>
 8005300:	b2b6      	uxth	r6, r6
 8005302:	6019      	str	r1, [r3, #0]
 8005304:	07d3      	lsls	r3, r2, #31
 8005306:	d502      	bpl.n	800530e <_printf_i+0x172>
 8005308:	2320      	movs	r3, #32
 800530a:	4313      	orrs	r3, r2
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	2e00      	cmp	r6, #0
 8005310:	d001      	beq.n	8005316 <_printf_i+0x17a>
 8005312:	2710      	movs	r7, #16
 8005314:	e7a8      	b.n	8005268 <_printf_i+0xcc>
 8005316:	2220      	movs	r2, #32
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	4393      	bics	r3, r2
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	e7f8      	b.n	8005312 <_printf_i+0x176>
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	680d      	ldr	r5, [r1, #0]
 8005324:	1d10      	adds	r0, r2, #4
 8005326:	6949      	ldr	r1, [r1, #20]
 8005328:	6018      	str	r0, [r3, #0]
 800532a:	6813      	ldr	r3, [r2, #0]
 800532c:	062e      	lsls	r6, r5, #24
 800532e:	d501      	bpl.n	8005334 <_printf_i+0x198>
 8005330:	6019      	str	r1, [r3, #0]
 8005332:	e002      	b.n	800533a <_printf_i+0x19e>
 8005334:	066d      	lsls	r5, r5, #25
 8005336:	d5fb      	bpl.n	8005330 <_printf_i+0x194>
 8005338:	8019      	strh	r1, [r3, #0]
 800533a:	2300      	movs	r3, #0
 800533c:	9d03      	ldr	r5, [sp, #12]
 800533e:	6123      	str	r3, [r4, #16]
 8005340:	e7bf      	b.n	80052c2 <_printf_i+0x126>
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	1d11      	adds	r1, r2, #4
 8005346:	6019      	str	r1, [r3, #0]
 8005348:	6815      	ldr	r5, [r2, #0]
 800534a:	2100      	movs	r1, #0
 800534c:	0028      	movs	r0, r5
 800534e:	6862      	ldr	r2, [r4, #4]
 8005350:	f000 f996 	bl	8005680 <memchr>
 8005354:	2800      	cmp	r0, #0
 8005356:	d001      	beq.n	800535c <_printf_i+0x1c0>
 8005358:	1b40      	subs	r0, r0, r5
 800535a:	6060      	str	r0, [r4, #4]
 800535c:	6863      	ldr	r3, [r4, #4]
 800535e:	6123      	str	r3, [r4, #16]
 8005360:	2300      	movs	r3, #0
 8005362:	9a03      	ldr	r2, [sp, #12]
 8005364:	7013      	strb	r3, [r2, #0]
 8005366:	e7ac      	b.n	80052c2 <_printf_i+0x126>
 8005368:	002a      	movs	r2, r5
 800536a:	6923      	ldr	r3, [r4, #16]
 800536c:	9906      	ldr	r1, [sp, #24]
 800536e:	9805      	ldr	r0, [sp, #20]
 8005370:	9d07      	ldr	r5, [sp, #28]
 8005372:	47a8      	blx	r5
 8005374:	3001      	adds	r0, #1
 8005376:	d0ae      	beq.n	80052d6 <_printf_i+0x13a>
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	079b      	lsls	r3, r3, #30
 800537c:	d415      	bmi.n	80053aa <_printf_i+0x20e>
 800537e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005380:	68e0      	ldr	r0, [r4, #12]
 8005382:	4298      	cmp	r0, r3
 8005384:	daa9      	bge.n	80052da <_printf_i+0x13e>
 8005386:	0018      	movs	r0, r3
 8005388:	e7a7      	b.n	80052da <_printf_i+0x13e>
 800538a:	0022      	movs	r2, r4
 800538c:	2301      	movs	r3, #1
 800538e:	9906      	ldr	r1, [sp, #24]
 8005390:	9805      	ldr	r0, [sp, #20]
 8005392:	9e07      	ldr	r6, [sp, #28]
 8005394:	3219      	adds	r2, #25
 8005396:	47b0      	blx	r6
 8005398:	3001      	adds	r0, #1
 800539a:	d09c      	beq.n	80052d6 <_printf_i+0x13a>
 800539c:	3501      	adds	r5, #1
 800539e:	68e3      	ldr	r3, [r4, #12]
 80053a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	42ab      	cmp	r3, r5
 80053a6:	dcf0      	bgt.n	800538a <_printf_i+0x1ee>
 80053a8:	e7e9      	b.n	800537e <_printf_i+0x1e2>
 80053aa:	2500      	movs	r5, #0
 80053ac:	e7f7      	b.n	800539e <_printf_i+0x202>
 80053ae:	46c0      	nop			@ (mov r8, r8)
 80053b0:	08005889 	.word	0x08005889
 80053b4:	0800589a 	.word	0x0800589a

080053b8 <__sflush_r>:
 80053b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053ba:	220c      	movs	r2, #12
 80053bc:	5e8b      	ldrsh	r3, [r1, r2]
 80053be:	0005      	movs	r5, r0
 80053c0:	000c      	movs	r4, r1
 80053c2:	071a      	lsls	r2, r3, #28
 80053c4:	d456      	bmi.n	8005474 <__sflush_r+0xbc>
 80053c6:	684a      	ldr	r2, [r1, #4]
 80053c8:	2a00      	cmp	r2, #0
 80053ca:	dc02      	bgt.n	80053d2 <__sflush_r+0x1a>
 80053cc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80053ce:	2a00      	cmp	r2, #0
 80053d0:	dd4e      	ble.n	8005470 <__sflush_r+0xb8>
 80053d2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80053d4:	2f00      	cmp	r7, #0
 80053d6:	d04b      	beq.n	8005470 <__sflush_r+0xb8>
 80053d8:	2200      	movs	r2, #0
 80053da:	2080      	movs	r0, #128	@ 0x80
 80053dc:	682e      	ldr	r6, [r5, #0]
 80053de:	602a      	str	r2, [r5, #0]
 80053e0:	001a      	movs	r2, r3
 80053e2:	0140      	lsls	r0, r0, #5
 80053e4:	6a21      	ldr	r1, [r4, #32]
 80053e6:	4002      	ands	r2, r0
 80053e8:	4203      	tst	r3, r0
 80053ea:	d033      	beq.n	8005454 <__sflush_r+0x9c>
 80053ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	075b      	lsls	r3, r3, #29
 80053f2:	d506      	bpl.n	8005402 <__sflush_r+0x4a>
 80053f4:	6863      	ldr	r3, [r4, #4]
 80053f6:	1ad2      	subs	r2, r2, r3
 80053f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <__sflush_r+0x4a>
 80053fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005400:	1ad2      	subs	r2, r2, r3
 8005402:	2300      	movs	r3, #0
 8005404:	0028      	movs	r0, r5
 8005406:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005408:	6a21      	ldr	r1, [r4, #32]
 800540a:	47b8      	blx	r7
 800540c:	89a2      	ldrh	r2, [r4, #12]
 800540e:	1c43      	adds	r3, r0, #1
 8005410:	d106      	bne.n	8005420 <__sflush_r+0x68>
 8005412:	6829      	ldr	r1, [r5, #0]
 8005414:	291d      	cmp	r1, #29
 8005416:	d846      	bhi.n	80054a6 <__sflush_r+0xee>
 8005418:	4b29      	ldr	r3, [pc, #164]	@ (80054c0 <__sflush_r+0x108>)
 800541a:	410b      	asrs	r3, r1
 800541c:	07db      	lsls	r3, r3, #31
 800541e:	d442      	bmi.n	80054a6 <__sflush_r+0xee>
 8005420:	2300      	movs	r3, #0
 8005422:	6063      	str	r3, [r4, #4]
 8005424:	6923      	ldr	r3, [r4, #16]
 8005426:	6023      	str	r3, [r4, #0]
 8005428:	04d2      	lsls	r2, r2, #19
 800542a:	d505      	bpl.n	8005438 <__sflush_r+0x80>
 800542c:	1c43      	adds	r3, r0, #1
 800542e:	d102      	bne.n	8005436 <__sflush_r+0x7e>
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d100      	bne.n	8005438 <__sflush_r+0x80>
 8005436:	6560      	str	r0, [r4, #84]	@ 0x54
 8005438:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800543a:	602e      	str	r6, [r5, #0]
 800543c:	2900      	cmp	r1, #0
 800543e:	d017      	beq.n	8005470 <__sflush_r+0xb8>
 8005440:	0023      	movs	r3, r4
 8005442:	3344      	adds	r3, #68	@ 0x44
 8005444:	4299      	cmp	r1, r3
 8005446:	d002      	beq.n	800544e <__sflush_r+0x96>
 8005448:	0028      	movs	r0, r5
 800544a:	f7ff fbf7 	bl	8004c3c <_free_r>
 800544e:	2300      	movs	r3, #0
 8005450:	6363      	str	r3, [r4, #52]	@ 0x34
 8005452:	e00d      	b.n	8005470 <__sflush_r+0xb8>
 8005454:	2301      	movs	r3, #1
 8005456:	0028      	movs	r0, r5
 8005458:	47b8      	blx	r7
 800545a:	0002      	movs	r2, r0
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d1c6      	bne.n	80053ee <__sflush_r+0x36>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0c3      	beq.n	80053ee <__sflush_r+0x36>
 8005466:	2b1d      	cmp	r3, #29
 8005468:	d001      	beq.n	800546e <__sflush_r+0xb6>
 800546a:	2b16      	cmp	r3, #22
 800546c:	d11a      	bne.n	80054a4 <__sflush_r+0xec>
 800546e:	602e      	str	r6, [r5, #0]
 8005470:	2000      	movs	r0, #0
 8005472:	e01e      	b.n	80054b2 <__sflush_r+0xfa>
 8005474:	690e      	ldr	r6, [r1, #16]
 8005476:	2e00      	cmp	r6, #0
 8005478:	d0fa      	beq.n	8005470 <__sflush_r+0xb8>
 800547a:	680f      	ldr	r7, [r1, #0]
 800547c:	600e      	str	r6, [r1, #0]
 800547e:	1bba      	subs	r2, r7, r6
 8005480:	9201      	str	r2, [sp, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	079b      	lsls	r3, r3, #30
 8005486:	d100      	bne.n	800548a <__sflush_r+0xd2>
 8005488:	694a      	ldr	r2, [r1, #20]
 800548a:	60a2      	str	r2, [r4, #8]
 800548c:	9b01      	ldr	r3, [sp, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	ddee      	ble.n	8005470 <__sflush_r+0xb8>
 8005492:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005494:	0032      	movs	r2, r6
 8005496:	001f      	movs	r7, r3
 8005498:	0028      	movs	r0, r5
 800549a:	9b01      	ldr	r3, [sp, #4]
 800549c:	6a21      	ldr	r1, [r4, #32]
 800549e:	47b8      	blx	r7
 80054a0:	2800      	cmp	r0, #0
 80054a2:	dc07      	bgt.n	80054b4 <__sflush_r+0xfc>
 80054a4:	89a2      	ldrh	r2, [r4, #12]
 80054a6:	2340      	movs	r3, #64	@ 0x40
 80054a8:	2001      	movs	r0, #1
 80054aa:	4313      	orrs	r3, r2
 80054ac:	b21b      	sxth	r3, r3
 80054ae:	81a3      	strh	r3, [r4, #12]
 80054b0:	4240      	negs	r0, r0
 80054b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054b4:	9b01      	ldr	r3, [sp, #4]
 80054b6:	1836      	adds	r6, r6, r0
 80054b8:	1a1b      	subs	r3, r3, r0
 80054ba:	9301      	str	r3, [sp, #4]
 80054bc:	e7e6      	b.n	800548c <__sflush_r+0xd4>
 80054be:	46c0      	nop			@ (mov r8, r8)
 80054c0:	dfbffffe 	.word	0xdfbffffe

080054c4 <_fflush_r>:
 80054c4:	690b      	ldr	r3, [r1, #16]
 80054c6:	b570      	push	{r4, r5, r6, lr}
 80054c8:	0005      	movs	r5, r0
 80054ca:	000c      	movs	r4, r1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <_fflush_r+0x12>
 80054d0:	2500      	movs	r5, #0
 80054d2:	0028      	movs	r0, r5
 80054d4:	bd70      	pop	{r4, r5, r6, pc}
 80054d6:	2800      	cmp	r0, #0
 80054d8:	d004      	beq.n	80054e4 <_fflush_r+0x20>
 80054da:	6a03      	ldr	r3, [r0, #32]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <_fflush_r+0x20>
 80054e0:	f7ff fa98 	bl	8004a14 <__sinit>
 80054e4:	220c      	movs	r2, #12
 80054e6:	5ea3      	ldrsh	r3, [r4, r2]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f1      	beq.n	80054d0 <_fflush_r+0xc>
 80054ec:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054ee:	07d2      	lsls	r2, r2, #31
 80054f0:	d404      	bmi.n	80054fc <_fflush_r+0x38>
 80054f2:	059b      	lsls	r3, r3, #22
 80054f4:	d402      	bmi.n	80054fc <_fflush_r+0x38>
 80054f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054f8:	f7ff fb9d 	bl	8004c36 <__retarget_lock_acquire_recursive>
 80054fc:	0028      	movs	r0, r5
 80054fe:	0021      	movs	r1, r4
 8005500:	f7ff ff5a 	bl	80053b8 <__sflush_r>
 8005504:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005506:	0005      	movs	r5, r0
 8005508:	07db      	lsls	r3, r3, #31
 800550a:	d4e2      	bmi.n	80054d2 <_fflush_r+0xe>
 800550c:	89a3      	ldrh	r3, [r4, #12]
 800550e:	059b      	lsls	r3, r3, #22
 8005510:	d4df      	bmi.n	80054d2 <_fflush_r+0xe>
 8005512:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005514:	f7ff fb90 	bl	8004c38 <__retarget_lock_release_recursive>
 8005518:	e7db      	b.n	80054d2 <_fflush_r+0xe>

0800551a <__swbuf_r>:
 800551a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551c:	0006      	movs	r6, r0
 800551e:	000d      	movs	r5, r1
 8005520:	0014      	movs	r4, r2
 8005522:	2800      	cmp	r0, #0
 8005524:	d004      	beq.n	8005530 <__swbuf_r+0x16>
 8005526:	6a03      	ldr	r3, [r0, #32]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <__swbuf_r+0x16>
 800552c:	f7ff fa72 	bl	8004a14 <__sinit>
 8005530:	69a3      	ldr	r3, [r4, #24]
 8005532:	60a3      	str	r3, [r4, #8]
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	071b      	lsls	r3, r3, #28
 8005538:	d502      	bpl.n	8005540 <__swbuf_r+0x26>
 800553a:	6923      	ldr	r3, [r4, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d109      	bne.n	8005554 <__swbuf_r+0x3a>
 8005540:	0021      	movs	r1, r4
 8005542:	0030      	movs	r0, r6
 8005544:	f000 f82c 	bl	80055a0 <__swsetup_r>
 8005548:	2800      	cmp	r0, #0
 800554a:	d003      	beq.n	8005554 <__swbuf_r+0x3a>
 800554c:	2501      	movs	r5, #1
 800554e:	426d      	negs	r5, r5
 8005550:	0028      	movs	r0, r5
 8005552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005554:	6923      	ldr	r3, [r4, #16]
 8005556:	6820      	ldr	r0, [r4, #0]
 8005558:	b2ef      	uxtb	r7, r5
 800555a:	1ac0      	subs	r0, r0, r3
 800555c:	6963      	ldr	r3, [r4, #20]
 800555e:	b2ed      	uxtb	r5, r5
 8005560:	4283      	cmp	r3, r0
 8005562:	dc05      	bgt.n	8005570 <__swbuf_r+0x56>
 8005564:	0021      	movs	r1, r4
 8005566:	0030      	movs	r0, r6
 8005568:	f7ff ffac 	bl	80054c4 <_fflush_r>
 800556c:	2800      	cmp	r0, #0
 800556e:	d1ed      	bne.n	800554c <__swbuf_r+0x32>
 8005570:	68a3      	ldr	r3, [r4, #8]
 8005572:	3001      	adds	r0, #1
 8005574:	3b01      	subs	r3, #1
 8005576:	60a3      	str	r3, [r4, #8]
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	6022      	str	r2, [r4, #0]
 800557e:	701f      	strb	r7, [r3, #0]
 8005580:	6963      	ldr	r3, [r4, #20]
 8005582:	4283      	cmp	r3, r0
 8005584:	d004      	beq.n	8005590 <__swbuf_r+0x76>
 8005586:	89a3      	ldrh	r3, [r4, #12]
 8005588:	07db      	lsls	r3, r3, #31
 800558a:	d5e1      	bpl.n	8005550 <__swbuf_r+0x36>
 800558c:	2d0a      	cmp	r5, #10
 800558e:	d1df      	bne.n	8005550 <__swbuf_r+0x36>
 8005590:	0021      	movs	r1, r4
 8005592:	0030      	movs	r0, r6
 8005594:	f7ff ff96 	bl	80054c4 <_fflush_r>
 8005598:	2800      	cmp	r0, #0
 800559a:	d0d9      	beq.n	8005550 <__swbuf_r+0x36>
 800559c:	e7d6      	b.n	800554c <__swbuf_r+0x32>
	...

080055a0 <__swsetup_r>:
 80055a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005658 <__swsetup_r+0xb8>)
 80055a2:	b570      	push	{r4, r5, r6, lr}
 80055a4:	0005      	movs	r5, r0
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	000c      	movs	r4, r1
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d004      	beq.n	80055b8 <__swsetup_r+0x18>
 80055ae:	6a03      	ldr	r3, [r0, #32]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <__swsetup_r+0x18>
 80055b4:	f7ff fa2e 	bl	8004a14 <__sinit>
 80055b8:	230c      	movs	r3, #12
 80055ba:	5ee2      	ldrsh	r2, [r4, r3]
 80055bc:	0713      	lsls	r3, r2, #28
 80055be:	d423      	bmi.n	8005608 <__swsetup_r+0x68>
 80055c0:	06d3      	lsls	r3, r2, #27
 80055c2:	d407      	bmi.n	80055d4 <__swsetup_r+0x34>
 80055c4:	2309      	movs	r3, #9
 80055c6:	602b      	str	r3, [r5, #0]
 80055c8:	2340      	movs	r3, #64	@ 0x40
 80055ca:	2001      	movs	r0, #1
 80055cc:	4313      	orrs	r3, r2
 80055ce:	81a3      	strh	r3, [r4, #12]
 80055d0:	4240      	negs	r0, r0
 80055d2:	e03a      	b.n	800564a <__swsetup_r+0xaa>
 80055d4:	0752      	lsls	r2, r2, #29
 80055d6:	d513      	bpl.n	8005600 <__swsetup_r+0x60>
 80055d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055da:	2900      	cmp	r1, #0
 80055dc:	d008      	beq.n	80055f0 <__swsetup_r+0x50>
 80055de:	0023      	movs	r3, r4
 80055e0:	3344      	adds	r3, #68	@ 0x44
 80055e2:	4299      	cmp	r1, r3
 80055e4:	d002      	beq.n	80055ec <__swsetup_r+0x4c>
 80055e6:	0028      	movs	r0, r5
 80055e8:	f7ff fb28 	bl	8004c3c <_free_r>
 80055ec:	2300      	movs	r3, #0
 80055ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80055f0:	2224      	movs	r2, #36	@ 0x24
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	4393      	bics	r3, r2
 80055f6:	81a3      	strh	r3, [r4, #12]
 80055f8:	2300      	movs	r3, #0
 80055fa:	6063      	str	r3, [r4, #4]
 80055fc:	6923      	ldr	r3, [r4, #16]
 80055fe:	6023      	str	r3, [r4, #0]
 8005600:	2308      	movs	r3, #8
 8005602:	89a2      	ldrh	r2, [r4, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	81a3      	strh	r3, [r4, #12]
 8005608:	6923      	ldr	r3, [r4, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10b      	bne.n	8005626 <__swsetup_r+0x86>
 800560e:	21a0      	movs	r1, #160	@ 0xa0
 8005610:	2280      	movs	r2, #128	@ 0x80
 8005612:	89a3      	ldrh	r3, [r4, #12]
 8005614:	0089      	lsls	r1, r1, #2
 8005616:	0092      	lsls	r2, r2, #2
 8005618:	400b      	ands	r3, r1
 800561a:	4293      	cmp	r3, r2
 800561c:	d003      	beq.n	8005626 <__swsetup_r+0x86>
 800561e:	0021      	movs	r1, r4
 8005620:	0028      	movs	r0, r5
 8005622:	f000 f863 	bl	80056ec <__smakebuf_r>
 8005626:	230c      	movs	r3, #12
 8005628:	5ee2      	ldrsh	r2, [r4, r3]
 800562a:	2101      	movs	r1, #1
 800562c:	0013      	movs	r3, r2
 800562e:	400b      	ands	r3, r1
 8005630:	420a      	tst	r2, r1
 8005632:	d00b      	beq.n	800564c <__swsetup_r+0xac>
 8005634:	2300      	movs	r3, #0
 8005636:	60a3      	str	r3, [r4, #8]
 8005638:	6963      	ldr	r3, [r4, #20]
 800563a:	425b      	negs	r3, r3
 800563c:	61a3      	str	r3, [r4, #24]
 800563e:	2000      	movs	r0, #0
 8005640:	6923      	ldr	r3, [r4, #16]
 8005642:	4283      	cmp	r3, r0
 8005644:	d101      	bne.n	800564a <__swsetup_r+0xaa>
 8005646:	0613      	lsls	r3, r2, #24
 8005648:	d4be      	bmi.n	80055c8 <__swsetup_r+0x28>
 800564a:	bd70      	pop	{r4, r5, r6, pc}
 800564c:	0791      	lsls	r1, r2, #30
 800564e:	d400      	bmi.n	8005652 <__swsetup_r+0xb2>
 8005650:	6963      	ldr	r3, [r4, #20]
 8005652:	60a3      	str	r3, [r4, #8]
 8005654:	e7f3      	b.n	800563e <__swsetup_r+0x9e>
 8005656:	46c0      	nop			@ (mov r8, r8)
 8005658:	20000018 	.word	0x20000018

0800565c <_sbrk_r>:
 800565c:	2300      	movs	r3, #0
 800565e:	b570      	push	{r4, r5, r6, lr}
 8005660:	4d06      	ldr	r5, [pc, #24]	@ (800567c <_sbrk_r+0x20>)
 8005662:	0004      	movs	r4, r0
 8005664:	0008      	movs	r0, r1
 8005666:	602b      	str	r3, [r5, #0]
 8005668:	f7fb fe5a 	bl	8001320 <_sbrk>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d103      	bne.n	8005678 <_sbrk_r+0x1c>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d000      	beq.n	8005678 <_sbrk_r+0x1c>
 8005676:	6023      	str	r3, [r4, #0]
 8005678:	bd70      	pop	{r4, r5, r6, pc}
 800567a:	46c0      	nop			@ (mov r8, r8)
 800567c:	20000330 	.word	0x20000330

08005680 <memchr>:
 8005680:	b2c9      	uxtb	r1, r1
 8005682:	1882      	adds	r2, r0, r2
 8005684:	4290      	cmp	r0, r2
 8005686:	d101      	bne.n	800568c <memchr+0xc>
 8005688:	2000      	movs	r0, #0
 800568a:	4770      	bx	lr
 800568c:	7803      	ldrb	r3, [r0, #0]
 800568e:	428b      	cmp	r3, r1
 8005690:	d0fb      	beq.n	800568a <memchr+0xa>
 8005692:	3001      	adds	r0, #1
 8005694:	e7f6      	b.n	8005684 <memchr+0x4>
	...

08005698 <__swhatbuf_r>:
 8005698:	b570      	push	{r4, r5, r6, lr}
 800569a:	000e      	movs	r6, r1
 800569c:	001d      	movs	r5, r3
 800569e:	230e      	movs	r3, #14
 80056a0:	5ec9      	ldrsh	r1, [r1, r3]
 80056a2:	0014      	movs	r4, r2
 80056a4:	b096      	sub	sp, #88	@ 0x58
 80056a6:	2900      	cmp	r1, #0
 80056a8:	da0c      	bge.n	80056c4 <__swhatbuf_r+0x2c>
 80056aa:	89b2      	ldrh	r2, [r6, #12]
 80056ac:	2380      	movs	r3, #128	@ 0x80
 80056ae:	0011      	movs	r1, r2
 80056b0:	4019      	ands	r1, r3
 80056b2:	421a      	tst	r2, r3
 80056b4:	d114      	bne.n	80056e0 <__swhatbuf_r+0x48>
 80056b6:	2380      	movs	r3, #128	@ 0x80
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	2000      	movs	r0, #0
 80056bc:	6029      	str	r1, [r5, #0]
 80056be:	6023      	str	r3, [r4, #0]
 80056c0:	b016      	add	sp, #88	@ 0x58
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	466a      	mov	r2, sp
 80056c6:	f000 f853 	bl	8005770 <_fstat_r>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	dbed      	blt.n	80056aa <__swhatbuf_r+0x12>
 80056ce:	23f0      	movs	r3, #240	@ 0xf0
 80056d0:	9901      	ldr	r1, [sp, #4]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	4019      	ands	r1, r3
 80056d6:	4b04      	ldr	r3, [pc, #16]	@ (80056e8 <__swhatbuf_r+0x50>)
 80056d8:	18c9      	adds	r1, r1, r3
 80056da:	424b      	negs	r3, r1
 80056dc:	4159      	adcs	r1, r3
 80056de:	e7ea      	b.n	80056b6 <__swhatbuf_r+0x1e>
 80056e0:	2100      	movs	r1, #0
 80056e2:	2340      	movs	r3, #64	@ 0x40
 80056e4:	e7e9      	b.n	80056ba <__swhatbuf_r+0x22>
 80056e6:	46c0      	nop			@ (mov r8, r8)
 80056e8:	ffffe000 	.word	0xffffe000

080056ec <__smakebuf_r>:
 80056ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ee:	2602      	movs	r6, #2
 80056f0:	898b      	ldrh	r3, [r1, #12]
 80056f2:	0005      	movs	r5, r0
 80056f4:	000c      	movs	r4, r1
 80056f6:	b085      	sub	sp, #20
 80056f8:	4233      	tst	r3, r6
 80056fa:	d007      	beq.n	800570c <__smakebuf_r+0x20>
 80056fc:	0023      	movs	r3, r4
 80056fe:	3347      	adds	r3, #71	@ 0x47
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	6123      	str	r3, [r4, #16]
 8005704:	2301      	movs	r3, #1
 8005706:	6163      	str	r3, [r4, #20]
 8005708:	b005      	add	sp, #20
 800570a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570c:	ab03      	add	r3, sp, #12
 800570e:	aa02      	add	r2, sp, #8
 8005710:	f7ff ffc2 	bl	8005698 <__swhatbuf_r>
 8005714:	9f02      	ldr	r7, [sp, #8]
 8005716:	9001      	str	r0, [sp, #4]
 8005718:	0039      	movs	r1, r7
 800571a:	0028      	movs	r0, r5
 800571c:	f7ff fafa 	bl	8004d14 <_malloc_r>
 8005720:	2800      	cmp	r0, #0
 8005722:	d108      	bne.n	8005736 <__smakebuf_r+0x4a>
 8005724:	220c      	movs	r2, #12
 8005726:	5ea3      	ldrsh	r3, [r4, r2]
 8005728:	059a      	lsls	r2, r3, #22
 800572a:	d4ed      	bmi.n	8005708 <__smakebuf_r+0x1c>
 800572c:	2203      	movs	r2, #3
 800572e:	4393      	bics	r3, r2
 8005730:	431e      	orrs	r6, r3
 8005732:	81a6      	strh	r6, [r4, #12]
 8005734:	e7e2      	b.n	80056fc <__smakebuf_r+0x10>
 8005736:	2380      	movs	r3, #128	@ 0x80
 8005738:	89a2      	ldrh	r2, [r4, #12]
 800573a:	6020      	str	r0, [r4, #0]
 800573c:	4313      	orrs	r3, r2
 800573e:	81a3      	strh	r3, [r4, #12]
 8005740:	9b03      	ldr	r3, [sp, #12]
 8005742:	6120      	str	r0, [r4, #16]
 8005744:	6167      	str	r7, [r4, #20]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00c      	beq.n	8005764 <__smakebuf_r+0x78>
 800574a:	0028      	movs	r0, r5
 800574c:	230e      	movs	r3, #14
 800574e:	5ee1      	ldrsh	r1, [r4, r3]
 8005750:	f000 f820 	bl	8005794 <_isatty_r>
 8005754:	2800      	cmp	r0, #0
 8005756:	d005      	beq.n	8005764 <__smakebuf_r+0x78>
 8005758:	2303      	movs	r3, #3
 800575a:	89a2      	ldrh	r2, [r4, #12]
 800575c:	439a      	bics	r2, r3
 800575e:	3b02      	subs	r3, #2
 8005760:	4313      	orrs	r3, r2
 8005762:	81a3      	strh	r3, [r4, #12]
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	9a01      	ldr	r2, [sp, #4]
 8005768:	4313      	orrs	r3, r2
 800576a:	81a3      	strh	r3, [r4, #12]
 800576c:	e7cc      	b.n	8005708 <__smakebuf_r+0x1c>
	...

08005770 <_fstat_r>:
 8005770:	2300      	movs	r3, #0
 8005772:	b570      	push	{r4, r5, r6, lr}
 8005774:	4d06      	ldr	r5, [pc, #24]	@ (8005790 <_fstat_r+0x20>)
 8005776:	0004      	movs	r4, r0
 8005778:	0008      	movs	r0, r1
 800577a:	0011      	movs	r1, r2
 800577c:	602b      	str	r3, [r5, #0]
 800577e:	f7fb fdac 	bl	80012da <_fstat>
 8005782:	1c43      	adds	r3, r0, #1
 8005784:	d103      	bne.n	800578e <_fstat_r+0x1e>
 8005786:	682b      	ldr	r3, [r5, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d000      	beq.n	800578e <_fstat_r+0x1e>
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	bd70      	pop	{r4, r5, r6, pc}
 8005790:	20000330 	.word	0x20000330

08005794 <_isatty_r>:
 8005794:	2300      	movs	r3, #0
 8005796:	b570      	push	{r4, r5, r6, lr}
 8005798:	4d06      	ldr	r5, [pc, #24]	@ (80057b4 <_isatty_r+0x20>)
 800579a:	0004      	movs	r4, r0
 800579c:	0008      	movs	r0, r1
 800579e:	602b      	str	r3, [r5, #0]
 80057a0:	f7fb fda9 	bl	80012f6 <_isatty>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d103      	bne.n	80057b0 <_isatty_r+0x1c>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d000      	beq.n	80057b0 <_isatty_r+0x1c>
 80057ae:	6023      	str	r3, [r4, #0]
 80057b0:	bd70      	pop	{r4, r5, r6, pc}
 80057b2:	46c0      	nop			@ (mov r8, r8)
 80057b4:	20000330 	.word	0x20000330

080057b8 <_init>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	46c0      	nop			@ (mov r8, r8)
 80057bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057be:	bc08      	pop	{r3}
 80057c0:	469e      	mov	lr, r3
 80057c2:	4770      	bx	lr

080057c4 <_fini>:
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	46c0      	nop			@ (mov r8, r8)
 80057c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ca:	bc08      	pop	{r3}
 80057cc:	469e      	mov	lr, r3
 80057ce:	4770      	bx	lr
