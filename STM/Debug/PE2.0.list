
PE2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000582c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080058ec  080058ec  000068ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059e4  080059e4  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080059e4  080059e4  000069e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059ec  080059ec  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059ec  080059ec  000069ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059f0  080059f0  000069f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080059f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000068  08005a5c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08005a5c  00007340  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db47  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f92  00000000  00000000  00014bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00016b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a07  00000000  00000000  00017858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015af2  00000000  00000000  0001825f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f086  00000000  00000000  0002dd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084e5c  00000000  00000000  0003cdd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1c33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035dc  00000000  00000000  000c1c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000c5254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080058d4 	.word	0x080058d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080058d4 	.word	0x080058d4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <_write>:
void driveNormal(uint32_t []);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	e018      	b.n	8000500 <_write+0x44>
		if(ptr[i]=='\n'){
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	68ba      	ldr	r2, [r7, #8]
 80004d2:	18d3      	adds	r3, r2, r3
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b0a      	cmp	r3, #10
 80004d8:	d106      	bne.n	80004e8 <_write+0x2c>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
 80004da:	2301      	movs	r3, #1
 80004dc:	425b      	negs	r3, r3
 80004de:	490d      	ldr	r1, [pc, #52]	@ (8000514 <_write+0x58>)
 80004e0:	480d      	ldr	r0, [pc, #52]	@ (8000518 <_write+0x5c>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	f003 fd46 	bl	8003f74 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)&ptr[i], 1, HAL_MAX_DELAY);
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	68ba      	ldr	r2, [r7, #8]
 80004ec:	18d1      	adds	r1, r2, r3
 80004ee:	2301      	movs	r3, #1
 80004f0:	425b      	negs	r3, r3
 80004f2:	4809      	ldr	r0, [pc, #36]	@ (8000518 <_write+0x5c>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	f003 fd3d 	bl	8003f74 <HAL_UART_Transmit>
	for(int i = 0; i < len; i++){
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	3301      	adds	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	697a      	ldr	r2, [r7, #20]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	429a      	cmp	r2, r3
 8000506:	dbe2      	blt.n	80004ce <_write+0x12>
	}
    return len;
 8000508:	687b      	ldr	r3, [r7, #4]
}
 800050a:	0018      	movs	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	b006      	add	sp, #24
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	080058ec 	.word	0x080058ec
 8000518:	20000160 	.word	0x20000160

0800051c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(PIN_GPIO_Port, PIN_Pin);
	sample = !HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin); //MSB eerst
 8000524:	2380      	movs	r3, #128	@ 0x80
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	4a1d      	ldr	r2, [pc, #116]	@ (80005a0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800052a:	0019      	movs	r1, r3
 800052c:	0010      	movs	r0, r2
 800052e:	f001 fe6b 	bl	8002208 <HAL_GPIO_ReadPin>
 8000532:	0003      	movs	r3, r0
 8000534:	425a      	negs	r2, r3
 8000536:	4153      	adcs	r3, r2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	001a      	movs	r2, r3
 800053c:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800053e:	701a      	strb	r2, [r3, #0]
	data = (data << 1) | sample; //actief lage pin => bit toggelen
 8000540:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	b25a      	sxtb	r2, r3
 8000548:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	b25b      	sxtb	r3, r3
 800054e:	4313      	orrs	r3, r2
 8000550:	b25b      	sxtb	r3, r3
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000556:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim6);
 8000558:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x90>)
 800055a:	0018      	movs	r0, r3
 800055c:	f002 feac 	bl	80032b8 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000560:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2200      	movs	r2, #0
 8000566:	625a      	str	r2, [r3, #36]	@ 0x24
	if ((data == 0xa4) || (data == 0xa8) || (data == 0xac))
 8000568:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2ba4      	cmp	r3, #164	@ 0xa4
 800056e:	d007      	beq.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x64>
 8000570:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2ba8      	cmp	r3, #168	@ 0xa8
 8000576:	d003      	beq.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x64>
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2bac      	cmp	r3, #172	@ 0xac
 800057e:	d103      	bne.n	8000588 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		data_ready = data;
 8000580:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000586:	701a      	strb	r2, [r3, #0]
	}
	if (data == 0xa1)
 8000588:	4b07      	ldr	r3, [pc, #28]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2ba1      	cmp	r3, #161	@ 0xa1
 800058e:	d103      	bne.n	8000598 <HAL_TIM_PeriodElapsedCallback+0x7c>
	{
		data_beacon = data;
 8000590:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000596:	701a      	strb	r2, [r3, #0]
	}
}
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	b002      	add	sp, #8
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	50000400 	.word	0x50000400
 80005a4:	200001e8 	.word	0x200001e8
 80005a8:	200001e9 	.word	0x200001e9
 80005ac:	20000120 	.word	0x20000120
 80005b0:	200001ea 	.word	0x200001ea
 80005b4:	200001eb 	.word	0x200001eb

080005b8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t IR_EXTI_IRQn)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	0002      	movs	r2, r0
 80005c0:	1dbb      	adds	r3, r7, #6
 80005c2:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 80005c4:	4b03      	ldr	r3, [pc, #12]	@ (80005d4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f002 fe2a 	bl	8003220 <HAL_TIM_Base_Start_IT>
}
 80005cc:	46c0      	nop			@ (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b002      	add	sp, #8
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000120 	.word	0x20000120

080005d8 <readAdc>:
void readAdc(uint32_t result[])
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80005e0:	2508      	movs	r5, #8
 80005e2:	197b      	adds	r3, r7, r5
 80005e4:	0018      	movs	r0, r3
 80005e6:	2308      	movs	r3, #8
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f004 fb30 	bl	8004c50 <memset>

	sConfig.Channel = ADC_CHANNEL_0;
 80005f0:	197b      	adds	r3, r7, r5
 80005f2:	2201      	movs	r2, #1
 80005f4:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80005f6:	197a      	adds	r2, r7, r5
 80005f8:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <readAdc+0xd4>)
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 fa87 	bl	8001b10 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc);
 8000602:	4b2a      	ldr	r3, [pc, #168]	@ (80006ac <readAdc+0xd4>)
 8000604:	0018      	movs	r0, r3
 8000606:	f001 f987 	bl	8001918 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1);
 800060a:	4b28      	ldr	r3, [pc, #160]	@ (80006ac <readAdc+0xd4>)
 800060c:	2101      	movs	r1, #1
 800060e:	0018      	movs	r0, r3
 8000610:	f001 f9d6 	bl	80019c0 <HAL_ADC_PollForConversion>
	result[0] = HAL_ADC_GetValue(&hadc);
 8000614:	4b25      	ldr	r3, [pc, #148]	@ (80006ac <readAdc+0xd4>)
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fa6e 	bl	8001af8 <HAL_ADC_GetValue>
 800061c:	0002      	movs	r2, r0
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	601a      	str	r2, [r3, #0]

	sConfig.Channel = ADC_CHANNEL_1;
 8000622:	197b      	adds	r3, r7, r5
 8000624:	4a22      	ldr	r2, [pc, #136]	@ (80006b0 <readAdc+0xd8>)
 8000626:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000628:	197a      	adds	r2, r7, r5
 800062a:	4b20      	ldr	r3, [pc, #128]	@ (80006ac <readAdc+0xd4>)
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f001 fa6e 	bl	8001b10 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc);
 8000634:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <readAdc+0xd4>)
 8000636:	0018      	movs	r0, r3
 8000638:	f001 f96e 	bl	8001918 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1);
 800063c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <readAdc+0xd4>)
 800063e:	2101      	movs	r1, #1
 8000640:	0018      	movs	r0, r3
 8000642:	f001 f9bd 	bl	80019c0 <HAL_ADC_PollForConversion>
	result[2] = HAL_ADC_GetValue(&hadc);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3308      	adds	r3, #8
 800064a:	001c      	movs	r4, r3
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <readAdc+0xd4>)
 800064e:	0018      	movs	r0, r3
 8000650:	f001 fa52 	bl	8001af8 <HAL_ADC_GetValue>
 8000654:	0003      	movs	r3, r0
 8000656:	6023      	str	r3, [r4, #0]

	sConfig.Channel = ADC_CHANNEL_2;
 8000658:	197b      	adds	r3, r7, r5
 800065a:	4a16      	ldr	r2, [pc, #88]	@ (80006b4 <readAdc+0xdc>)
 800065c:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800065e:	197a      	adds	r2, r7, r5
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <readAdc+0xd4>)
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fa53 	bl	8001b10 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc);
 800066a:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <readAdc+0xd4>)
 800066c:	0018      	movs	r0, r3
 800066e:	f001 f953 	bl	8001918 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1);
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <readAdc+0xd4>)
 8000674:	2101      	movs	r1, #1
 8000676:	0018      	movs	r0, r3
 8000678:	f001 f9a2 	bl	80019c0 <HAL_ADC_PollForConversion>
	result[1] = HAL_ADC_GetValue(&hadc);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	1d1c      	adds	r4, r3, #4
 8000680:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <readAdc+0xd4>)
 8000682:	0018      	movs	r0, r3
 8000684:	f001 fa38 	bl	8001af8 <HAL_ADC_GetValue>
 8000688:	0003      	movs	r3, r0
 800068a:	6023      	str	r3, [r4, #0]

	printf("RECHTS: %ld, MIDDEN: %ld, LINKS: %ld\n", result[0], result[2], result[1]);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6819      	ldr	r1, [r3, #0]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3308      	adds	r3, #8
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3304      	adds	r3, #4
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4806      	ldr	r0, [pc, #24]	@ (80006b8 <readAdc+0xe0>)
 800069e:	f004 fa7b 	bl	8004b98 <iprintf>
}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b004      	add	sp, #16
 80006a8:	bdb0      	pop	{r4, r5, r7, pc}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	20000084 	.word	0x20000084
 80006b0:	04000002 	.word	0x04000002
 80006b4:	08000004 	.word	0x08000004
 80006b8:	080058f0 	.word	0x080058f0

080006bc <driveDock>:
uint8_t driveDock(uint8_t state_dock, uint32_t adc_values[], uint8_t *drive_dock, uint8_t *detect_dock)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60b9      	str	r1, [r7, #8]
 80006c4:	607a      	str	r2, [r7, #4]
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	210f      	movs	r1, #15
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	1c02      	adds	r2, r0, #0
 80006ce:	701a      	strb	r2, [r3, #0]
	switch (state_dock)
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d068      	beq.n	80007aa <driveDock+0xee>
 80006d8:	dd00      	ble.n	80006dc <driveDock+0x20>
 80006da:	e0a6      	b.n	800082a <driveDock+0x16e>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d002      	beq.n	80006e6 <driveDock+0x2a>
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d024      	beq.n	800072e <driveDock+0x72>
 80006e4:	e0a1      	b.n	800082a <driveDock+0x16e>
	{
	case 0:
		htim2.Instance->CCR1 = DOCK_SPEED; //Duty Cycle op 50% => led 38kHz
 80006e6:	4b54      	ldr	r3, [pc, #336]	@ (8000838 <driveDock+0x17c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2291      	movs	r2, #145	@ 0x91
 80006ec:	635a      	str	r2, [r3, #52]	@ 0x34
		htim2.Instance->CCR3 = DOCK_SPEED; //Duty Cycle op 50% => led 38kHz
 80006ee:	4b52      	ldr	r3, [pc, #328]	@ (8000838 <driveDock+0x17c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2291      	movs	r2, #145	@ 0x91
 80006f4:	63da      	str	r2, [r3, #60]	@ 0x3c
		readAdc(adc_values);
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	0018      	movs	r0, r3
 80006fa:	f7ff ff6d 	bl	80005d8 <readAdc>
		driveNormal(adc_values);
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	0018      	movs	r0, r3
 8000702:	f000 f8a9 	bl	8000858 <driveNormal>

		if (data_ready == 0xac)
 8000706:	4b4d      	ldr	r3, [pc, #308]	@ (800083c <driveDock+0x180>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2bac      	cmp	r3, #172	@ 0xac
 800070c:	d105      	bne.n	800071a <driveDock+0x5e>
		{
			(*detect_dock)++;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	b2da      	uxtb	r2, r3
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	701a      	strb	r2, [r3, #0]
		}

		if (*detect_dock == 1) //150 ms delay
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d000      	beq.n	8000724 <driveDock+0x68>
 8000722:	e07d      	b.n	8000820 <driveDock+0x164>
		{
			state_dock = 1;
 8000724:	230f      	movs	r3, #15
 8000726:	18fb      	adds	r3, r7, r3
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800072c:	e078      	b.n	8000820 <driveDock+0x164>
	case 1:
		if (data_ready == 0xa4)
 800072e:	4b43      	ldr	r3, [pc, #268]	@ (800083c <driveDock+0x180>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2ba4      	cmp	r3, #164	@ 0xa4
 8000734:	d10b      	bne.n	800074e <driveDock+0x92>
		{
			VOORUIT;
 8000736:	4b42      	ldr	r3, [pc, #264]	@ (8000840 <driveDock+0x184>)
 8000738:	4a42      	ldr	r2, [pc, #264]	@ (8000844 <driveDock+0x188>)
 800073a:	619a      	str	r2, [r3, #24]
			htim2.Instance->CCR1 = 0; //Duty Cycle op 50% => led 38kHz
 800073c:	4b3e      	ldr	r3, [pc, #248]	@ (8000838 <driveDock+0x17c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2200      	movs	r2, #0
 8000742:	635a      	str	r2, [r3, #52]	@ 0x34
			htim2.Instance->CCR3 = DOCK_SPEED; //Duty Cycle op 50% => led 38kHz
 8000744:	4b3c      	ldr	r3, [pc, #240]	@ (8000838 <driveDock+0x17c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2291      	movs	r2, #145	@ 0x91
 800074a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800074c:	e01e      	b.n	800078c <driveDock+0xd0>
		}
		else if (data_ready == 0xa8)
 800074e:	4b3b      	ldr	r3, [pc, #236]	@ (800083c <driveDock+0x180>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2ba8      	cmp	r3, #168	@ 0xa8
 8000754:	d10b      	bne.n	800076e <driveDock+0xb2>
		{
			VOORUIT;
 8000756:	4b3a      	ldr	r3, [pc, #232]	@ (8000840 <driveDock+0x184>)
 8000758:	4a3a      	ldr	r2, [pc, #232]	@ (8000844 <driveDock+0x188>)
 800075a:	619a      	str	r2, [r3, #24]
			htim2.Instance->CCR1 = DOCK_SPEED; //Duty Cycle op 50% => led 38kHz
 800075c:	4b36      	ldr	r3, [pc, #216]	@ (8000838 <driveDock+0x17c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2291      	movs	r2, #145	@ 0x91
 8000762:	635a      	str	r2, [r3, #52]	@ 0x34
			htim2.Instance->CCR3 = 0; //Duty Cycle op 50% => led 38kHz
 8000764:	4b34      	ldr	r3, [pc, #208]	@ (8000838 <driveDock+0x17c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2200      	movs	r2, #0
 800076a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076c:	e00e      	b.n	800078c <driveDock+0xd0>
		}
		else if (data_ready == 0xac)
 800076e:	4b33      	ldr	r3, [pc, #204]	@ (800083c <driveDock+0x180>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2bac      	cmp	r3, #172	@ 0xac
 8000774:	d10a      	bne.n	800078c <driveDock+0xd0>
		{
			VOORUIT;
 8000776:	4b32      	ldr	r3, [pc, #200]	@ (8000840 <driveDock+0x184>)
 8000778:	4a32      	ldr	r2, [pc, #200]	@ (8000844 <driveDock+0x188>)
 800077a:	619a      	str	r2, [r3, #24]
			htim2.Instance->CCR1 = DOCK_SPEED; //Duty Cycle op 50% => led 38kHz
 800077c:	4b2e      	ldr	r3, [pc, #184]	@ (8000838 <driveDock+0x17c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2291      	movs	r2, #145	@ 0x91
 8000782:	635a      	str	r2, [r3, #52]	@ 0x34
			htim2.Instance->CCR3 = DOCK_SPEED; //Duty Cycle op 50% => led 38kHz
 8000784:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <driveDock+0x17c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2291      	movs	r2, #145	@ 0x91
 800078a:	63da      	str	r2, [r3, #60]	@ 0x3c
		}

		readAdc(adc_values);
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff ff22 	bl	80005d8 <readAdc>
		if (adc_values[2] > IR_SENSOR_DISTANCE)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	3308      	adds	r3, #8
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a2b      	ldr	r2, [pc, #172]	@ (8000848 <driveDock+0x18c>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d941      	bls.n	8000824 <driveDock+0x168>
		{
			state_dock = 2;
 80007a0:	230f      	movs	r3, #15
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2202      	movs	r2, #2
 80007a6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80007a8:	e03c      	b.n	8000824 <driveDock+0x168>
	case 2:
		UIT;
 80007aa:	4b25      	ldr	r3, [pc, #148]	@ (8000840 <driveDock+0x184>)
 80007ac:	22f8      	movs	r2, #248	@ 0xf8
 80007ae:	0612      	lsls	r2, r2, #24
 80007b0:	619a      	str	r2, [r3, #24]
		data_ready = 0;
 80007b2:	4b22      	ldr	r3, [pc, #136]	@ (800083c <driveDock+0x180>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
		data_beacon = 0;
 80007b8:	4b24      	ldr	r3, [pc, #144]	@ (800084c <driveDock+0x190>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
		if (!HAL_GPIO_ReadPin(DRUK0_GPIO_Port, DRUK0_Pin))
 80007be:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <driveDock+0x184>)
 80007c0:	2120      	movs	r1, #32
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 fd20 	bl	8002208 <HAL_GPIO_ReadPin>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d12d      	bne.n	8000828 <driveDock+0x16c>
		{
			while (!HAL_GPIO_ReadPin(DRUK0_GPIO_Port, DRUK0_Pin));
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <driveDock+0x184>)
 80007d0:	2120      	movs	r1, #32
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 fd18 	bl	8002208 <HAL_GPIO_ReadPin>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d0f8      	beq.n	80007ce <driveDock+0x112>
			ACHTERUIT;
 80007dc:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <driveDock+0x184>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	@ (8000850 <driveDock+0x194>)
 80007e0:	619a      	str	r2, [r3, #24]
			htim2.Instance->CCR1 = DOCK_SPEED; //Duty Cycle op 50% => led 38kHz
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <driveDock+0x17c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2291      	movs	r2, #145	@ 0x91
 80007e8:	635a      	str	r2, [r3, #52]	@ 0x34
			htim2.Instance->CCR3 = DOCK_SPEED; //Duty Cycle op 50% => led 38kHz
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <driveDock+0x17c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2291      	movs	r2, #145	@ 0x91
 80007f0:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_Delay(ACHTERUIT_DELAY);
 80007f2:	23fa      	movs	r3, #250	@ 0xfa
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 fef6 	bl	80015e8 <HAL_Delay>
			RECHTS;
 80007fc:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <driveDock+0x184>)
 80007fe:	4a15      	ldr	r2, [pc, #84]	@ (8000854 <driveDock+0x198>)
 8000800:	619a      	str	r2, [r3, #24]
			HAL_Delay(DRAAI_DELAY);
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <driveDock+0x18c>)
 8000804:	0018      	movs	r0, r3
 8000806:	f000 feef 	bl	80015e8 <HAL_Delay>
			*drive_dock = 0;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
			*detect_dock = 0;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
			state_dock = 0;
 8000816:	230f      	movs	r3, #15
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800081e:	e003      	b.n	8000828 <driveDock+0x16c>
		break;
 8000820:	46c0      	nop			@ (mov r8, r8)
 8000822:	e002      	b.n	800082a <driveDock+0x16e>
		break;
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	e000      	b.n	800082a <driveDock+0x16e>
		break;
 8000828:	46c0      	nop			@ (mov r8, r8)
	}
	return state_dock;
 800082a:	230f      	movs	r3, #15
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	781b      	ldrb	r3, [r3, #0]
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	b004      	add	sp, #16
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200000e0 	.word	0x200000e0
 800083c:	200001ea 	.word	0x200001ea
 8000840:	50000400 	.word	0x50000400
 8000844:	f800b000 	.word	0xf800b000
 8000848:	000005dc 	.word	0x000005dc
 800084c:	200001eb 	.word	0x200001eb
 8000850:	f8006800 	.word	0xf8006800
 8000854:	f8007000 	.word	0xf8007000

08000858 <driveNormal>:
void driveNormal(uint32_t adc_values[])
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(DRUK4_GPIO_Port, DRUK4_Pin) == 0) //bumper links
 8000860:	4b5c      	ldr	r3, [pc, #368]	@ (80009d4 <driveNormal+0x17c>)
 8000862:	2102      	movs	r1, #2
 8000864:	0018      	movs	r0, r3
 8000866:	f001 fccf 	bl	8002208 <HAL_GPIO_ReadPin>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d10f      	bne.n	800088e <driveNormal+0x36>
	{
		ACHTERUIT;
 800086e:	4b59      	ldr	r3, [pc, #356]	@ (80009d4 <driveNormal+0x17c>)
 8000870:	4a59      	ldr	r2, [pc, #356]	@ (80009d8 <driveNormal+0x180>)
 8000872:	619a      	str	r2, [r3, #24]
		HAL_Delay(ACHTERUIT_DELAY);
 8000874:	23fa      	movs	r3, #250	@ 0xfa
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	0018      	movs	r0, r3
 800087a:	f000 feb5 	bl	80015e8 <HAL_Delay>
		LINKS;
 800087e:	4b55      	ldr	r3, [pc, #340]	@ (80009d4 <driveNormal+0x17c>)
 8000880:	4a56      	ldr	r2, [pc, #344]	@ (80009dc <driveNormal+0x184>)
 8000882:	619a      	str	r2, [r3, #24]
		HAL_Delay(DRAAI_DELAY);
 8000884:	4b56      	ldr	r3, [pc, #344]	@ (80009e0 <driveNormal+0x188>)
 8000886:	0018      	movs	r0, r3
 8000888:	f000 feae 	bl	80015e8 <HAL_Delay>
 800088c:	e02c      	b.n	80008e8 <driveNormal+0x90>
	}
	else if (HAL_GPIO_ReadPin(DRUK2_GPIO_Port, DRUK2_Pin) == 0) //bumper rechts
 800088e:	4b51      	ldr	r3, [pc, #324]	@ (80009d4 <driveNormal+0x17c>)
 8000890:	2108      	movs	r1, #8
 8000892:	0018      	movs	r0, r3
 8000894:	f001 fcb8 	bl	8002208 <HAL_GPIO_ReadPin>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d10f      	bne.n	80008bc <driveNormal+0x64>
	{
		ACHTERUIT;
 800089c:	4b4d      	ldr	r3, [pc, #308]	@ (80009d4 <driveNormal+0x17c>)
 800089e:	4a4e      	ldr	r2, [pc, #312]	@ (80009d8 <driveNormal+0x180>)
 80008a0:	619a      	str	r2, [r3, #24]
		HAL_Delay(ACHTERUIT_DELAY);
 80008a2:	23fa      	movs	r3, #250	@ 0xfa
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fe9e 	bl	80015e8 <HAL_Delay>
		RECHTS;
 80008ac:	4b49      	ldr	r3, [pc, #292]	@ (80009d4 <driveNormal+0x17c>)
 80008ae:	4a4d      	ldr	r2, [pc, #308]	@ (80009e4 <driveNormal+0x18c>)
 80008b0:	619a      	str	r2, [r3, #24]
		HAL_Delay(DRAAI_DELAY);
 80008b2:	4b4b      	ldr	r3, [pc, #300]	@ (80009e0 <driveNormal+0x188>)
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 fe97 	bl	80015e8 <HAL_Delay>
 80008ba:	e015      	b.n	80008e8 <driveNormal+0x90>
	}
	else if (HAL_GPIO_ReadPin(DRUK1_GPIO_Port, DRUK1_Pin) == 0) //bumper rechts
 80008bc:	4b45      	ldr	r3, [pc, #276]	@ (80009d4 <driveNormal+0x17c>)
 80008be:	2110      	movs	r1, #16
 80008c0:	0018      	movs	r0, r3
 80008c2:	f001 fca1 	bl	8002208 <HAL_GPIO_ReadPin>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d10e      	bne.n	80008e8 <driveNormal+0x90>
	{
		ACHTERUIT;
 80008ca:	4b42      	ldr	r3, [pc, #264]	@ (80009d4 <driveNormal+0x17c>)
 80008cc:	4a42      	ldr	r2, [pc, #264]	@ (80009d8 <driveNormal+0x180>)
 80008ce:	619a      	str	r2, [r3, #24]
		HAL_Delay(ACHTERUIT_DELAY);
 80008d0:	23fa      	movs	r3, #250	@ 0xfa
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	0018      	movs	r0, r3
 80008d6:	f000 fe87 	bl	80015e8 <HAL_Delay>
		LINKS;
 80008da:	4b3e      	ldr	r3, [pc, #248]	@ (80009d4 <driveNormal+0x17c>)
 80008dc:	4a3f      	ldr	r2, [pc, #252]	@ (80009dc <driveNormal+0x184>)
 80008de:	619a      	str	r2, [r3, #24]
		HAL_Delay(LANG_DRAAI_DELAY);
 80008e0:	4b41      	ldr	r3, [pc, #260]	@ (80009e8 <driveNormal+0x190>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 fe80 	bl	80015e8 <HAL_Delay>
	}

	if (adc_values[0] > IR_SENSOR_DISTANCE && adc_values[1] < IR_SENSOR_DISTANCE)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a3c      	ldr	r2, [pc, #240]	@ (80009e0 <driveNormal+0x188>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d909      	bls.n	8000906 <driveNormal+0xae>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3304      	adds	r3, #4
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a3c      	ldr	r2, [pc, #240]	@ (80009ec <driveNormal+0x194>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d803      	bhi.n	8000906 <driveNormal+0xae>
	{
		LINKS;
 80008fe:	4b35      	ldr	r3, [pc, #212]	@ (80009d4 <driveNormal+0x17c>)
 8000900:	4a36      	ldr	r2, [pc, #216]	@ (80009dc <driveNormal+0x184>)
 8000902:	619a      	str	r2, [r3, #24]
 8000904:	e061      	b.n	80009ca <driveNormal+0x172>
		//VOORUIT;
		//htim2.Instance->CCR1 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
		//htim2.Instance->CCR3 = 0; //Duty Cycle op 50% => led 38kHz
	}
	else if (adc_values[1] > IR_SENSOR_DISTANCE && adc_values[0] < IR_SENSOR_DISTANCE)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3304      	adds	r3, #4
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a34      	ldr	r2, [pc, #208]	@ (80009e0 <driveNormal+0x188>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d908      	bls.n	8000924 <driveNormal+0xcc>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a35      	ldr	r2, [pc, #212]	@ (80009ec <driveNormal+0x194>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d803      	bhi.n	8000924 <driveNormal+0xcc>
	{
		RECHTS;
 800091c:	4b2d      	ldr	r3, [pc, #180]	@ (80009d4 <driveNormal+0x17c>)
 800091e:	4a31      	ldr	r2, [pc, #196]	@ (80009e4 <driveNormal+0x18c>)
 8000920:	619a      	str	r2, [r3, #24]
 8000922:	e052      	b.n	80009ca <driveNormal+0x172>
		//VOORUIT;
		//htim2.Instance->CCR1 = 0; //Duty Cycle op 50% => led 38kHz
		//htim2.Instance->CCR3 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
	}
	else if (adc_values[0] > IR_MID_SENSOR_DISTANCE && adc_values[1] > IR_MID_SENSOR_DISTANCE)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a31      	ldr	r2, [pc, #196]	@ (80009f0 <driveNormal+0x198>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d924      	bls.n	8000978 <driveNormal+0x120>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3304      	adds	r3, #4
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a2e      	ldr	r2, [pc, #184]	@ (80009f0 <driveNormal+0x198>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d91e      	bls.n	8000978 <driveNormal+0x120>
	{
		ACHTERUIT;
 800093a:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <driveNormal+0x17c>)
 800093c:	4a26      	ldr	r2, [pc, #152]	@ (80009d8 <driveNormal+0x180>)
 800093e:	619a      	str	r2, [r3, #24]
		HAL_Delay(ACHTERUIT_DELAY);
 8000940:	23fa      	movs	r3, #250	@ 0xfa
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	0018      	movs	r0, r3
 8000946:	f000 fe4f 	bl	80015e8 <HAL_Delay>
		if (adc_values[0] > adc_values[1])
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3304      	adds	r3, #4
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	429a      	cmp	r2, r3
 8000956:	d907      	bls.n	8000968 <driveNormal+0x110>
		{
			LINKS;
 8000958:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <driveNormal+0x17c>)
 800095a:	4a20      	ldr	r2, [pc, #128]	@ (80009dc <driveNormal+0x184>)
 800095c:	619a      	str	r2, [r3, #24]
			HAL_Delay(DRAAI_DELAY);
 800095e:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <driveNormal+0x188>)
 8000960:	0018      	movs	r0, r3
 8000962:	f000 fe41 	bl	80015e8 <HAL_Delay>
		if (adc_values[0] > adc_values[1])
 8000966:	e030      	b.n	80009ca <driveNormal+0x172>
		}
		else
		{	RECHTS;
 8000968:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <driveNormal+0x17c>)
 800096a:	4a1e      	ldr	r2, [pc, #120]	@ (80009e4 <driveNormal+0x18c>)
 800096c:	619a      	str	r2, [r3, #24]
			HAL_Delay(DRAAI_DELAY);
 800096e:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <driveNormal+0x188>)
 8000970:	0018      	movs	r0, r3
 8000972:	f000 fe39 	bl	80015e8 <HAL_Delay>
		if (adc_values[0] > adc_values[1])
 8000976:	e028      	b.n	80009ca <driveNormal+0x172>
		}
	}
	else if (adc_values[2] > IR_MID_SENSOR_DISTANCE)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3308      	adds	r3, #8
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a1c      	ldr	r2, [pc, #112]	@ (80009f0 <driveNormal+0x198>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d91e      	bls.n	80009c2 <driveNormal+0x16a>
	{
		ACHTERUIT;
 8000984:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <driveNormal+0x17c>)
 8000986:	4a14      	ldr	r2, [pc, #80]	@ (80009d8 <driveNormal+0x180>)
 8000988:	619a      	str	r2, [r3, #24]
		HAL_Delay(ACHTERUIT_DELAY);
 800098a:	23fa      	movs	r3, #250	@ 0xfa
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	0018      	movs	r0, r3
 8000990:	f000 fe2a 	bl	80015e8 <HAL_Delay>
		if (adc_values[0] > adc_values[1])
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3304      	adds	r3, #4
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d907      	bls.n	80009b2 <driveNormal+0x15a>
		{
			LINKS;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <driveNormal+0x17c>)
 80009a4:	4a0d      	ldr	r2, [pc, #52]	@ (80009dc <driveNormal+0x184>)
 80009a6:	619a      	str	r2, [r3, #24]
			HAL_Delay(DRAAI_DELAY);
 80009a8:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <driveNormal+0x188>)
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 fe1c 	bl	80015e8 <HAL_Delay>
	{
		VOORUIT;
		//htim2.Instance->CCR1 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
		//htim2.Instance->CCR3 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
	}
}
 80009b0:	e00b      	b.n	80009ca <driveNormal+0x172>
			RECHTS;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <driveNormal+0x17c>)
 80009b4:	4a0b      	ldr	r2, [pc, #44]	@ (80009e4 <driveNormal+0x18c>)
 80009b6:	619a      	str	r2, [r3, #24]
			HAL_Delay(DRAAI_DELAY);
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <driveNormal+0x188>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 fe14 	bl	80015e8 <HAL_Delay>
}
 80009c0:	e003      	b.n	80009ca <driveNormal+0x172>
		VOORUIT;
 80009c2:	4b04      	ldr	r3, [pc, #16]	@ (80009d4 <driveNormal+0x17c>)
 80009c4:	4a0b      	ldr	r2, [pc, #44]	@ (80009f4 <driveNormal+0x19c>)
 80009c6:	619a      	str	r2, [r3, #24]
}
 80009c8:	e7ff      	b.n	80009ca <driveNormal+0x172>
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b002      	add	sp, #8
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	50000400 	.word	0x50000400
 80009d8:	f8006800 	.word	0xf8006800
 80009dc:	f800a800 	.word	0xf800a800
 80009e0:	000005dc 	.word	0x000005dc
 80009e4:	f8007000 	.word	0xf8007000
 80009e8:	00000bb8 	.word	0x00000bb8
 80009ec:	000005db 	.word	0x000005db
 80009f0:	00000898 	.word	0x00000898
 80009f4:	f800b000 	.word	0xf800b000

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t adc_values[IR_SENSOR_COUNT];
	uint8_t drive_dock = 0;
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
	uint8_t state_dock = 0;
 8000a04:	2317      	movs	r3, #23
 8000a06:	18fb      	adds	r3, r7, r3
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
	uint8_t detect_dock = 0;
 8000a0c:	1dbb      	adds	r3, r7, #6
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a12:	f000 fd79 	bl	8001508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a16:	f000 f8ab 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1a:	f000 fa81 	bl	8000f20 <MX_GPIO_Init>
  MX_ADC_Init();
 8000a1e:	f000 f90b 	bl	8000c38 <MX_ADC_Init>
  MX_TIM2_Init();
 8000a22:	f000 f98b 	bl	8000d3c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a26:	f000 fa4b 	bl	8000ec0 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000a2a:	f000 fa0f 	bl	8000e4c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(IR0_GPIO_Port, IR0_Pin, 1);
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	0159      	lsls	r1, r3, #5
 8000a32:	23a0      	movs	r3, #160	@ 0xa0
 8000a34:	05db      	lsls	r3, r3, #23
 8000a36:	2201      	movs	r2, #1
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f001 fc02 	bl	8002242 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IR1_GPIO_Port, IR1_Pin, 1);
 8000a3e:	23a0      	movs	r3, #160	@ 0xa0
 8000a40:	05db      	lsls	r3, r3, #23
 8000a42:	2201      	movs	r2, #1
 8000a44:	2180      	movs	r1, #128	@ 0x80
 8000a46:	0018      	movs	r0, r3
 8000a48:	f001 fbfb 	bl	8002242 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IR2_GPIO_Port, IR2_Pin, 1);
 8000a4c:	2380      	movs	r3, #128	@ 0x80
 8000a4e:	0059      	lsls	r1, r3, #1
 8000a50:	23a0      	movs	r3, #160	@ 0xa0
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	2201      	movs	r2, #1
 8000a56:	0018      	movs	r0, r3
 8000a58:	f001 fbf3 	bl	8002242 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b58 <main+0x160>)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	0018      	movs	r0, r3
 8000a62:	f002 fc97 	bl	8003394 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a66:	4b3c      	ldr	r3, [pc, #240]	@ (8000b58 <main+0x160>)
 8000a68:	2108      	movs	r1, #8
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f002 fc92 	bl	8003394 <HAL_TIM_PWM_Start>
  HAL_Delay(50); //sensors moeten opstarten
 8000a70:	2032      	movs	r0, #50	@ 0x32
 8000a72:	f000 fdb9 	bl	80015e8 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (drive_dock)
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <main+0x8c>
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d048      	beq.n	8000b14 <main+0x11c>
 8000a82:	e7f8      	b.n	8000a76 <main+0x7e>
	  {
	  case 0:
		  if (!HAL_GPIO_ReadPin(DRUK0_GPIO_Port, DRUK0_Pin))
 8000a84:	4b35      	ldr	r3, [pc, #212]	@ (8000b5c <main+0x164>)
 8000a86:	2120      	movs	r1, #32
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f001 fbbd 	bl	8002208 <HAL_GPIO_ReadPin>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d10e      	bne.n	8000ab0 <main+0xb8>
		  {
			  while (!HAL_GPIO_ReadPin(DRUK0_GPIO_Port, DRUK0_Pin));
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	4b31      	ldr	r3, [pc, #196]	@ (8000b5c <main+0x164>)
 8000a96:	2120      	movs	r1, #32
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f001 fbb5 	bl	8002208 <HAL_GPIO_ReadPin>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d0f8      	beq.n	8000a94 <main+0x9c>
			  drive_dock ^= 1;
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4053      	eors	r3, r2
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	701a      	strb	r2, [r3, #0]
		  }
		  HAL_GPIO_WritePin(STOF_GPIO_Port, STOF_Pin, 1);
 8000ab0:	2380      	movs	r3, #128	@ 0x80
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4829      	ldr	r0, [pc, #164]	@ (8000b5c <main+0x164>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	0019      	movs	r1, r3
 8000aba:	f001 fbc2 	bl	8002242 <HAL_GPIO_WritePin>
		  htim2.Instance->CCR1 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
 8000abe:	4b26      	ldr	r3, [pc, #152]	@ (8000b58 <main+0x160>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	22ff      	movs	r2, #255	@ 0xff
 8000ac4:	635a      	str	r2, [r3, #52]	@ 0x34
		  htim2.Instance->CCR3 = NORMAL_SPEED; //Duty Cycle op 50% => led 38kHz
 8000ac6:	4b24      	ldr	r3, [pc, #144]	@ (8000b58 <main+0x160>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	22ff      	movs	r2, #255	@ 0xff
 8000acc:	63da      	str	r2, [r3, #60]	@ 0x3c
		  readAdc(adc_values);
 8000ace:	2608      	movs	r6, #8
 8000ad0:	19bb      	adds	r3, r7, r6
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f7ff fd80 	bl	80005d8 <readAdc>
		  printf("l: %d, m: %d, r: %d, ", HAL_GPIO_ReadPin(DRUK4_GPIO_Port, DRUK4_Pin), HAL_GPIO_ReadPin(DRUK1_GPIO_Port, DRUK1_Pin), HAL_GPIO_ReadPin(DRUK2_GPIO_Port, DRUK2_Pin));
 8000ad8:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <main+0x164>)
 8000ada:	2102      	movs	r1, #2
 8000adc:	0018      	movs	r0, r3
 8000ade:	f001 fb93 	bl	8002208 <HAL_GPIO_ReadPin>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	001c      	movs	r4, r3
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <main+0x164>)
 8000ae8:	2110      	movs	r1, #16
 8000aea:	0018      	movs	r0, r3
 8000aec:	f001 fb8c 	bl	8002208 <HAL_GPIO_ReadPin>
 8000af0:	0003      	movs	r3, r0
 8000af2:	001d      	movs	r5, r3
 8000af4:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <main+0x164>)
 8000af6:	2108      	movs	r1, #8
 8000af8:	0018      	movs	r0, r3
 8000afa:	f001 fb85 	bl	8002208 <HAL_GPIO_ReadPin>
 8000afe:	0003      	movs	r3, r0
 8000b00:	4817      	ldr	r0, [pc, #92]	@ (8000b60 <main+0x168>)
 8000b02:	002a      	movs	r2, r5
 8000b04:	0021      	movs	r1, r4
 8000b06:	f004 f847 	bl	8004b98 <iprintf>
		  driveNormal(adc_values);
 8000b0a:	19bb      	adds	r3, r7, r6
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff fea3 	bl	8000858 <driveNormal>
		  break;
 8000b12:	e020      	b.n	8000b56 <main+0x15e>
	  case 1:
		  HAL_GPIO_WritePin(STOF_GPIO_Port, STOF_Pin, 0);
 8000b14:	2380      	movs	r3, #128	@ 0x80
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4810      	ldr	r0, [pc, #64]	@ (8000b5c <main+0x164>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	0019      	movs	r1, r3
 8000b1e:	f001 fb90 	bl	8002242 <HAL_GPIO_WritePin>
		  printf("data: %x, %x, %d\n", data_ready, data_beacon, state_dock);
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <main+0x16c>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	0019      	movs	r1, r3
 8000b28:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <main+0x170>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	2417      	movs	r4, #23
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	480d      	ldr	r0, [pc, #52]	@ (8000b6c <main+0x174>)
 8000b36:	f004 f82f 	bl	8004b98 <iprintf>
		  state_dock = driveDock(state_dock, adc_values, &drive_dock, &detect_dock);
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	18fc      	adds	r4, r7, r3
 8000b3e:	1dbd      	adds	r5, r7, #6
 8000b40:	1dfa      	adds	r2, r7, #7
 8000b42:	2108      	movs	r1, #8
 8000b44:	1879      	adds	r1, r7, r1
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	7818      	ldrb	r0, [r3, #0]
 8000b4a:	002b      	movs	r3, r5
 8000b4c:	f7ff fdb6 	bl	80006bc <driveDock>
 8000b50:	0003      	movs	r3, r0
 8000b52:	7023      	strb	r3, [r4, #0]
		  break;
 8000b54:	46c0      	nop			@ (mov r8, r8)
	  switch (drive_dock)
 8000b56:	e78e      	b.n	8000a76 <main+0x7e>
 8000b58:	200000e0 	.word	0x200000e0
 8000b5c:	50000400 	.word	0x50000400
 8000b60:	08005918 	.word	0x08005918
 8000b64:	200001ea 	.word	0x200001ea
 8000b68:	200001eb 	.word	0x200001eb
 8000b6c:	08005930 	.word	0x08005930

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b09d      	sub	sp, #116	@ 0x74
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	2438      	movs	r4, #56	@ 0x38
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	2338      	movs	r3, #56	@ 0x38
 8000b7e:	001a      	movs	r2, r3
 8000b80:	2100      	movs	r1, #0
 8000b82:	f004 f865 	bl	8004c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b86:	2324      	movs	r3, #36	@ 0x24
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	2314      	movs	r3, #20
 8000b8e:	001a      	movs	r2, r3
 8000b90:	2100      	movs	r1, #0
 8000b92:	f004 f85d 	bl	8004c50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b96:	003b      	movs	r3, r7
 8000b98:	0018      	movs	r0, r3
 8000b9a:	2324      	movs	r3, #36	@ 0x24
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f004 f856 	bl	8004c50 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba4:	4b22      	ldr	r3, [pc, #136]	@ (8000c30 <SystemClock_Config+0xc0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a22      	ldr	r2, [pc, #136]	@ (8000c34 <SystemClock_Config+0xc4>)
 8000baa:	401a      	ands	r2, r3
 8000bac:	4b20      	ldr	r3, [pc, #128]	@ (8000c30 <SystemClock_Config+0xc0>)
 8000bae:	2180      	movs	r1, #128	@ 0x80
 8000bb0:	0109      	lsls	r1, r1, #4
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	22a0      	movs	r2, #160	@ 0xa0
 8000bc0:	02d2      	lsls	r2, r2, #11
 8000bc2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f001 fb71 	bl	80022b4 <HAL_RCC_OscConfig>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000bd6:	f000 fa79 	bl	80010cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bda:	2124      	movs	r1, #36	@ 0x24
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	220f      	movs	r2, #15
 8000be0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2202      	movs	r2, #2
 8000be6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f001 ff1c 	bl	8002a3c <HAL_RCC_ClockConfig>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c08:	f000 fa60 	bl	80010cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c0c:	003b      	movs	r3, r7
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c12:	003b      	movs	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c18:	003b      	movs	r3, r7
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f002 f932 	bl	8002e84 <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000c24:	f000 fa52 	bl	80010cc <Error_Handler>
  }
}
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b01d      	add	sp, #116	@ 0x74
 8000c2e:	bd90      	pop	{r4, r7, pc}
 8000c30:	40007000 	.word	0x40007000
 8000c34:	ffffe7ff 	.word	0xffffe7ff

08000c38 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c3e:	003b      	movs	r3, r7
 8000c40:	0018      	movs	r0, r3
 8000c42:	2308      	movs	r3, #8
 8000c44:	001a      	movs	r2, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	f004 f802 	bl	8004c50 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c4c:	4b37      	ldr	r3, [pc, #220]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000c4e:	4a38      	ldr	r2, [pc, #224]	@ (8000d30 <MX_ADC_Init+0xf8>)
 8000c50:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000c52:	4b36      	ldr	r3, [pc, #216]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c58:	4b34      	ldr	r3, [pc, #208]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000c5a:	2280      	movs	r2, #128	@ 0x80
 8000c5c:	05d2      	lsls	r2, r2, #23
 8000c5e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c60:	4b32      	ldr	r3, [pc, #200]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c66:	4b31      	ldr	r3, [pc, #196]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c72:	4b2e      	ldr	r3, [pc, #184]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c78:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8000c80:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000c82:	2221      	movs	r2, #33	@ 0x21
 8000c84:	2101      	movs	r1, #1
 8000c86:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c88:	4b28      	ldr	r3, [pc, #160]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8e:	4b27      	ldr	r3, [pc, #156]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000c90:	22c2      	movs	r2, #194	@ 0xc2
 8000c92:	32ff      	adds	r2, #255	@ 0xff
 8000c94:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c96:	4b25      	ldr	r3, [pc, #148]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000c98:	222c      	movs	r2, #44	@ 0x2c
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c9e:	4b23      	ldr	r3, [pc, #140]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ca4:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 fcb6 	bl	8001630 <HAL_ADC_Init>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000cc8:	f000 fa00 	bl	80010cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ccc:	003b      	movs	r3, r7
 8000cce:	2201      	movs	r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000cd2:	003b      	movs	r3, r7
 8000cd4:	2280      	movs	r2, #128	@ 0x80
 8000cd6:	0152      	lsls	r2, r2, #5
 8000cd8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cda:	003a      	movs	r2, r7
 8000cdc:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f000 ff15 	bl	8001b10 <HAL_ADC_ConfigChannel>
 8000ce6:	1e03      	subs	r3, r0, #0
 8000ce8:	d001      	beq.n	8000cee <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000cea:	f000 f9ef 	bl	80010cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cee:	003b      	movs	r3, r7
 8000cf0:	4a10      	ldr	r2, [pc, #64]	@ (8000d34 <MX_ADC_Init+0xfc>)
 8000cf2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cf4:	003a      	movs	r2, r7
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000cf8:	0011      	movs	r1, r2
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 ff08 	bl	8001b10 <HAL_ADC_ConfigChannel>
 8000d00:	1e03      	subs	r3, r0, #0
 8000d02:	d001      	beq.n	8000d08 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000d04:	f000 f9e2 	bl	80010cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d08:	003b      	movs	r3, r7
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d38 <MX_ADC_Init+0x100>)
 8000d0c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d0e:	003a      	movs	r2, r7
 8000d10:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <MX_ADC_Init+0xf4>)
 8000d12:	0011      	movs	r1, r2
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 fefb 	bl	8001b10 <HAL_ADC_ConfigChannel>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000d1e:	f000 f9d5 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	20000084 	.word	0x20000084
 8000d30:	40012400 	.word	0x40012400
 8000d34:	04000002 	.word	0x04000002
 8000d38:	08000004 	.word	0x08000004

08000d3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	2318      	movs	r3, #24
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	0018      	movs	r0, r3
 8000d48:	2310      	movs	r3, #16
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	f003 ff7f 	bl	8004c50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d52:	2310      	movs	r3, #16
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	0018      	movs	r0, r3
 8000d58:	2308      	movs	r3, #8
 8000d5a:	001a      	movs	r2, r3
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	f003 ff77 	bl	8004c50 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d62:	003b      	movs	r3, r7
 8000d64:	0018      	movs	r0, r3
 8000d66:	2310      	movs	r3, #16
 8000d68:	001a      	movs	r2, r3
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	f003 ff70 	bl	8004c50 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d70:	4b35      	ldr	r3, [pc, #212]	@ (8000e48 <MX_TIM2_Init+0x10c>)
 8000d72:	2280      	movs	r2, #128	@ 0x80
 8000d74:	05d2      	lsls	r2, r2, #23
 8000d76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 93;
 8000d78:	4b33      	ldr	r3, [pc, #204]	@ (8000e48 <MX_TIM2_Init+0x10c>)
 8000d7a:	225d      	movs	r2, #93	@ 0x5d
 8000d7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b32      	ldr	r3, [pc, #200]	@ (8000e48 <MX_TIM2_Init+0x10c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000d84:	4b30      	ldr	r3, [pc, #192]	@ (8000e48 <MX_TIM2_Init+0x10c>)
 8000d86:	22ff      	movs	r2, #255	@ 0xff
 8000d88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e48 <MX_TIM2_Init+0x10c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d90:	4b2d      	ldr	r3, [pc, #180]	@ (8000e48 <MX_TIM2_Init+0x10c>)
 8000d92:	2280      	movs	r2, #128	@ 0x80
 8000d94:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d96:	4b2c      	ldr	r3, [pc, #176]	@ (8000e48 <MX_TIM2_Init+0x10c>)
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f002 fa01 	bl	80031a0 <HAL_TIM_Base_Init>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000da2:	f000 f993 	bl	80010cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da6:	2118      	movs	r1, #24
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2280      	movs	r2, #128	@ 0x80
 8000dac:	0152      	lsls	r2, r2, #5
 8000dae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000db0:	187a      	adds	r2, r7, r1
 8000db2:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <MX_TIM2_Init+0x10c>)
 8000db4:	0011      	movs	r1, r2
 8000db6:	0018      	movs	r0, r3
 8000db8:	f002 fd26 	bl	8003808 <HAL_TIM_ConfigClockSource>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000dc0:	f000 f984 	bl	80010cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dc4:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <MX_TIM2_Init+0x10c>)
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f002 fa9c 	bl	8003304 <HAL_TIM_PWM_Init>
 8000dcc:	1e03      	subs	r3, r0, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000dd0:	f000 f97c 	bl	80010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd4:	2110      	movs	r1, #16
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000de2:	187a      	adds	r2, r7, r1
 8000de4:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <MX_TIM2_Init+0x10c>)
 8000de6:	0011      	movs	r1, r2
 8000de8:	0018      	movs	r0, r3
 8000dea:	f003 f817 	bl	8003e1c <HAL_TIMEx_MasterConfigSynchronization>
 8000dee:	1e03      	subs	r3, r0, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000df2:	f000 f96b 	bl	80010cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df6:	003b      	movs	r3, r7
 8000df8:	2260      	movs	r2, #96	@ 0x60
 8000dfa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000dfc:	003b      	movs	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e02:	003b      	movs	r3, r7
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e08:	003b      	movs	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e0e:	0039      	movs	r1, r7
 8000e10:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <MX_TIM2_Init+0x10c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	0018      	movs	r0, r3
 8000e16:	f002 fc31 	bl	800367c <HAL_TIM_PWM_ConfigChannel>
 8000e1a:	1e03      	subs	r3, r0, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000e1e:	f000 f955 	bl	80010cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e22:	0039      	movs	r1, r7
 8000e24:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <MX_TIM2_Init+0x10c>)
 8000e26:	2208      	movs	r2, #8
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f002 fc27 	bl	800367c <HAL_TIM_PWM_ConfigChannel>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000e32:	f000 f94b 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e36:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <MX_TIM2_Init+0x10c>)
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f000 f9c9 	bl	80011d0 <HAL_TIM_MspPostInit>

}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b00a      	add	sp, #40	@ 0x28
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	200000e0 	.word	0x200000e0

08000e4c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e52:	003b      	movs	r3, r7
 8000e54:	0018      	movs	r0, r3
 8000e56:	2308      	movs	r3, #8
 8000e58:	001a      	movs	r2, r3
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	f003 fef8 	bl	8004c50 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_TIM6_Init+0x6c>)
 8000e62:	4a16      	ldr	r2, [pc, #88]	@ (8000ebc <MX_TIM6_Init+0x70>)
 8000e64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 192;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_TIM6_Init+0x6c>)
 8000e68:	22c0      	movs	r2, #192	@ 0xc0
 8000e6a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_TIM6_Init+0x6c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 255;
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_TIM6_Init+0x6c>)
 8000e74:	22ff      	movs	r2, #255	@ 0xff
 8000e76:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_TIM6_Init+0x6c>)
 8000e7a:	2280      	movs	r2, #128	@ 0x80
 8000e7c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <MX_TIM6_Init+0x6c>)
 8000e80:	0018      	movs	r0, r3
 8000e82:	f002 f98d 	bl	80031a0 <HAL_TIM_Base_Init>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000e8a:	f000 f91f 	bl	80010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8e:	003b      	movs	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e94:	003b      	movs	r3, r7
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e9a:	003a      	movs	r2, r7
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <MX_TIM6_Init+0x6c>)
 8000e9e:	0011      	movs	r1, r2
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f002 ffbb 	bl	8003e1c <HAL_TIMEx_MasterConfigSynchronization>
 8000ea6:	1e03      	subs	r3, r0, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000eaa:	f000 f90f 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b002      	add	sp, #8
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	20000120 	.word	0x20000120
 8000ebc:	40001000 	.word	0x40001000

08000ec0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <MX_USART1_UART_Init+0x58>)
 8000ec6:	4a15      	ldr	r2, [pc, #84]	@ (8000f1c <MX_USART1_UART_Init+0x5c>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eca:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <MX_USART1_UART_Init+0x58>)
 8000ecc:	22e1      	movs	r2, #225	@ 0xe1
 8000ece:	0252      	lsls	r2, r2, #9
 8000ed0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <MX_USART1_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <MX_USART1_UART_Init+0x58>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <MX_USART1_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <MX_USART1_UART_Init+0x58>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <MX_USART1_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <MX_USART1_UART_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <MX_USART1_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_USART1_UART_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f02:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <MX_USART1_UART_Init+0x58>)
 8000f04:	0018      	movs	r0, r3
 8000f06:	f002 ffe1 	bl	8003ecc <HAL_UART_Init>
 8000f0a:	1e03      	subs	r3, r0, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f0e:	f000 f8dd 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000160 	.word	0x20000160
 8000f1c:	40013800 	.word	0x40013800

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	240c      	movs	r4, #12
 8000f28:	193b      	adds	r3, r7, r4
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	2314      	movs	r3, #20
 8000f2e:	001a      	movs	r2, r3
 8000f30:	2100      	movs	r1, #0
 8000f32:	f003 fe8d 	bl	8004c50 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	4b62      	ldr	r3, [pc, #392]	@ (80010c0 <MX_GPIO_Init+0x1a0>)
 8000f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f3a:	4b61      	ldr	r3, [pc, #388]	@ (80010c0 <MX_GPIO_Init+0x1a0>)
 8000f3c:	2180      	movs	r1, #128	@ 0x80
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f42:	4b5f      	ldr	r3, [pc, #380]	@ (80010c0 <MX_GPIO_Init+0x1a0>)
 8000f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f46:	2280      	movs	r2, #128	@ 0x80
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b5c      	ldr	r3, [pc, #368]	@ (80010c0 <MX_GPIO_Init+0x1a0>)
 8000f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f52:	4b5b      	ldr	r3, [pc, #364]	@ (80010c0 <MX_GPIO_Init+0x1a0>)
 8000f54:	2101      	movs	r1, #1
 8000f56:	430a      	orrs	r2, r1
 8000f58:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f5a:	4b59      	ldr	r3, [pc, #356]	@ (80010c0 <MX_GPIO_Init+0x1a0>)
 8000f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4013      	ands	r3, r2
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b56      	ldr	r3, [pc, #344]	@ (80010c0 <MX_GPIO_Init+0x1a0>)
 8000f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f6a:	4b55      	ldr	r3, [pc, #340]	@ (80010c0 <MX_GPIO_Init+0x1a0>)
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f72:	4b53      	ldr	r3, [pc, #332]	@ (80010c0 <MX_GPIO_Init+0x1a0>)
 8000f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f76:	2202      	movs	r2, #2
 8000f78:	4013      	ands	r3, r2
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 8000f7e:	4b51      	ldr	r3, [pc, #324]	@ (80010c4 <MX_GPIO_Init+0x1a4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	2102      	movs	r1, #2
 8000f84:	0018      	movs	r0, r3
 8000f86:	f001 f95c 	bl	8002242 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin
 8000f8a:	23fc      	movs	r3, #252	@ 0xfc
 8000f8c:	0159      	lsls	r1, r3, #5
 8000f8e:	23a0      	movs	r3, #160	@ 0xa0
 8000f90:	05db      	lsls	r3, r3, #23
 8000f92:	2200      	movs	r2, #0
 8000f94:	0018      	movs	r0, r3
 8000f96:	f001 f954 	bl	8002242 <HAL_GPIO_WritePin>
                          |IR5_Pin|IR0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BIN2_Pin|BIN1_Pin|STBY_Pin|AIN2_Pin
 8000f9a:	23fa      	movs	r3, #250	@ 0xfa
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	484a      	ldr	r0, [pc, #296]	@ (80010c8 <MX_GPIO_Init+0x1a8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	f001 f94d 	bl	8002242 <HAL_GPIO_WritePin>
                          |AIN1_Pin|STOF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	2202      	movs	r2, #2
 8000fac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	193b      	adds	r3, r7, r4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	193b      	adds	r3, r7, r4
 8000fc2:	4a40      	ldr	r2, [pc, #256]	@ (80010c4 <MX_GPIO_Init+0x1a4>)
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	0010      	movs	r0, r2
 8000fc8:	f000 ffa8 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : IR1_Pin IR2_Pin IR3_Pin IR4_Pin
                           IR5_Pin IR0_Pin */
  GPIO_InitStruct.Pin = IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin
 8000fcc:	0021      	movs	r1, r4
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	22fc      	movs	r2, #252	@ 0xfc
 8000fd2:	0152      	lsls	r2, r2, #5
 8000fd4:	601a      	str	r2, [r3, #0]
                          |IR5_Pin|IR0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	000c      	movs	r4, r1
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	2201      	movs	r2, #1
 8000fdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	193b      	adds	r3, r7, r4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	193a      	adds	r2, r7, r4
 8000fec:	23a0      	movs	r3, #160	@ 0xa0
 8000fee:	05db      	lsls	r3, r3, #23
 8000ff0:	0011      	movs	r1, r2
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 ff92 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : DRUK5_Pin DRUK4_Pin DRUK3_Pin DRUK2_Pin
                           DRUK1_Pin */
  GPIO_InitStruct.Pin = DRUK5_Pin|DRUK4_Pin|DRUK3_Pin|DRUK2_Pin
 8000ff8:	0021      	movs	r1, r4
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	221f      	movs	r2, #31
 8000ffe:	601a      	str	r2, [r3, #0]
                          |DRUK1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2284      	movs	r2, #132	@ 0x84
 8001004:	0392      	lsls	r2, r2, #14
 8001006:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2201      	movs	r2, #1
 800100c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	000c      	movs	r4, r1
 8001010:	187b      	adds	r3, r7, r1
 8001012:	4a2d      	ldr	r2, [pc, #180]	@ (80010c8 <MX_GPIO_Init+0x1a8>)
 8001014:	0019      	movs	r1, r3
 8001016:	0010      	movs	r0, r2
 8001018:	f000 ff80 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_Pin BIN1_Pin STBY_Pin AIN2_Pin
                           AIN1_Pin STOF_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin|STBY_Pin|AIN2_Pin
 800101c:	0021      	movs	r1, r4
 800101e:	187b      	adds	r3, r7, r1
 8001020:	22fa      	movs	r2, #250	@ 0xfa
 8001022:	0212      	lsls	r2, r2, #8
 8001024:	601a      	str	r2, [r3, #0]
                          |AIN1_Pin|STOF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	000c      	movs	r4, r1
 8001028:	193b      	adds	r3, r7, r4
 800102a:	2201      	movs	r2, #1
 800102c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	193b      	adds	r3, r7, r4
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	193b      	adds	r3, r7, r4
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	193b      	adds	r3, r7, r4
 800103c:	4a22      	ldr	r2, [pc, #136]	@ (80010c8 <MX_GPIO_Init+0x1a8>)
 800103e:	0019      	movs	r1, r3
 8001040:	0010      	movs	r0, r2
 8001042:	f000 ff6b 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRUK0_Pin */
  GPIO_InitStruct.Pin = DRUK0_Pin;
 8001046:	193b      	adds	r3, r7, r4
 8001048:	2220      	movs	r2, #32
 800104a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	193b      	adds	r3, r7, r4
 800104e:	2200      	movs	r2, #0
 8001050:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001052:	193b      	adds	r3, r7, r4
 8001054:	2201      	movs	r2, #1
 8001056:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DRUK0_GPIO_Port, &GPIO_InitStruct);
 8001058:	193b      	adds	r3, r7, r4
 800105a:	4a1b      	ldr	r2, [pc, #108]	@ (80010c8 <MX_GPIO_Init+0x1a8>)
 800105c:	0019      	movs	r1, r3
 800105e:	0010      	movs	r0, r2
 8001060:	f000 ff5c 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Pin */
  GPIO_InitStruct.Pin = IR_Pin;
 8001064:	0021      	movs	r1, r4
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2280      	movs	r2, #128	@ 0x80
 800106a:	0052      	lsls	r2, r2, #1
 800106c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2284      	movs	r2, #132	@ 0x84
 8001072:	0392      	lsls	r2, r2, #14
 8001074:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	187b      	adds	r3, r7, r1
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 800107c:	187b      	adds	r3, r7, r1
 800107e:	4a12      	ldr	r2, [pc, #72]	@ (80010c8 <MX_GPIO_Init+0x1a8>)
 8001080:	0019      	movs	r1, r3
 8001082:	0010      	movs	r0, r2
 8001084:	f000 ff4a 	bl	8001f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2005      	movs	r0, #5
 800108e:	f000 ff13 	bl	8001eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001092:	2005      	movs	r0, #5
 8001094:	f000 ff25 	bl	8001ee2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2006      	movs	r0, #6
 800109e:	f000 ff0b 	bl	8001eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80010a2:	2006      	movs	r0, #6
 80010a4:	f000 ff1d 	bl	8001ee2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	2007      	movs	r0, #7
 80010ae:	f000 ff03 	bl	8001eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80010b2:	2007      	movs	r0, #7
 80010b4:	f000 ff15 	bl	8001ee2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b8:	46c0      	nop			@ (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b009      	add	sp, #36	@ 0x24
 80010be:	bd90      	pop	{r4, r7, pc}
 80010c0:	40021000 	.word	0x40021000
 80010c4:	50001c00 	.word	0x50001c00
 80010c8:	50000400 	.word	0x50000400

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
}
 80010d2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d4:	46c0      	nop			@ (mov r8, r8)
 80010d6:	e7fd      	b.n	80010d4 <Error_Handler+0x8>

080010d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <HAL_MspInit+0x24>)
 80010de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_MspInit+0x24>)
 80010e2:	2101      	movs	r1, #1
 80010e4:	430a      	orrs	r2, r1
 80010e6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <HAL_MspInit+0x24>)
 80010ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010ec:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <HAL_MspInit+0x24>)
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0549      	lsls	r1, r1, #21
 80010f2:	430a      	orrs	r2, r1
 80010f4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021000 	.word	0x40021000

08001100 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b089      	sub	sp, #36	@ 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	240c      	movs	r4, #12
 800110a:	193b      	adds	r3, r7, r4
 800110c:	0018      	movs	r0, r3
 800110e:	2314      	movs	r3, #20
 8001110:	001a      	movs	r2, r3
 8001112:	2100      	movs	r1, #0
 8001114:	f003 fd9c 	bl	8004c50 <memset>
  if(hadc->Instance==ADC1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a14      	ldr	r2, [pc, #80]	@ (8001170 <HAL_ADC_MspInit+0x70>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d122      	bne.n	8001168 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001122:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <HAL_ADC_MspInit+0x74>)
 8001124:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001126:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <HAL_ADC_MspInit+0x74>)
 8001128:	2180      	movs	r1, #128	@ 0x80
 800112a:	0089      	lsls	r1, r1, #2
 800112c:	430a      	orrs	r2, r1
 800112e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <HAL_ADC_MspInit+0x74>)
 8001132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001134:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <HAL_ADC_MspInit+0x74>)
 8001136:	2101      	movs	r1, #1
 8001138:	430a      	orrs	r2, r1
 800113a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800113c:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <HAL_ADC_MspInit+0x74>)
 800113e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001140:	2201      	movs	r2, #1
 8001142:	4013      	ands	r3, r2
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001148:	193b      	adds	r3, r7, r4
 800114a:	2207      	movs	r2, #7
 800114c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114e:	193b      	adds	r3, r7, r4
 8001150:	2203      	movs	r2, #3
 8001152:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	193b      	adds	r3, r7, r4
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	193a      	adds	r2, r7, r4
 800115c:	23a0      	movs	r3, #160	@ 0xa0
 800115e:	05db      	lsls	r3, r3, #23
 8001160:	0011      	movs	r1, r2
 8001162:	0018      	movs	r0, r3
 8001164:	f000 feda 	bl	8001f1c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001168:	46c0      	nop			@ (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b009      	add	sp, #36	@ 0x24
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	40012400 	.word	0x40012400
 8001174:	40021000 	.word	0x40021000

08001178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	05db      	lsls	r3, r3, #23
 8001188:	429a      	cmp	r2, r3
 800118a:	d106      	bne.n	800119a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <HAL_TIM_Base_MspInit+0x50>)
 800118e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001190:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <HAL_TIM_Base_MspInit+0x50>)
 8001192:	2101      	movs	r1, #1
 8001194:	430a      	orrs	r2, r1
 8001196:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001198:	e012      	b.n	80011c0 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM6)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a0b      	ldr	r2, [pc, #44]	@ (80011cc <HAL_TIM_Base_MspInit+0x54>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d10d      	bne.n	80011c0 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <HAL_TIM_Base_MspInit+0x50>)
 80011a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011a8:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <HAL_TIM_Base_MspInit+0x50>)
 80011aa:	2110      	movs	r1, #16
 80011ac:	430a      	orrs	r2, r1
 80011ae:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2011      	movs	r0, #17
 80011b6:	f000 fe7f 	bl	8001eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011ba:	2011      	movs	r0, #17
 80011bc:	f000 fe91 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
}
 80011c0:	46c0      	nop			@ (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b002      	add	sp, #8
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40001000 	.word	0x40001000

080011d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b08b      	sub	sp, #44	@ 0x2c
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	2414      	movs	r4, #20
 80011da:	193b      	adds	r3, r7, r4
 80011dc:	0018      	movs	r0, r3
 80011de:	2314      	movs	r3, #20
 80011e0:	001a      	movs	r2, r3
 80011e2:	2100      	movs	r1, #0
 80011e4:	f003 fd34 	bl	8004c50 <memset>
  if(htim->Instance==TIM2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	05db      	lsls	r3, r3, #23
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d145      	bne.n	8001280 <HAL_TIM_MspPostInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f4:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <HAL_TIM_MspPostInit+0xb8>)
 80011f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011f8:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <HAL_TIM_MspPostInit+0xb8>)
 80011fa:	2102      	movs	r1, #2
 80011fc:	430a      	orrs	r2, r1
 80011fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001200:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <HAL_TIM_MspPostInit+0xb8>)
 8001202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001204:	2202      	movs	r2, #2
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <HAL_TIM_MspPostInit+0xb8>)
 800120e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001210:	4b1d      	ldr	r3, [pc, #116]	@ (8001288 <HAL_TIM_MspPostInit+0xb8>)
 8001212:	2101      	movs	r1, #1
 8001214:	430a      	orrs	r2, r1
 8001216:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001218:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <HAL_TIM_MspPostInit+0xb8>)
 800121a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121c:	2201      	movs	r2, #1
 800121e:	4013      	ands	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = CH3_Pin;
 8001224:	193b      	adds	r3, r7, r4
 8001226:	2280      	movs	r2, #128	@ 0x80
 8001228:	00d2      	lsls	r2, r2, #3
 800122a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	193b      	adds	r3, r7, r4
 800122e:	2202      	movs	r2, #2
 8001230:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	193b      	adds	r3, r7, r4
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	193b      	adds	r3, r7, r4
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800123e:	193b      	adds	r3, r7, r4
 8001240:	2202      	movs	r2, #2
 8001242:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8001244:	193b      	adds	r3, r7, r4
 8001246:	4a11      	ldr	r2, [pc, #68]	@ (800128c <HAL_TIM_MspPostInit+0xbc>)
 8001248:	0019      	movs	r1, r3
 800124a:	0010      	movs	r0, r2
 800124c:	f000 fe66 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CH1_Pin;
 8001250:	0021      	movs	r1, r4
 8001252:	187b      	adds	r3, r7, r1
 8001254:	2280      	movs	r2, #128	@ 0x80
 8001256:	0212      	lsls	r2, r2, #8
 8001258:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	187b      	adds	r3, r7, r1
 800125c:	2202      	movs	r2, #2
 800125e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	187b      	adds	r3, r7, r1
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	187b      	adds	r3, r7, r1
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800126c:	187b      	adds	r3, r7, r1
 800126e:	2205      	movs	r2, #5
 8001270:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8001272:	187a      	adds	r2, r7, r1
 8001274:	23a0      	movs	r3, #160	@ 0xa0
 8001276:	05db      	lsls	r3, r3, #23
 8001278:	0011      	movs	r1, r2
 800127a:	0018      	movs	r0, r3
 800127c:	f000 fe4e 	bl	8001f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001280:	46c0      	nop			@ (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	b00b      	add	sp, #44	@ 0x2c
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	40021000 	.word	0x40021000
 800128c:	50000400 	.word	0x50000400

08001290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b089      	sub	sp, #36	@ 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	240c      	movs	r4, #12
 800129a:	193b      	adds	r3, r7, r4
 800129c:	0018      	movs	r0, r3
 800129e:	2314      	movs	r3, #20
 80012a0:	001a      	movs	r2, r3
 80012a2:	2100      	movs	r1, #0
 80012a4:	f003 fcd4 	bl	8004c50 <memset>
  if(huart->Instance==USART1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a17      	ldr	r2, [pc, #92]	@ (800130c <HAL_UART_MspInit+0x7c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d128      	bne.n	8001304 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012b2:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <HAL_UART_MspInit+0x80>)
 80012b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012b6:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <HAL_UART_MspInit+0x80>)
 80012b8:	2180      	movs	r1, #128	@ 0x80
 80012ba:	01c9      	lsls	r1, r1, #7
 80012bc:	430a      	orrs	r2, r1
 80012be:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <HAL_UART_MspInit+0x80>)
 80012c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <HAL_UART_MspInit+0x80>)
 80012c6:	2102      	movs	r1, #2
 80012c8:	430a      	orrs	r2, r1
 80012ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012cc:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <HAL_UART_MspInit+0x80>)
 80012ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d0:	2202      	movs	r2, #2
 80012d2:	4013      	ands	r3, r2
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80012d8:	0021      	movs	r1, r4
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	22c0      	movs	r2, #192	@ 0xc0
 80012de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	2202      	movs	r2, #2
 80012e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	2203      	movs	r2, #3
 80012f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	4a06      	ldr	r2, [pc, #24]	@ (8001314 <HAL_UART_MspInit+0x84>)
 80012fc:	0019      	movs	r1, r3
 80012fe:	0010      	movs	r0, r2
 8001300:	f000 fe0c 	bl	8001f1c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001304:	46c0      	nop			@ (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	b009      	add	sp, #36	@ 0x24
 800130a:	bd90      	pop	{r4, r7, pc}
 800130c:	40013800 	.word	0x40013800
 8001310:	40021000 	.word	0x40021000
 8001314:	50000400 	.word	0x50000400

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800131c:	46c0      	nop			@ (mov r8, r8)
 800131e:	e7fd      	b.n	800131c <NMI_Handler+0x4>

08001320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001324:	46c0      	nop			@ (mov r8, r8)
 8001326:	e7fd      	b.n	8001324 <HardFault_Handler+0x4>

08001328 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800132c:	46c0      	nop			@ (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001340:	f000 f936 	bl	80015b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001344:	46c0      	nop			@ (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRUK5_Pin);
 800134e:	2001      	movs	r0, #1
 8001350:	f000 ff94 	bl	800227c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DRUK4_Pin);
 8001354:	2002      	movs	r0, #2
 8001356:	f000 ff91 	bl	800227c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRUK3_Pin);
 8001364:	2004      	movs	r0, #4
 8001366:	f000 ff89 	bl	800227c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DRUK2_Pin);
 800136a:	2008      	movs	r0, #8
 800136c:	f000 ff86 	bl	800227c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001370:	46c0      	nop			@ (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRUK1_Pin);
 800137a:	2010      	movs	r0, #16
 800137c:	f000 ff7e 	bl	800227c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IR_Pin);
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	0018      	movs	r0, r3
 8001386:	f000 ff79 	bl	800227c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001394:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <TIM6_DAC_IRQHandler+0x14>)
 8001396:	0018      	movs	r0, r3
 8001398:	f002 f888 	bl	80034ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800139c:	46c0      	nop			@ (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	20000120 	.word	0x20000120

080013a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e00a      	b.n	80013d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ba:	e000      	b.n	80013be <_read+0x16>
 80013bc:	bf00      	nop
 80013be:	0001      	movs	r1, r0
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	60ba      	str	r2, [r7, #8]
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf0      	blt.n	80013ba <_read+0x12>
  }

  return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	b006      	add	sp, #24
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	425b      	negs	r3, r3
}
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	2280      	movs	r2, #128	@ 0x80
 8001404:	0192      	lsls	r2, r2, #6
 8001406:	605a      	str	r2, [r3, #4]
  return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	0018      	movs	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	b002      	add	sp, #8
 8001410:	bd80      	pop	{r7, pc}

08001412 <_isatty>:

int _isatty(int file)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800141a:	2301      	movs	r3, #1
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}

08001424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	0018      	movs	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	b004      	add	sp, #16
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	@ (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	18d3      	adds	r3, r2, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800146c:	f003 fc46 	bl	8004cfc <__errno>
 8001470:	0003      	movs	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	2301      	movs	r3, #1
 8001478:	425b      	negs	r3, r3
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	18d2      	adds	r2, r2, r3
 800148a:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <_sbrk+0x64>)
 800148c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	b006      	add	sp, #24
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20002000 	.word	0x20002000
 800149c:	00000400 	.word	0x00000400
 80014a0:	200001ec 	.word	0x200001ec
 80014a4:	20000340 	.word	0x20000340

080014a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ac:	46c0      	nop			@ (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80014b4:	480d      	ldr	r0, [pc, #52]	@ (80014ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014b8:	f7ff fff6 	bl	80014a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014bc:	480c      	ldr	r0, [pc, #48]	@ (80014f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80014be:	490d      	ldr	r1, [pc, #52]	@ (80014f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014c0:	4a0d      	ldr	r2, [pc, #52]	@ (80014f8 <LoopForever+0xe>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a0a      	ldr	r2, [pc, #40]	@ (80014fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001500 <LoopForever+0x16>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e2:	f003 fc11 	bl	8004d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e6:	f7ff fa87 	bl	80009f8 <main>

080014ea <LoopForever>:

LoopForever:
    b LoopForever
 80014ea:	e7fe      	b.n	80014ea <LoopForever>
  ldr   r0, =_estack
 80014ec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80014f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014f8:	080059f4 	.word	0x080059f4
  ldr r2, =_sbss
 80014fc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001500:	20000340 	.word	0x20000340

08001504 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC1_COMP_IRQHandler>
	...

08001508 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <HAL_Init+0x3c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <HAL_Init+0x3c>)
 800151a:	2140      	movs	r1, #64	@ 0x40
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001520:	2003      	movs	r0, #3
 8001522:	f000 f811 	bl	8001548 <HAL_InitTick>
 8001526:	1e03      	subs	r3, r0, #0
 8001528:	d003      	beq.n	8001532 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800152a:	1dfb      	adds	r3, r7, #7
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	e001      	b.n	8001536 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001532:	f7ff fdd1 	bl	80010d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	781b      	ldrb	r3, [r3, #0]
}
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	40022000 	.word	0x40022000

08001548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001550:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <HAL_InitTick+0x5c>)
 8001552:	681c      	ldr	r4, [r3, #0]
 8001554:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <HAL_InitTick+0x60>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	0019      	movs	r1, r3
 800155a:	23fa      	movs	r3, #250	@ 0xfa
 800155c:	0098      	lsls	r0, r3, #2
 800155e:	f7fe fddd 	bl	800011c <__udivsi3>
 8001562:	0003      	movs	r3, r0
 8001564:	0019      	movs	r1, r3
 8001566:	0020      	movs	r0, r4
 8001568:	f7fe fdd8 	bl	800011c <__udivsi3>
 800156c:	0003      	movs	r3, r0
 800156e:	0018      	movs	r0, r3
 8001570:	f000 fcc7 	bl	8001f02 <HAL_SYSTICK_Config>
 8001574:	1e03      	subs	r3, r0, #0
 8001576:	d001      	beq.n	800157c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e00f      	b.n	800159c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d80b      	bhi.n	800159a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	2301      	movs	r3, #1
 8001586:	425b      	negs	r3, r3
 8001588:	2200      	movs	r2, #0
 800158a:	0018      	movs	r0, r3
 800158c:	f000 fc94 	bl	8001eb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_InitTick+0x64>)
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e000      	b.n	800159c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	b003      	add	sp, #12
 80015a2:	bd90      	pop	{r4, r7, pc}
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000004 	.word	0x20000004

080015b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b4:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_IncTick+0x1c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	001a      	movs	r2, r3
 80015ba:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <HAL_IncTick+0x20>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	18d2      	adds	r2, r2, r3
 80015c0:	4b03      	ldr	r3, [pc, #12]	@ (80015d0 <HAL_IncTick+0x20>)
 80015c2:	601a      	str	r2, [r3, #0]
}
 80015c4:	46c0      	nop			@ (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	20000008 	.word	0x20000008
 80015d0:	200001f0 	.word	0x200001f0

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b02      	ldr	r3, [pc, #8]	@ (80015e4 <HAL_GetTick+0x10>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	46c0      	nop			@ (mov r8, r8)
 80015e4:	200001f0 	.word	0x200001f0

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff fff0 	bl	80015d4 <HAL_GetTick>
 80015f4:	0003      	movs	r3, r0
 80015f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3301      	adds	r3, #1
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	001a      	movs	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	189b      	adds	r3, r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	f7ff ffe0 	bl	80015d4 <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	46c0      	nop			@ (mov r8, r8)
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	b004      	add	sp, #16
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			@ (mov r8, r8)
 800162c:	20000008 	.word	0x20000008

08001630 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e159      	b.n	80018f6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10a      	bne.n	8001660 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2250      	movs	r2, #80	@ 0x50
 8001654:	2100      	movs	r1, #0
 8001656:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	0018      	movs	r0, r3
 800165c:	f7ff fd50 	bl	8001100 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001664:	2210      	movs	r2, #16
 8001666:	4013      	ands	r3, r2
 8001668:	2b10      	cmp	r3, #16
 800166a:	d005      	beq.n	8001678 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2204      	movs	r2, #4
 8001674:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001676:	d00b      	beq.n	8001690 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800167c:	2210      	movs	r2, #16
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2250      	movs	r2, #80	@ 0x50
 8001688:	2100      	movs	r1, #0
 800168a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e132      	b.n	80018f6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001694:	4a9a      	ldr	r2, [pc, #616]	@ (8001900 <HAL_ADC_Init+0x2d0>)
 8001696:	4013      	ands	r3, r2
 8001698:	2202      	movs	r2, #2
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2203      	movs	r2, #3
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d108      	bne.n	80016c0 <HAL_ADC_Init+0x90>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2201      	movs	r2, #1
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_ADC_Init+0x90>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_ADC_Init+0x92>
 80016c0:	2300      	movs	r3, #0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d149      	bne.n	800175a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	23c0      	movs	r3, #192	@ 0xc0
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d00b      	beq.n	80016ea <HAL_ADC_Init+0xba>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	2380      	movs	r3, #128	@ 0x80
 80016d8:	05db      	lsls	r3, r3, #23
 80016da:	429a      	cmp	r2, r3
 80016dc:	d005      	beq.n	80016ea <HAL_ADC_Init+0xba>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	061b      	lsls	r3, r3, #24
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d111      	bne.n	800170e <HAL_ADC_Init+0xde>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	0092      	lsls	r2, r2, #2
 80016f6:	0892      	lsrs	r2, r2, #2
 80016f8:	611a      	str	r2, [r3, #16]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6919      	ldr	r1, [r3, #16]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	611a      	str	r2, [r3, #16]
 800170c:	e014      	b.n	8001738 <HAL_ADC_Init+0x108>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0092      	lsls	r2, r2, #2
 800171a:	0892      	lsrs	r2, r2, #2
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	4b79      	ldr	r3, [pc, #484]	@ (8001904 <HAL_ADC_Init+0x2d4>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b78      	ldr	r3, [pc, #480]	@ (8001904 <HAL_ADC_Init+0x2d4>)
 8001724:	4978      	ldr	r1, [pc, #480]	@ (8001908 <HAL_ADC_Init+0x2d8>)
 8001726:	400a      	ands	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	4b76      	ldr	r3, [pc, #472]	@ (8001904 <HAL_ADC_Init+0x2d4>)
 800172c:	6819      	ldr	r1, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4b74      	ldr	r3, [pc, #464]	@ (8001904 <HAL_ADC_Init+0x2d4>)
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2118      	movs	r1, #24
 8001744:	438a      	bics	r2, r1
 8001746:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68d9      	ldr	r1, [r3, #12]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800175a:	4b6a      	ldr	r3, [pc, #424]	@ (8001904 <HAL_ADC_Init+0x2d4>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b69      	ldr	r3, [pc, #420]	@ (8001904 <HAL_ADC_Init+0x2d4>)
 8001760:	496a      	ldr	r1, [pc, #424]	@ (800190c <HAL_ADC_Init+0x2dc>)
 8001762:	400a      	ands	r2, r1
 8001764:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001766:	4b67      	ldr	r3, [pc, #412]	@ (8001904 <HAL_ADC_Init+0x2d4>)
 8001768:	6819      	ldr	r1, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800176e:	065a      	lsls	r2, r3, #25
 8001770:	4b64      	ldr	r3, [pc, #400]	@ (8001904 <HAL_ADC_Init+0x2d4>)
 8001772:	430a      	orrs	r2, r1
 8001774:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	2380      	movs	r3, #128	@ 0x80
 800177e:	055b      	lsls	r3, r3, #21
 8001780:	4013      	ands	r3, r2
 8001782:	d108      	bne.n	8001796 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2180      	movs	r1, #128	@ 0x80
 8001790:	0549      	lsls	r1, r1, #21
 8001792:	430a      	orrs	r2, r1
 8001794:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	495b      	ldr	r1, [pc, #364]	@ (8001910 <HAL_ADC_Init+0x2e0>)
 80017a2:	400a      	ands	r2, r1
 80017a4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68d9      	ldr	r1, [r3, #12]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d101      	bne.n	80017bc <HAL_ADC_Init+0x18c>
 80017b8:	2304      	movs	r3, #4
 80017ba:	e000      	b.n	80017be <HAL_ADC_Init+0x18e>
 80017bc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80017be:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2020      	movs	r0, #32
 80017c4:	5c1b      	ldrb	r3, [r3, r0]
 80017c6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80017c8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	202c      	movs	r0, #44	@ 0x2c
 80017ce:	5c1b      	ldrb	r3, [r3, r0]
 80017d0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80017d2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80017d8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80017e0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80017e8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017f6:	23c2      	movs	r3, #194	@ 0xc2
 80017f8:	33ff      	adds	r3, #255	@ 0xff
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d00b      	beq.n	8001816 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68d9      	ldr	r1, [r3, #12]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2221      	movs	r2, #33	@ 0x21
 800181a:	5c9b      	ldrb	r3, [r3, r2]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d11a      	bne.n	8001856 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2220      	movs	r2, #32
 8001824:	5c9b      	ldrb	r3, [r3, r2]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2180      	movs	r1, #128	@ 0x80
 8001836:	0249      	lsls	r1, r1, #9
 8001838:	430a      	orrs	r2, r1
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	e00b      	b.n	8001856 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001842:	2220      	movs	r2, #32
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184e:	2201      	movs	r2, #1
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800185a:	2b01      	cmp	r3, #1
 800185c:	d11f      	bne.n	800189e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	492a      	ldr	r1, [pc, #168]	@ (8001914 <HAL_ADC_Init+0x2e4>)
 800186a:	400a      	ands	r2, r1
 800186c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6919      	ldr	r1, [r3, #16]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800187c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001882:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691a      	ldr	r2, [r3, #16]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2101      	movs	r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	e00e      	b.n	80018bc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	2201      	movs	r2, #1
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d107      	bne.n	80018bc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2101      	movs	r1, #1
 80018b8:	438a      	bics	r2, r1
 80018ba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2107      	movs	r1, #7
 80018c8:	438a      	bics	r2, r1
 80018ca:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6959      	ldr	r1, [r3, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e8:	2203      	movs	r2, #3
 80018ea:	4393      	bics	r3, r2
 80018ec:	2201      	movs	r2, #1
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	0018      	movs	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b002      	add	sp, #8
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	fffffefd 	.word	0xfffffefd
 8001904:	40012708 	.word	0x40012708
 8001908:	ffc3ffff 	.word	0xffc3ffff
 800190c:	fdffffff 	.word	0xfdffffff
 8001910:	fffe0219 	.word	0xfffe0219
 8001914:	fffffc03 	.word	0xfffffc03

08001918 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001920:	230f      	movs	r3, #15
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2204      	movs	r2, #4
 8001930:	4013      	ands	r3, r2
 8001932:	d138      	bne.n	80019a6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2250      	movs	r2, #80	@ 0x50
 8001938:	5c9b      	ldrb	r3, [r3, r2]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ADC_Start+0x2a>
 800193e:	2302      	movs	r3, #2
 8001940:	e038      	b.n	80019b4 <HAL_ADC_Start+0x9c>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2250      	movs	r2, #80	@ 0x50
 8001946:	2101      	movs	r1, #1
 8001948:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d007      	beq.n	8001962 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001952:	230f      	movs	r3, #15
 8001954:	18fc      	adds	r4, r7, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	0018      	movs	r0, r3
 800195a:	f000 f979 	bl	8001c50 <ADC_Enable>
 800195e:	0003      	movs	r3, r0
 8001960:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001962:	230f      	movs	r3, #15
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d120      	bne.n	80019ae <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001970:	4a12      	ldr	r2, [pc, #72]	@ (80019bc <HAL_ADC_Start+0xa4>)
 8001972:	4013      	ands	r3, r2
 8001974:	2280      	movs	r2, #128	@ 0x80
 8001976:	0052      	lsls	r2, r2, #1
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2250      	movs	r2, #80	@ 0x50
 8001988:	2100      	movs	r1, #0
 800198a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	221c      	movs	r2, #28
 8001992:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2104      	movs	r1, #4
 80019a0:	430a      	orrs	r2, r1
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	e003      	b.n	80019ae <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019a6:	230f      	movs	r3, #15
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	2202      	movs	r2, #2
 80019ac:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80019ae:	230f      	movs	r3, #15
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	781b      	ldrb	r3, [r3, #0]
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b005      	add	sp, #20
 80019ba:	bd90      	pop	{r4, r7, pc}
 80019bc:	fffff0fe 	.word	0xfffff0fe

080019c0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d102      	bne.n	80019e0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80019da:	2308      	movs	r3, #8
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	e014      	b.n	8001a0a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2201      	movs	r2, #1
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d10b      	bne.n	8001a06 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f2:	2220      	movs	r2, #32
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2250      	movs	r2, #80	@ 0x50
 80019fe:	2100      	movs	r1, #0
 8001a00:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e072      	b.n	8001aec <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001a06:	230c      	movs	r3, #12
 8001a08:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a0a:	f7ff fde3 	bl	80015d4 <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a12:	e01f      	b.n	8001a54 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	d01c      	beq.n	8001a54 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d007      	beq.n	8001a30 <HAL_ADC_PollForConversion+0x70>
 8001a20:	f7ff fdd8 	bl	80015d4 <HAL_GetTick>
 8001a24:	0002      	movs	r2, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d211      	bcs.n	8001a54 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d10b      	bne.n	8001a54 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a40:	2204      	movs	r2, #4
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2250      	movs	r2, #80	@ 0x50
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e04b      	b.n	8001aec <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d0d9      	beq.n	8001a14 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a64:	2280      	movs	r2, #128	@ 0x80
 8001a66:	0092      	lsls	r2, r2, #2
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	23c0      	movs	r3, #192	@ 0xc0
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d12e      	bne.n	8001ada <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d129      	bne.n	8001ada <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d122      	bne.n	8001ada <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d110      	bne.n	8001ac2 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	210c      	movs	r1, #12
 8001aac:	438a      	bics	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8001af4 <HAL_ADC_PollForConversion+0x134>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2201      	movs	r2, #1
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ac0:	e00b      	b.n	8001ada <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d103      	bne.n	8001aea <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b004      	add	sp, #16
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	fffffefe 	.word	0xfffffefe

08001af8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001b06:	0018      	movs	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b002      	add	sp, #8
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2250      	movs	r2, #80	@ 0x50
 8001b1e:	5c9b      	ldrb	r3, [r3, r2]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x18>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e085      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x124>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2250      	movs	r2, #80	@ 0x50
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2204      	movs	r2, #4
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d00b      	beq.n	8001b54 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b40:	2220      	movs	r2, #32
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2250      	movs	r2, #80	@ 0x50
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e06f      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	4a38      	ldr	r2, [pc, #224]	@ (8001c3c <HAL_ADC_ConfigChannel+0x12c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d035      	beq.n	8001bca <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	035b      	lsls	r3, r3, #13
 8001b6a:	0b5a      	lsrs	r2, r3, #13
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	02db      	lsls	r3, r3, #11
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d009      	beq.n	8001b94 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001b80:	4b2f      	ldr	r3, [pc, #188]	@ (8001c40 <HAL_ADC_ConfigChannel+0x130>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b2e      	ldr	r3, [pc, #184]	@ (8001c40 <HAL_ADC_ConfigChannel+0x130>)
 8001b86:	2180      	movs	r1, #128	@ 0x80
 8001b88:	0409      	lsls	r1, r1, #16
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001b8e:	200a      	movs	r0, #10
 8001b90:	f000 f8c6 	bl	8001d20 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	029b      	lsls	r3, r3, #10
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d006      	beq.n	8001bae <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001ba0:	4b27      	ldr	r3, [pc, #156]	@ (8001c40 <HAL_ADC_ConfigChannel+0x130>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b26      	ldr	r3, [pc, #152]	@ (8001c40 <HAL_ADC_ConfigChannel+0x130>)
 8001ba6:	2180      	movs	r1, #128	@ 0x80
 8001ba8:	03c9      	lsls	r1, r1, #15
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	025b      	lsls	r3, r3, #9
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d037      	beq.n	8001c2a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8001bba:	4b21      	ldr	r3, [pc, #132]	@ (8001c40 <HAL_ADC_ConfigChannel+0x130>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <HAL_ADC_ConfigChannel+0x130>)
 8001bc0:	2180      	movs	r1, #128	@ 0x80
 8001bc2:	0449      	lsls	r1, r1, #17
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e02f      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	035b      	lsls	r3, r3, #13
 8001bd6:	0b5b      	lsrs	r3, r3, #13
 8001bd8:	43d9      	mvns	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	400a      	ands	r2, r1
 8001be0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	2380      	movs	r3, #128	@ 0x80
 8001be8:	02db      	lsls	r3, r3, #11
 8001bea:	4013      	ands	r3, r2
 8001bec:	d005      	beq.n	8001bfa <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001bee:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <HAL_ADC_ConfigChannel+0x130>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <HAL_ADC_ConfigChannel+0x130>)
 8001bf4:	4913      	ldr	r1, [pc, #76]	@ (8001c44 <HAL_ADC_ConfigChannel+0x134>)
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	029b      	lsls	r3, r3, #10
 8001c02:	4013      	ands	r3, r2
 8001c04:	d005      	beq.n	8001c12 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <HAL_ADC_ConfigChannel+0x130>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c40 <HAL_ADC_ConfigChannel+0x130>)
 8001c0c:	490e      	ldr	r1, [pc, #56]	@ (8001c48 <HAL_ADC_ConfigChannel+0x138>)
 8001c0e:	400a      	ands	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	2380      	movs	r3, #128	@ 0x80
 8001c18:	025b      	lsls	r3, r3, #9
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d005      	beq.n	8001c2a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <HAL_ADC_ConfigChannel+0x130>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <HAL_ADC_ConfigChannel+0x130>)
 8001c24:	4909      	ldr	r1, [pc, #36]	@ (8001c4c <HAL_ADC_ConfigChannel+0x13c>)
 8001c26:	400a      	ands	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2250      	movs	r2, #80	@ 0x50
 8001c2e:	2100      	movs	r1, #0
 8001c30:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	0018      	movs	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b002      	add	sp, #8
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	00001001 	.word	0x00001001
 8001c40:	40012708 	.word	0x40012708
 8001c44:	ff7fffff 	.word	0xff7fffff
 8001c48:	ffbfffff 	.word	0xffbfffff
 8001c4c:	feffffff 	.word	0xfeffffff

08001c50 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2203      	movs	r2, #3
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d108      	bne.n	8001c7c <ADC_Enable+0x2c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2201      	movs	r2, #1
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <ADC_Enable+0x2c>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <ADC_Enable+0x2e>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d146      	bne.n	8001d10 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4a24      	ldr	r2, [pc, #144]	@ (8001d1c <ADC_Enable+0xcc>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d00d      	beq.n	8001caa <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c92:	2210      	movs	r2, #16
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e033      	b.n	8001d12 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f000 f830 	bl	8001d20 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cc0:	f7ff fc88 	bl	80015d4 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001cc8:	e01b      	b.n	8001d02 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cca:	f7ff fc83 	bl	80015d4 <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b0a      	cmp	r3, #10
 8001cd6:	d914      	bls.n	8001d02 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d00d      	beq.n	8001d02 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cea:	2210      	movs	r2, #16
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e007      	b.n	8001d12 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d1dc      	bne.n	8001cca <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	0018      	movs	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b004      	add	sp, #16
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	80000017 	.word	0x80000017

08001d20 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001d28:	4b0b      	ldr	r3, [pc, #44]	@ (8001d58 <ADC_DelayMicroSecond+0x38>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	490b      	ldr	r1, [pc, #44]	@ (8001d5c <ADC_DelayMicroSecond+0x3c>)
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f7fe f9f4 	bl	800011c <__udivsi3>
 8001d34:	0003      	movs	r3, r0
 8001d36:	001a      	movs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4353      	muls	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001d3e:	e002      	b.n	8001d46 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f9      	bne.n	8001d40 <ADC_DelayMicroSecond+0x20>
  }
}
 8001d4c:	46c0      	nop			@ (mov r8, r8)
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b004      	add	sp, #16
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	000f4240 	.word	0x000f4240

08001d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	0002      	movs	r2, r0
 8001d68:	1dfb      	adds	r3, r7, #7
 8001d6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	1dfb      	adds	r3, r7, #7
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d72:	d809      	bhi.n	8001d88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d74:	1dfb      	adds	r3, r7, #7
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	001a      	movs	r2, r3
 8001d7a:	231f      	movs	r3, #31
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <__NVIC_EnableIRQ+0x30>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	4091      	lsls	r1, r2
 8001d84:	000a      	movs	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]
  }
}
 8001d88:	46c0      	nop			@ (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b002      	add	sp, #8
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	1dfb      	adds	r3, r7, #7
 8001da0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001da2:	1dfb      	adds	r3, r7, #7
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001da8:	d828      	bhi.n	8001dfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001daa:	4a2f      	ldr	r2, [pc, #188]	@ (8001e68 <__NVIC_SetPriority+0xd4>)
 8001dac:	1dfb      	adds	r3, r7, #7
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	33c0      	adds	r3, #192	@ 0xc0
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	589b      	ldr	r3, [r3, r2]
 8001dba:	1dfa      	adds	r2, r7, #7
 8001dbc:	7812      	ldrb	r2, [r2, #0]
 8001dbe:	0011      	movs	r1, r2
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	00d2      	lsls	r2, r2, #3
 8001dc6:	21ff      	movs	r1, #255	@ 0xff
 8001dc8:	4091      	lsls	r1, r2
 8001dca:	000a      	movs	r2, r1
 8001dcc:	43d2      	mvns	r2, r2
 8001dce:	401a      	ands	r2, r3
 8001dd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	019b      	lsls	r3, r3, #6
 8001dd6:	22ff      	movs	r2, #255	@ 0xff
 8001dd8:	401a      	ands	r2, r3
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	0018      	movs	r0, r3
 8001de0:	2303      	movs	r3, #3
 8001de2:	4003      	ands	r3, r0
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001de8:	481f      	ldr	r0, [pc, #124]	@ (8001e68 <__NVIC_SetPriority+0xd4>)
 8001dea:	1dfb      	adds	r3, r7, #7
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b25b      	sxtb	r3, r3
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	430a      	orrs	r2, r1
 8001df4:	33c0      	adds	r3, #192	@ 0xc0
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001dfa:	e031      	b.n	8001e60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8001e6c <__NVIC_SetPriority+0xd8>)
 8001dfe:	1dfb      	adds	r3, r7, #7
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	0019      	movs	r1, r3
 8001e04:	230f      	movs	r3, #15
 8001e06:	400b      	ands	r3, r1
 8001e08:	3b08      	subs	r3, #8
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3306      	adds	r3, #6
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	18d3      	adds	r3, r2, r3
 8001e12:	3304      	adds	r3, #4
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	1dfa      	adds	r2, r7, #7
 8001e18:	7812      	ldrb	r2, [r2, #0]
 8001e1a:	0011      	movs	r1, r2
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	400a      	ands	r2, r1
 8001e20:	00d2      	lsls	r2, r2, #3
 8001e22:	21ff      	movs	r1, #255	@ 0xff
 8001e24:	4091      	lsls	r1, r2
 8001e26:	000a      	movs	r2, r1
 8001e28:	43d2      	mvns	r2, r2
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	019b      	lsls	r3, r3, #6
 8001e32:	22ff      	movs	r2, #255	@ 0xff
 8001e34:	401a      	ands	r2, r3
 8001e36:	1dfb      	adds	r3, r7, #7
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	4003      	ands	r3, r0
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e44:	4809      	ldr	r0, [pc, #36]	@ (8001e6c <__NVIC_SetPriority+0xd8>)
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	001c      	movs	r4, r3
 8001e4c:	230f      	movs	r3, #15
 8001e4e:	4023      	ands	r3, r4
 8001e50:	3b08      	subs	r3, #8
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	430a      	orrs	r2, r1
 8001e56:	3306      	adds	r3, #6
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	18c3      	adds	r3, r0, r3
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	601a      	str	r2, [r3, #0]
}
 8001e60:	46c0      	nop			@ (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b003      	add	sp, #12
 8001e66:	bd90      	pop	{r4, r7, pc}
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	1e5a      	subs	r2, r3, #1
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	045b      	lsls	r3, r3, #17
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d301      	bcc.n	8001e88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e84:	2301      	movs	r3, #1
 8001e86:	e010      	b.n	8001eaa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e88:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <SysTick_Config+0x44>)
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	3a01      	subs	r2, #1
 8001e8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e90:	2301      	movs	r3, #1
 8001e92:	425b      	negs	r3, r3
 8001e94:	2103      	movs	r1, #3
 8001e96:	0018      	movs	r0, r3
 8001e98:	f7ff ff7c 	bl	8001d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <SysTick_Config+0x44>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea2:	4b04      	ldr	r3, [pc, #16]	@ (8001eb4 <SysTick_Config+0x44>)
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	0018      	movs	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b002      	add	sp, #8
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			@ (mov r8, r8)
 8001eb4:	e000e010 	.word	0xe000e010

08001eb8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	1c02      	adds	r2, r0, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	187b      	adds	r3, r7, r1
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	b25b      	sxtb	r3, r3
 8001ed2:	0011      	movs	r1, r2
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7ff ff5d 	bl	8001d94 <__NVIC_SetPriority>
}
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b004      	add	sp, #16
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	0002      	movs	r2, r0
 8001eea:	1dfb      	adds	r3, r7, #7
 8001eec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eee:	1dfb      	adds	r3, r7, #7
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	b25b      	sxtb	r3, r3
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7ff ff33 	bl	8001d60 <__NVIC_EnableIRQ>
}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b002      	add	sp, #8
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff ffaf 	bl	8001e70 <SysTick_Config>
 8001f12:	0003      	movs	r3, r0
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b002      	add	sp, #8
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f32:	e14f      	b.n	80021d4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2101      	movs	r1, #1
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4091      	lsls	r1, r2
 8001f3e:	000a      	movs	r2, r1
 8001f40:	4013      	ands	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d100      	bne.n	8001f4c <HAL_GPIO_Init+0x30>
 8001f4a:	e140      	b.n	80021ce <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2203      	movs	r2, #3
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d005      	beq.n	8001f64 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d130      	bne.n	8001fc6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	409a      	lsls	r2, r3
 8001f72:	0013      	movs	r3, r2
 8001f74:	43da      	mvns	r2, r3
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	409a      	lsls	r2, r3
 8001f86:	0013      	movs	r3, r2
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	0013      	movs	r3, r2
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	0013      	movs	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2203      	movs	r2, #3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d017      	beq.n	8002002 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	0013      	movs	r3, r2
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	0013      	movs	r3, r2
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2203      	movs	r2, #3
 8002008:	4013      	ands	r3, r2
 800200a:	2b02      	cmp	r3, #2
 800200c:	d123      	bne.n	8002056 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	08da      	lsrs	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3208      	adds	r2, #8
 8002016:	0092      	lsls	r2, r2, #2
 8002018:	58d3      	ldr	r3, [r2, r3]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2207      	movs	r2, #7
 8002020:	4013      	ands	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	409a      	lsls	r2, r3
 8002028:	0013      	movs	r3, r2
 800202a:	43da      	mvns	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2107      	movs	r1, #7
 800203a:	400b      	ands	r3, r1
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	409a      	lsls	r2, r3
 8002040:	0013      	movs	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	08da      	lsrs	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3208      	adds	r2, #8
 8002050:	0092      	lsls	r2, r2, #2
 8002052:	6939      	ldr	r1, [r7, #16]
 8002054:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	2203      	movs	r2, #3
 8002062:	409a      	lsls	r2, r3
 8002064:	0013      	movs	r3, r2
 8002066:	43da      	mvns	r2, r3
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2203      	movs	r2, #3
 8002074:	401a      	ands	r2, r3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	409a      	lsls	r2, r3
 800207c:	0013      	movs	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	23c0      	movs	r3, #192	@ 0xc0
 8002090:	029b      	lsls	r3, r3, #10
 8002092:	4013      	ands	r3, r2
 8002094:	d100      	bne.n	8002098 <HAL_GPIO_Init+0x17c>
 8002096:	e09a      	b.n	80021ce <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002098:	4b54      	ldr	r3, [pc, #336]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 800209a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800209c:	4b53      	ldr	r3, [pc, #332]	@ (80021ec <HAL_GPIO_Init+0x2d0>)
 800209e:	2101      	movs	r1, #1
 80020a0:	430a      	orrs	r2, r1
 80020a2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80020a4:	4a52      	ldr	r2, [pc, #328]	@ (80021f0 <HAL_GPIO_Init+0x2d4>)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	589b      	ldr	r3, [r3, r2]
 80020b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2203      	movs	r2, #3
 80020b6:	4013      	ands	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	220f      	movs	r2, #15
 80020bc:	409a      	lsls	r2, r3
 80020be:	0013      	movs	r3, r2
 80020c0:	43da      	mvns	r2, r3
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	23a0      	movs	r3, #160	@ 0xa0
 80020cc:	05db      	lsls	r3, r3, #23
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d019      	beq.n	8002106 <HAL_GPIO_Init+0x1ea>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a47      	ldr	r2, [pc, #284]	@ (80021f4 <HAL_GPIO_Init+0x2d8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0x1e6>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a46      	ldr	r2, [pc, #280]	@ (80021f8 <HAL_GPIO_Init+0x2dc>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00d      	beq.n	80020fe <HAL_GPIO_Init+0x1e2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a45      	ldr	r2, [pc, #276]	@ (80021fc <HAL_GPIO_Init+0x2e0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <HAL_GPIO_Init+0x1de>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a44      	ldr	r2, [pc, #272]	@ (8002200 <HAL_GPIO_Init+0x2e4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <HAL_GPIO_Init+0x1da>
 80020f2:	2305      	movs	r3, #5
 80020f4:	e008      	b.n	8002108 <HAL_GPIO_Init+0x1ec>
 80020f6:	2306      	movs	r3, #6
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x1ec>
 80020fa:	2303      	movs	r3, #3
 80020fc:	e004      	b.n	8002108 <HAL_GPIO_Init+0x1ec>
 80020fe:	2302      	movs	r3, #2
 8002100:	e002      	b.n	8002108 <HAL_GPIO_Init+0x1ec>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_GPIO_Init+0x1ec>
 8002106:	2300      	movs	r3, #0
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	2103      	movs	r1, #3
 800210c:	400a      	ands	r2, r1
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	4093      	lsls	r3, r2
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002118:	4935      	ldr	r1, [pc, #212]	@ (80021f0 <HAL_GPIO_Init+0x2d4>)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002126:	4b37      	ldr	r3, [pc, #220]	@ (8002204 <HAL_GPIO_Init+0x2e8>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	43da      	mvns	r2, r3
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	2380      	movs	r3, #128	@ 0x80
 800213c:	035b      	lsls	r3, r3, #13
 800213e:	4013      	ands	r3, r2
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800214a:	4b2e      	ldr	r3, [pc, #184]	@ (8002204 <HAL_GPIO_Init+0x2e8>)
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002150:	4b2c      	ldr	r3, [pc, #176]	@ (8002204 <HAL_GPIO_Init+0x2e8>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	43da      	mvns	r2, r3
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	2380      	movs	r3, #128	@ 0x80
 8002166:	039b      	lsls	r3, r3, #14
 8002168:	4013      	ands	r3, r2
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002174:	4b23      	ldr	r3, [pc, #140]	@ (8002204 <HAL_GPIO_Init+0x2e8>)
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800217a:	4b22      	ldr	r3, [pc, #136]	@ (8002204 <HAL_GPIO_Init+0x2e8>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	43da      	mvns	r2, r3
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	2380      	movs	r3, #128	@ 0x80
 8002190:	029b      	lsls	r3, r3, #10
 8002192:	4013      	ands	r3, r2
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800219e:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_GPIO_Init+0x2e8>)
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a4:	4b17      	ldr	r3, [pc, #92]	@ (8002204 <HAL_GPIO_Init+0x2e8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	43da      	mvns	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	2380      	movs	r3, #128	@ 0x80
 80021ba:	025b      	lsls	r3, r3, #9
 80021bc:	4013      	ands	r3, r2
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002204 <HAL_GPIO_Init+0x2e8>)
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3301      	adds	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	40da      	lsrs	r2, r3
 80021dc:	1e13      	subs	r3, r2, #0
 80021de:	d000      	beq.n	80021e2 <HAL_GPIO_Init+0x2c6>
 80021e0:	e6a8      	b.n	8001f34 <HAL_GPIO_Init+0x18>
  }
}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	46c0      	nop			@ (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b006      	add	sp, #24
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010000 	.word	0x40010000
 80021f4:	50000400 	.word	0x50000400
 80021f8:	50000800 	.word	0x50000800
 80021fc:	50000c00 	.word	0x50000c00
 8002200:	50001c00 	.word	0x50001c00
 8002204:	40010400 	.word	0x40010400

08002208 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	000a      	movs	r2, r1
 8002212:	1cbb      	adds	r3, r7, #2
 8002214:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	1cba      	adds	r2, r7, #2
 800221c:	8812      	ldrh	r2, [r2, #0]
 800221e:	4013      	ands	r3, r2
 8002220:	d004      	beq.n	800222c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002222:	230f      	movs	r3, #15
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	e003      	b.n	8002234 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800222c:	230f      	movs	r3, #15
 800222e:	18fb      	adds	r3, r7, r3
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002234:	230f      	movs	r3, #15
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	781b      	ldrb	r3, [r3, #0]
}
 800223a:	0018      	movs	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	b004      	add	sp, #16
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	0008      	movs	r0, r1
 800224c:	0011      	movs	r1, r2
 800224e:	1cbb      	adds	r3, r7, #2
 8002250:	1c02      	adds	r2, r0, #0
 8002252:	801a      	strh	r2, [r3, #0]
 8002254:	1c7b      	adds	r3, r7, #1
 8002256:	1c0a      	adds	r2, r1, #0
 8002258:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800225a:	1c7b      	adds	r3, r7, #1
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d004      	beq.n	800226c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002262:	1cbb      	adds	r3, r7, #2
 8002264:	881a      	ldrh	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800226a:	e003      	b.n	8002274 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800226c:	1cbb      	adds	r3, r7, #2
 800226e:	881a      	ldrh	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002274:	46c0      	nop			@ (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b002      	add	sp, #8
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	0002      	movs	r2, r0
 8002284:	1dbb      	adds	r3, r7, #6
 8002286:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002288:	4b09      	ldr	r3, [pc, #36]	@ (80022b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	1dba      	adds	r2, r7, #6
 800228e:	8812      	ldrh	r2, [r2, #0]
 8002290:	4013      	ands	r3, r2
 8002292:	d008      	beq.n	80022a6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002296:	1dba      	adds	r2, r7, #6
 8002298:	8812      	ldrh	r2, [r2, #0]
 800229a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800229c:	1dbb      	adds	r3, r7, #6
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f7fe f989 	bl	80005b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b002      	add	sp, #8
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	40010400 	.word	0x40010400

080022b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b4:	b5b0      	push	{r4, r5, r7, lr}
 80022b6:	b08a      	sub	sp, #40	@ 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d102      	bne.n	80022c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f000 fbaf 	bl	8002a26 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c8:	4bcf      	ldr	r3, [pc, #828]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	220c      	movs	r2, #12
 80022ce:	4013      	ands	r3, r2
 80022d0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d2:	4bcd      	ldr	r3, [pc, #820]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	2380      	movs	r3, #128	@ 0x80
 80022d8:	025b      	lsls	r3, r3, #9
 80022da:	4013      	ands	r3, r2
 80022dc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2201      	movs	r2, #1
 80022e4:	4013      	ands	r3, r2
 80022e6:	d100      	bne.n	80022ea <HAL_RCC_OscConfig+0x36>
 80022e8:	e07e      	b.n	80023e8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d007      	beq.n	8002300 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	2b0c      	cmp	r3, #12
 80022f4:	d112      	bne.n	800231c <HAL_RCC_OscConfig+0x68>
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	025b      	lsls	r3, r3, #9
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d10d      	bne.n	800231c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	4bc1      	ldr	r3, [pc, #772]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	@ 0x80
 8002306:	029b      	lsls	r3, r3, #10
 8002308:	4013      	ands	r3, r2
 800230a:	d100      	bne.n	800230e <HAL_RCC_OscConfig+0x5a>
 800230c:	e06b      	b.n	80023e6 <HAL_RCC_OscConfig+0x132>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d167      	bne.n	80023e6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	f000 fb85 	bl	8002a26 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	025b      	lsls	r3, r3, #9
 8002324:	429a      	cmp	r2, r3
 8002326:	d107      	bne.n	8002338 <HAL_RCC_OscConfig+0x84>
 8002328:	4bb7      	ldr	r3, [pc, #732]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4bb6      	ldr	r3, [pc, #728]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 800232e:	2180      	movs	r1, #128	@ 0x80
 8002330:	0249      	lsls	r1, r1, #9
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e027      	b.n	8002388 <HAL_RCC_OscConfig+0xd4>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	23a0      	movs	r3, #160	@ 0xa0
 800233e:	02db      	lsls	r3, r3, #11
 8002340:	429a      	cmp	r2, r3
 8002342:	d10e      	bne.n	8002362 <HAL_RCC_OscConfig+0xae>
 8002344:	4bb0      	ldr	r3, [pc, #704]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4baf      	ldr	r3, [pc, #700]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 800234a:	2180      	movs	r1, #128	@ 0x80
 800234c:	02c9      	lsls	r1, r1, #11
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	4bad      	ldr	r3, [pc, #692]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4bac      	ldr	r3, [pc, #688]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002358:	2180      	movs	r1, #128	@ 0x80
 800235a:	0249      	lsls	r1, r1, #9
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e012      	b.n	8002388 <HAL_RCC_OscConfig+0xd4>
 8002362:	4ba9      	ldr	r3, [pc, #676]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4ba8      	ldr	r3, [pc, #672]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002368:	49a8      	ldr	r1, [pc, #672]	@ (800260c <HAL_RCC_OscConfig+0x358>)
 800236a:	400a      	ands	r2, r1
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	4ba6      	ldr	r3, [pc, #664]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	025b      	lsls	r3, r3, #9
 8002376:	4013      	ands	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4ba2      	ldr	r3, [pc, #648]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4ba1      	ldr	r3, [pc, #644]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002382:	49a3      	ldr	r1, [pc, #652]	@ (8002610 <HAL_RCC_OscConfig+0x35c>)
 8002384:	400a      	ands	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff f920 	bl	80015d4 <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002398:	e009      	b.n	80023ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800239a:	f7ff f91b 	bl	80015d4 <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b64      	cmp	r3, #100	@ 0x64
 80023a6:	d902      	bls.n	80023ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	f000 fb3c 	bl	8002a26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023ae:	4b96      	ldr	r3, [pc, #600]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	2380      	movs	r3, #128	@ 0x80
 80023b4:	029b      	lsls	r3, r3, #10
 80023b6:	4013      	ands	r3, r2
 80023b8:	d0ef      	beq.n	800239a <HAL_RCC_OscConfig+0xe6>
 80023ba:	e015      	b.n	80023e8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023bc:	f7ff f90a 	bl	80015d4 <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c6:	f7ff f905 	bl	80015d4 <HAL_GetTick>
 80023ca:	0002      	movs	r2, r0
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b64      	cmp	r3, #100	@ 0x64
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e326      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023d8:	4b8b      	ldr	r3, [pc, #556]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	2380      	movs	r3, #128	@ 0x80
 80023de:	029b      	lsls	r3, r3, #10
 80023e0:	4013      	ands	r3, r2
 80023e2:	d1f0      	bne.n	80023c6 <HAL_RCC_OscConfig+0x112>
 80023e4:	e000      	b.n	80023e8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2202      	movs	r2, #2
 80023ee:	4013      	ands	r3, r2
 80023f0:	d100      	bne.n	80023f4 <HAL_RCC_OscConfig+0x140>
 80023f2:	e08b      	b.n	800250c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d005      	beq.n	800240c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	2b0c      	cmp	r3, #12
 8002404:	d13e      	bne.n	8002484 <HAL_RCC_OscConfig+0x1d0>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d13b      	bne.n	8002484 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800240c:	4b7e      	ldr	r3, [pc, #504]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2204      	movs	r2, #4
 8002412:	4013      	ands	r3, r2
 8002414:	d004      	beq.n	8002420 <HAL_RCC_OscConfig+0x16c>
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e302      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002420:	4b79      	ldr	r3, [pc, #484]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4a7b      	ldr	r2, [pc, #492]	@ (8002614 <HAL_RCC_OscConfig+0x360>)
 8002426:	4013      	ands	r3, r2
 8002428:	0019      	movs	r1, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	021a      	lsls	r2, r3, #8
 8002430:	4b75      	ldr	r3, [pc, #468]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002432:	430a      	orrs	r2, r1
 8002434:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002436:	4b74      	ldr	r3, [pc, #464]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2209      	movs	r2, #9
 800243c:	4393      	bics	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	4b71      	ldr	r3, [pc, #452]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002448:	f000 fc40 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 800244c:	0001      	movs	r1, r0
 800244e:	4b6e      	ldr	r3, [pc, #440]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	220f      	movs	r2, #15
 8002456:	4013      	ands	r3, r2
 8002458:	4a6f      	ldr	r2, [pc, #444]	@ (8002618 <HAL_RCC_OscConfig+0x364>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	000a      	movs	r2, r1
 800245e:	40da      	lsrs	r2, r3
 8002460:	4b6e      	ldr	r3, [pc, #440]	@ (800261c <HAL_RCC_OscConfig+0x368>)
 8002462:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002464:	4b6e      	ldr	r3, [pc, #440]	@ (8002620 <HAL_RCC_OscConfig+0x36c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2513      	movs	r5, #19
 800246a:	197c      	adds	r4, r7, r5
 800246c:	0018      	movs	r0, r3
 800246e:	f7ff f86b 	bl	8001548 <HAL_InitTick>
 8002472:	0003      	movs	r3, r0
 8002474:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002476:	197b      	adds	r3, r7, r5
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d046      	beq.n	800250c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800247e:	197b      	adds	r3, r7, r5
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	e2d0      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d027      	beq.n	80024da <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800248a:	4b5f      	ldr	r3, [pc, #380]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2209      	movs	r2, #9
 8002490:	4393      	bics	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	4b5c      	ldr	r3, [pc, #368]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7ff f89a 	bl	80015d4 <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a6:	f7ff f895 	bl	80015d4 <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e2b6      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024b8:	4b53      	ldr	r3, [pc, #332]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2204      	movs	r2, #4
 80024be:	4013      	ands	r3, r2
 80024c0:	d0f1      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c2:	4b51      	ldr	r3, [pc, #324]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4a53      	ldr	r2, [pc, #332]	@ (8002614 <HAL_RCC_OscConfig+0x360>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	021a      	lsls	r2, r3, #8
 80024d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	e018      	b.n	800250c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b4b      	ldr	r3, [pc, #300]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4b4a      	ldr	r3, [pc, #296]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 80024e0:	2101      	movs	r1, #1
 80024e2:	438a      	bics	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7ff f875 	bl	80015d4 <HAL_GetTick>
 80024ea:	0003      	movs	r3, r0
 80024ec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f0:	f7ff f870 	bl	80015d4 <HAL_GetTick>
 80024f4:	0002      	movs	r2, r0
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e291      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002502:	4b41      	ldr	r3, [pc, #260]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2204      	movs	r2, #4
 8002508:	4013      	ands	r3, r2
 800250a:	d1f1      	bne.n	80024f0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2210      	movs	r2, #16
 8002512:	4013      	ands	r3, r2
 8002514:	d100      	bne.n	8002518 <HAL_RCC_OscConfig+0x264>
 8002516:	e0a1      	b.n	800265c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d140      	bne.n	80025a0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800251e:	4b3a      	ldr	r3, [pc, #232]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	2380      	movs	r3, #128	@ 0x80
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d005      	beq.n	8002536 <HAL_RCC_OscConfig+0x282>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e277      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002536:	4b34      	ldr	r3, [pc, #208]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4a3a      	ldr	r2, [pc, #232]	@ (8002624 <HAL_RCC_OscConfig+0x370>)
 800253c:	4013      	ands	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002544:	4b30      	ldr	r3, [pc, #192]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002546:	430a      	orrs	r2, r1
 8002548:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800254a:	4b2f      	ldr	r3, [pc, #188]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	0a19      	lsrs	r1, r3, #8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	061a      	lsls	r2, r3, #24
 8002558:	4b2b      	ldr	r3, [pc, #172]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 800255a:	430a      	orrs	r2, r1
 800255c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	0b5b      	lsrs	r3, r3, #13
 8002564:	3301      	adds	r3, #1
 8002566:	2280      	movs	r2, #128	@ 0x80
 8002568:	0212      	lsls	r2, r2, #8
 800256a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800256c:	4b26      	ldr	r3, [pc, #152]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	210f      	movs	r1, #15
 8002574:	400b      	ands	r3, r1
 8002576:	4928      	ldr	r1, [pc, #160]	@ (8002618 <HAL_RCC_OscConfig+0x364>)
 8002578:	5ccb      	ldrb	r3, [r1, r3]
 800257a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800257c:	4b27      	ldr	r3, [pc, #156]	@ (800261c <HAL_RCC_OscConfig+0x368>)
 800257e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002580:	4b27      	ldr	r3, [pc, #156]	@ (8002620 <HAL_RCC_OscConfig+0x36c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2513      	movs	r5, #19
 8002586:	197c      	adds	r4, r7, r5
 8002588:	0018      	movs	r0, r3
 800258a:	f7fe ffdd 	bl	8001548 <HAL_InitTick>
 800258e:	0003      	movs	r3, r0
 8002590:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002592:	197b      	adds	r3, r7, r5
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d060      	beq.n	800265c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800259a:	197b      	adds	r3, r7, r5
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	e242      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d03f      	beq.n	8002628 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025a8:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 80025ae:	2180      	movs	r1, #128	@ 0x80
 80025b0:	0049      	lsls	r1, r1, #1
 80025b2:	430a      	orrs	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7ff f80d 	bl	80015d4 <HAL_GetTick>
 80025ba:	0003      	movs	r3, r0
 80025bc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c0:	f7ff f808 	bl	80015d4 <HAL_GetTick>
 80025c4:	0002      	movs	r2, r0
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e229      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	2380      	movs	r3, #128	@ 0x80
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4013      	ands	r3, r2
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025de:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4a10      	ldr	r2, [pc, #64]	@ (8002624 <HAL_RCC_OscConfig+0x370>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ec:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f2:	4b05      	ldr	r3, [pc, #20]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	0a19      	lsrs	r1, r3, #8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	061a      	lsls	r2, r3, #24
 8002600:	4b01      	ldr	r3, [pc, #4]	@ (8002608 <HAL_RCC_OscConfig+0x354>)
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	e029      	b.n	800265c <HAL_RCC_OscConfig+0x3a8>
 8002608:	40021000 	.word	0x40021000
 800260c:	fffeffff 	.word	0xfffeffff
 8002610:	fffbffff 	.word	0xfffbffff
 8002614:	ffffe0ff 	.word	0xffffe0ff
 8002618:	08005944 	.word	0x08005944
 800261c:	20000000 	.word	0x20000000
 8002620:	20000004 	.word	0x20000004
 8002624:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002628:	4bbd      	ldr	r3, [pc, #756]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4bbc      	ldr	r3, [pc, #752]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 800262e:	49bd      	ldr	r1, [pc, #756]	@ (8002924 <HAL_RCC_OscConfig+0x670>)
 8002630:	400a      	ands	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7fe ffce 	bl	80015d4 <HAL_GetTick>
 8002638:	0003      	movs	r3, r0
 800263a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800263e:	f7fe ffc9 	bl	80015d4 <HAL_GetTick>
 8002642:	0002      	movs	r2, r0
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e1ea      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002650:	4bb3      	ldr	r3, [pc, #716]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	@ 0x80
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4013      	ands	r3, r2
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2208      	movs	r2, #8
 8002662:	4013      	ands	r3, r2
 8002664:	d036      	beq.n	80026d4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d019      	beq.n	80026a2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800266e:	4bac      	ldr	r3, [pc, #688]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 8002670:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002672:	4bab      	ldr	r3, [pc, #684]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 8002674:	2101      	movs	r1, #1
 8002676:	430a      	orrs	r2, r1
 8002678:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7fe ffab 	bl	80015d4 <HAL_GetTick>
 800267e:	0003      	movs	r3, r0
 8002680:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002684:	f7fe ffa6 	bl	80015d4 <HAL_GetTick>
 8002688:	0002      	movs	r2, r0
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1c7      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002696:	4ba2      	ldr	r3, [pc, #648]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 8002698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800269a:	2202      	movs	r2, #2
 800269c:	4013      	ands	r3, r2
 800269e:	d0f1      	beq.n	8002684 <HAL_RCC_OscConfig+0x3d0>
 80026a0:	e018      	b.n	80026d4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a2:	4b9f      	ldr	r3, [pc, #636]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80026a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026a6:	4b9e      	ldr	r3, [pc, #632]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80026a8:	2101      	movs	r1, #1
 80026aa:	438a      	bics	r2, r1
 80026ac:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ae:	f7fe ff91 	bl	80015d4 <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b8:	f7fe ff8c 	bl	80015d4 <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e1ad      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026ca:	4b95      	ldr	r3, [pc, #596]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80026cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ce:	2202      	movs	r2, #2
 80026d0:	4013      	ands	r3, r2
 80026d2:	d1f1      	bne.n	80026b8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2204      	movs	r2, #4
 80026da:	4013      	ands	r3, r2
 80026dc:	d100      	bne.n	80026e0 <HAL_RCC_OscConfig+0x42c>
 80026de:	e0ae      	b.n	800283e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e0:	2027      	movs	r0, #39	@ 0x27
 80026e2:	183b      	adds	r3, r7, r0
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e8:	4b8d      	ldr	r3, [pc, #564]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80026ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	055b      	lsls	r3, r3, #21
 80026f0:	4013      	ands	r3, r2
 80026f2:	d109      	bne.n	8002708 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f4:	4b8a      	ldr	r3, [pc, #552]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80026f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026f8:	4b89      	ldr	r3, [pc, #548]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80026fa:	2180      	movs	r1, #128	@ 0x80
 80026fc:	0549      	lsls	r1, r1, #21
 80026fe:	430a      	orrs	r2, r1
 8002700:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002702:	183b      	adds	r3, r7, r0
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	4b87      	ldr	r3, [pc, #540]	@ (8002928 <HAL_RCC_OscConfig+0x674>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4013      	ands	r3, r2
 8002712:	d11a      	bne.n	800274a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002714:	4b84      	ldr	r3, [pc, #528]	@ (8002928 <HAL_RCC_OscConfig+0x674>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b83      	ldr	r3, [pc, #524]	@ (8002928 <HAL_RCC_OscConfig+0x674>)
 800271a:	2180      	movs	r1, #128	@ 0x80
 800271c:	0049      	lsls	r1, r1, #1
 800271e:	430a      	orrs	r2, r1
 8002720:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002722:	f7fe ff57 	bl	80015d4 <HAL_GetTick>
 8002726:	0003      	movs	r3, r0
 8002728:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272c:	f7fe ff52 	bl	80015d4 <HAL_GetTick>
 8002730:	0002      	movs	r2, r0
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	@ 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e173      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	4b7a      	ldr	r3, [pc, #488]	@ (8002928 <HAL_RCC_OscConfig+0x674>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	2380      	movs	r3, #128	@ 0x80
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4013      	ands	r3, r2
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	2380      	movs	r3, #128	@ 0x80
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	429a      	cmp	r2, r3
 8002754:	d107      	bne.n	8002766 <HAL_RCC_OscConfig+0x4b2>
 8002756:	4b72      	ldr	r3, [pc, #456]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 8002758:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800275a:	4b71      	ldr	r3, [pc, #452]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 800275c:	2180      	movs	r1, #128	@ 0x80
 800275e:	0049      	lsls	r1, r1, #1
 8002760:	430a      	orrs	r2, r1
 8002762:	651a      	str	r2, [r3, #80]	@ 0x50
 8002764:	e031      	b.n	80027ca <HAL_RCC_OscConfig+0x516>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x4d4>
 800276e:	4b6c      	ldr	r3, [pc, #432]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 8002770:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002772:	4b6b      	ldr	r3, [pc, #428]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 8002774:	496b      	ldr	r1, [pc, #428]	@ (8002924 <HAL_RCC_OscConfig+0x670>)
 8002776:	400a      	ands	r2, r1
 8002778:	651a      	str	r2, [r3, #80]	@ 0x50
 800277a:	4b69      	ldr	r3, [pc, #420]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 800277c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800277e:	4b68      	ldr	r3, [pc, #416]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 8002780:	496a      	ldr	r1, [pc, #424]	@ (800292c <HAL_RCC_OscConfig+0x678>)
 8002782:	400a      	ands	r2, r1
 8002784:	651a      	str	r2, [r3, #80]	@ 0x50
 8002786:	e020      	b.n	80027ca <HAL_RCC_OscConfig+0x516>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	23a0      	movs	r3, #160	@ 0xa0
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	429a      	cmp	r2, r3
 8002792:	d10e      	bne.n	80027b2 <HAL_RCC_OscConfig+0x4fe>
 8002794:	4b62      	ldr	r3, [pc, #392]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 8002796:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002798:	4b61      	ldr	r3, [pc, #388]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 800279a:	2180      	movs	r1, #128	@ 0x80
 800279c:	00c9      	lsls	r1, r1, #3
 800279e:	430a      	orrs	r2, r1
 80027a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80027a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80027a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027a6:	4b5e      	ldr	r3, [pc, #376]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80027a8:	2180      	movs	r1, #128	@ 0x80
 80027aa:	0049      	lsls	r1, r1, #1
 80027ac:	430a      	orrs	r2, r1
 80027ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80027b0:	e00b      	b.n	80027ca <HAL_RCC_OscConfig+0x516>
 80027b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80027b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80027b8:	495a      	ldr	r1, [pc, #360]	@ (8002924 <HAL_RCC_OscConfig+0x670>)
 80027ba:	400a      	ands	r2, r1
 80027bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80027be:	4b58      	ldr	r3, [pc, #352]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80027c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027c2:	4b57      	ldr	r3, [pc, #348]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80027c4:	4959      	ldr	r1, [pc, #356]	@ (800292c <HAL_RCC_OscConfig+0x678>)
 80027c6:	400a      	ands	r2, r1
 80027c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d015      	beq.n	80027fe <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d2:	f7fe feff 	bl	80015d4 <HAL_GetTick>
 80027d6:	0003      	movs	r3, r0
 80027d8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027da:	e009      	b.n	80027f0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe fefa 	bl	80015d4 <HAL_GetTick>
 80027e0:	0002      	movs	r2, r0
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	4a52      	ldr	r2, [pc, #328]	@ (8002930 <HAL_RCC_OscConfig+0x67c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e11a      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80027f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4013      	ands	r3, r2
 80027fa:	d0ef      	beq.n	80027dc <HAL_RCC_OscConfig+0x528>
 80027fc:	e014      	b.n	8002828 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fe:	f7fe fee9 	bl	80015d4 <HAL_GetTick>
 8002802:	0003      	movs	r3, r0
 8002804:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002806:	e009      	b.n	800281c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe fee4 	bl	80015d4 <HAL_GetTick>
 800280c:	0002      	movs	r2, r0
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	4a47      	ldr	r2, [pc, #284]	@ (8002930 <HAL_RCC_OscConfig+0x67c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e104      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800281c:	4b40      	ldr	r3, [pc, #256]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 800281e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002820:	2380      	movs	r3, #128	@ 0x80
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4013      	ands	r3, r2
 8002826:	d1ef      	bne.n	8002808 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002828:	2327      	movs	r3, #39	@ 0x27
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d105      	bne.n	800283e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002832:	4b3b      	ldr	r3, [pc, #236]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 8002834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002836:	4b3a      	ldr	r3, [pc, #232]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 8002838:	493e      	ldr	r1, [pc, #248]	@ (8002934 <HAL_RCC_OscConfig+0x680>)
 800283a:	400a      	ands	r2, r1
 800283c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2220      	movs	r2, #32
 8002844:	4013      	ands	r3, r2
 8002846:	d049      	beq.n	80028dc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d026      	beq.n	800289e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002850:	4b33      	ldr	r3, [pc, #204]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	4b32      	ldr	r3, [pc, #200]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 8002856:	2101      	movs	r1, #1
 8002858:	430a      	orrs	r2, r1
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	4b30      	ldr	r3, [pc, #192]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 800285e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002860:	4b2f      	ldr	r3, [pc, #188]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 8002862:	2101      	movs	r1, #1
 8002864:	430a      	orrs	r2, r1
 8002866:	635a      	str	r2, [r3, #52]	@ 0x34
 8002868:	4b33      	ldr	r3, [pc, #204]	@ (8002938 <HAL_RCC_OscConfig+0x684>)
 800286a:	6a1a      	ldr	r2, [r3, #32]
 800286c:	4b32      	ldr	r3, [pc, #200]	@ (8002938 <HAL_RCC_OscConfig+0x684>)
 800286e:	2180      	movs	r1, #128	@ 0x80
 8002870:	0189      	lsls	r1, r1, #6
 8002872:	430a      	orrs	r2, r1
 8002874:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe fead 	bl	80015d4 <HAL_GetTick>
 800287a:	0003      	movs	r3, r0
 800287c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002880:	f7fe fea8 	bl	80015d4 <HAL_GetTick>
 8002884:	0002      	movs	r2, r0
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e0c9      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002892:	4b23      	ldr	r3, [pc, #140]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2202      	movs	r2, #2
 8002898:	4013      	ands	r3, r2
 800289a:	d0f1      	beq.n	8002880 <HAL_RCC_OscConfig+0x5cc>
 800289c:	e01e      	b.n	80028dc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800289e:	4b20      	ldr	r3, [pc, #128]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80028a4:	2101      	movs	r1, #1
 80028a6:	438a      	bics	r2, r1
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	4b23      	ldr	r3, [pc, #140]	@ (8002938 <HAL_RCC_OscConfig+0x684>)
 80028ac:	6a1a      	ldr	r2, [r3, #32]
 80028ae:	4b22      	ldr	r3, [pc, #136]	@ (8002938 <HAL_RCC_OscConfig+0x684>)
 80028b0:	4922      	ldr	r1, [pc, #136]	@ (800293c <HAL_RCC_OscConfig+0x688>)
 80028b2:	400a      	ands	r2, r1
 80028b4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7fe fe8d 	bl	80015d4 <HAL_GetTick>
 80028ba:	0003      	movs	r3, r0
 80028bc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c0:	f7fe fe88 	bl	80015d4 <HAL_GetTick>
 80028c4:	0002      	movs	r2, r0
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0a9      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028d2:	4b13      	ldr	r3, [pc, #76]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2202      	movs	r2, #2
 80028d8:	4013      	ands	r3, r2
 80028da:	d1f1      	bne.n	80028c0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d100      	bne.n	80028e6 <HAL_RCC_OscConfig+0x632>
 80028e4:	e09e      	b.n	8002a24 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	2b0c      	cmp	r3, #12
 80028ea:	d100      	bne.n	80028ee <HAL_RCC_OscConfig+0x63a>
 80028ec:	e077      	b.n	80029de <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d158      	bne.n	80029a8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <HAL_RCC_OscConfig+0x66c>)
 80028fc:	4910      	ldr	r1, [pc, #64]	@ (8002940 <HAL_RCC_OscConfig+0x68c>)
 80028fe:	400a      	ands	r2, r1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7fe fe67 	bl	80015d4 <HAL_GetTick>
 8002906:	0003      	movs	r3, r0
 8002908:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800290a:	e01b      	b.n	8002944 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe fe62 	bl	80015d4 <HAL_GetTick>
 8002910:	0002      	movs	r2, r0
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d914      	bls.n	8002944 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e083      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
 800291e:	46c0      	nop			@ (mov r8, r8)
 8002920:	40021000 	.word	0x40021000
 8002924:	fffffeff 	.word	0xfffffeff
 8002928:	40007000 	.word	0x40007000
 800292c:	fffffbff 	.word	0xfffffbff
 8002930:	00001388 	.word	0x00001388
 8002934:	efffffff 	.word	0xefffffff
 8002938:	40010000 	.word	0x40010000
 800293c:	ffffdfff 	.word	0xffffdfff
 8002940:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002944:	4b3a      	ldr	r3, [pc, #232]	@ (8002a30 <HAL_RCC_OscConfig+0x77c>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	2380      	movs	r3, #128	@ 0x80
 800294a:	049b      	lsls	r3, r3, #18
 800294c:	4013      	ands	r3, r2
 800294e:	d1dd      	bne.n	800290c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002950:	4b37      	ldr	r3, [pc, #220]	@ (8002a30 <HAL_RCC_OscConfig+0x77c>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4a37      	ldr	r2, [pc, #220]	@ (8002a34 <HAL_RCC_OscConfig+0x780>)
 8002956:	4013      	ands	r3, r2
 8002958:	0019      	movs	r1, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002968:	431a      	orrs	r2, r3
 800296a:	4b31      	ldr	r3, [pc, #196]	@ (8002a30 <HAL_RCC_OscConfig+0x77c>)
 800296c:	430a      	orrs	r2, r1
 800296e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002970:	4b2f      	ldr	r3, [pc, #188]	@ (8002a30 <HAL_RCC_OscConfig+0x77c>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b2e      	ldr	r3, [pc, #184]	@ (8002a30 <HAL_RCC_OscConfig+0x77c>)
 8002976:	2180      	movs	r1, #128	@ 0x80
 8002978:	0449      	lsls	r1, r1, #17
 800297a:	430a      	orrs	r2, r1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297e:	f7fe fe29 	bl	80015d4 <HAL_GetTick>
 8002982:	0003      	movs	r3, r0
 8002984:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002988:	f7fe fe24 	bl	80015d4 <HAL_GetTick>
 800298c:	0002      	movs	r2, r0
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e045      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800299a:	4b25      	ldr	r3, [pc, #148]	@ (8002a30 <HAL_RCC_OscConfig+0x77c>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	2380      	movs	r3, #128	@ 0x80
 80029a0:	049b      	lsls	r3, r3, #18
 80029a2:	4013      	ands	r3, r2
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x6d4>
 80029a6:	e03d      	b.n	8002a24 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a8:	4b21      	ldr	r3, [pc, #132]	@ (8002a30 <HAL_RCC_OscConfig+0x77c>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b20      	ldr	r3, [pc, #128]	@ (8002a30 <HAL_RCC_OscConfig+0x77c>)
 80029ae:	4922      	ldr	r1, [pc, #136]	@ (8002a38 <HAL_RCC_OscConfig+0x784>)
 80029b0:	400a      	ands	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fe fe0e 	bl	80015d4 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe fe09 	bl	80015d4 <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e02a      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029d0:	4b17      	ldr	r3, [pc, #92]	@ (8002a30 <HAL_RCC_OscConfig+0x77c>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	049b      	lsls	r3, r3, #18
 80029d8:	4013      	ands	r3, r2
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x70a>
 80029dc:	e022      	b.n	8002a24 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e01d      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029ea:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <HAL_RCC_OscConfig+0x77c>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	2380      	movs	r3, #128	@ 0x80
 80029f4:	025b      	lsls	r3, r3, #9
 80029f6:	401a      	ands	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d10f      	bne.n	8002a20 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	23f0      	movs	r3, #240	@ 0xf0
 8002a04:	039b      	lsls	r3, r3, #14
 8002a06:	401a      	ands	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	23c0      	movs	r3, #192	@ 0xc0
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	401a      	ands	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b00a      	add	sp, #40	@ 0x28
 8002a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a2e:	46c0      	nop			@ (mov r8, r8)
 8002a30:	40021000 	.word	0x40021000
 8002a34:	ff02ffff 	.word	0xff02ffff
 8002a38:	feffffff 	.word	0xfeffffff

08002a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a3c:	b5b0      	push	{r4, r5, r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e128      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a50:	4b96      	ldr	r3, [pc, #600]	@ (8002cac <HAL_RCC_ClockConfig+0x270>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2201      	movs	r2, #1
 8002a56:	4013      	ands	r3, r2
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d91e      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b93      	ldr	r3, [pc, #588]	@ (8002cac <HAL_RCC_ClockConfig+0x270>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2201      	movs	r2, #1
 8002a64:	4393      	bics	r3, r2
 8002a66:	0019      	movs	r1, r3
 8002a68:	4b90      	ldr	r3, [pc, #576]	@ (8002cac <HAL_RCC_ClockConfig+0x270>)
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a70:	f7fe fdb0 	bl	80015d4 <HAL_GetTick>
 8002a74:	0003      	movs	r3, r0
 8002a76:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a78:	e009      	b.n	8002a8e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7a:	f7fe fdab 	bl	80015d4 <HAL_GetTick>
 8002a7e:	0002      	movs	r2, r0
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	4a8a      	ldr	r2, [pc, #552]	@ (8002cb0 <HAL_RCC_ClockConfig+0x274>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e109      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b87      	ldr	r3, [pc, #540]	@ (8002cac <HAL_RCC_ClockConfig+0x270>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2201      	movs	r2, #1
 8002a94:	4013      	ands	r3, r2
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d1ee      	bne.n	8002a7a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d009      	beq.n	8002aba <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa6:	4b83      	ldr	r3, [pc, #524]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	22f0      	movs	r2, #240	@ 0xf0
 8002aac:	4393      	bics	r3, r2
 8002aae:	0019      	movs	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	4b7f      	ldr	r3, [pc, #508]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d100      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0x8a>
 8002ac4:	e089      	b.n	8002bda <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ace:	4b79      	ldr	r3, [pc, #484]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	2380      	movs	r3, #128	@ 0x80
 8002ad4:	029b      	lsls	r3, r3, #10
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d120      	bne.n	8002b1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0e1      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ae6:	4b73      	ldr	r3, [pc, #460]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	2380      	movs	r3, #128	@ 0x80
 8002aec:	049b      	lsls	r3, r3, #18
 8002aee:	4013      	ands	r3, r2
 8002af0:	d114      	bne.n	8002b1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0d5      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d106      	bne.n	8002b0c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002afe:	4b6d      	ldr	r3, [pc, #436]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2204      	movs	r2, #4
 8002b04:	4013      	ands	r3, r2
 8002b06:	d109      	bne.n	8002b1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0ca      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b0c:	4b69      	ldr	r3, [pc, #420]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2380      	movs	r3, #128	@ 0x80
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4013      	ands	r3, r2
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0c2      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1c:	4b65      	ldr	r3, [pc, #404]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2203      	movs	r2, #3
 8002b22:	4393      	bics	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	4b62      	ldr	r3, [pc, #392]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b30:	f7fe fd50 	bl	80015d4 <HAL_GetTick>
 8002b34:	0003      	movs	r3, r0
 8002b36:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d111      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b40:	e009      	b.n	8002b56 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b42:	f7fe fd47 	bl	80015d4 <HAL_GetTick>
 8002b46:	0002      	movs	r2, r0
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	4a58      	ldr	r2, [pc, #352]	@ (8002cb0 <HAL_RCC_ClockConfig+0x274>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e0a5      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b56:	4b57      	ldr	r3, [pc, #348]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d1ef      	bne.n	8002b42 <HAL_RCC_ClockConfig+0x106>
 8002b62:	e03a      	b.n	8002bda <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d111      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6c:	e009      	b.n	8002b82 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6e:	f7fe fd31 	bl	80015d4 <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	4a4d      	ldr	r2, [pc, #308]	@ (8002cb0 <HAL_RCC_ClockConfig+0x274>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e08f      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b82:	4b4c      	ldr	r3, [pc, #304]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	220c      	movs	r2, #12
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d1ef      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x132>
 8002b8e:	e024      	b.n	8002bda <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d11b      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b98:	e009      	b.n	8002bae <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9a:	f7fe fd1b 	bl	80015d4 <HAL_GetTick>
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	4a42      	ldr	r2, [pc, #264]	@ (8002cb0 <HAL_RCC_ClockConfig+0x274>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e079      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bae:	4b41      	ldr	r3, [pc, #260]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d1ef      	bne.n	8002b9a <HAL_RCC_ClockConfig+0x15e>
 8002bba:	e00e      	b.n	8002bda <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbc:	f7fe fd0a 	bl	80015d4 <HAL_GetTick>
 8002bc0:	0002      	movs	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	4a3a      	ldr	r2, [pc, #232]	@ (8002cb0 <HAL_RCC_ClockConfig+0x274>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e068      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bd0:	4b38      	ldr	r3, [pc, #224]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	220c      	movs	r2, #12
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bda:	4b34      	ldr	r3, [pc, #208]	@ (8002cac <HAL_RCC_ClockConfig+0x270>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2201      	movs	r2, #1
 8002be0:	4013      	ands	r3, r2
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d21e      	bcs.n	8002c26 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be8:	4b30      	ldr	r3, [pc, #192]	@ (8002cac <HAL_RCC_ClockConfig+0x270>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2201      	movs	r2, #1
 8002bee:	4393      	bics	r3, r2
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8002cac <HAL_RCC_ClockConfig+0x270>)
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bfa:	f7fe fceb 	bl	80015d4 <HAL_GetTick>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	e009      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c04:	f7fe fce6 	bl	80015d4 <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	4a28      	ldr	r2, [pc, #160]	@ (8002cb0 <HAL_RCC_ClockConfig+0x274>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e044      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c18:	4b24      	ldr	r3, [pc, #144]	@ (8002cac <HAL_RCC_ClockConfig+0x270>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	4013      	ands	r3, r2
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d1ee      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d009      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c30:	4b20      	ldr	r3, [pc, #128]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	4a20      	ldr	r2, [pc, #128]	@ (8002cb8 <HAL_RCC_ClockConfig+0x27c>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002c40:	430a      	orrs	r2, r1
 8002c42:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2208      	movs	r2, #8
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c4e:	4b19      	ldr	r3, [pc, #100]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	4a1a      	ldr	r2, [pc, #104]	@ (8002cbc <HAL_RCC_ClockConfig+0x280>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	00da      	lsls	r2, r3, #3
 8002c5e:	4b15      	ldr	r3, [pc, #84]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002c60:	430a      	orrs	r2, r1
 8002c62:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c64:	f000 f832 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002c68:	0001      	movs	r1, r0
 8002c6a:	4b12      	ldr	r3, [pc, #72]	@ (8002cb4 <HAL_RCC_ClockConfig+0x278>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	220f      	movs	r2, #15
 8002c72:	4013      	ands	r3, r2
 8002c74:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <HAL_RCC_ClockConfig+0x284>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	000a      	movs	r2, r1
 8002c7a:	40da      	lsrs	r2, r3
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_RCC_ClockConfig+0x288>)
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c80:	4b11      	ldr	r3, [pc, #68]	@ (8002cc8 <HAL_RCC_ClockConfig+0x28c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	250b      	movs	r5, #11
 8002c86:	197c      	adds	r4, r7, r5
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7fe fc5d 	bl	8001548 <HAL_InitTick>
 8002c8e:	0003      	movs	r3, r0
 8002c90:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002c92:	197b      	adds	r3, r7, r5
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002c9a:	197b      	adds	r3, r7, r5
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b004      	add	sp, #16
 8002ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8002caa:	46c0      	nop			@ (mov r8, r8)
 8002cac:	40022000 	.word	0x40022000
 8002cb0:	00001388 	.word	0x00001388
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	fffff8ff 	.word	0xfffff8ff
 8002cbc:	ffffc7ff 	.word	0xffffc7ff
 8002cc0:	08005944 	.word	0x08005944
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	20000004 	.word	0x20000004

08002ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	b5b0      	push	{r4, r5, r7, lr}
 8002cce:	b08e      	sub	sp, #56	@ 0x38
 8002cd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002cd2:	4b4c      	ldr	r3, [pc, #304]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x138>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cda:	230c      	movs	r3, #12
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d014      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x40>
 8002ce2:	d900      	bls.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x1a>
 8002ce4:	e07b      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x112>
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d002      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x24>
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d00b      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cee:	e076      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002cf0:	4b44      	ldr	r3, [pc, #272]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x138>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d002      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002cfa:	4b43      	ldr	r3, [pc, #268]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002cfc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002cfe:	e07c      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002d00:	4b42      	ldr	r3, [pc, #264]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x140>)
 8002d02:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002d04:	e079      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d06:	4b42      	ldr	r3, [pc, #264]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x144>)
 8002d08:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002d0a:	e076      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0e:	0c9a      	lsrs	r2, r3, #18
 8002d10:	230f      	movs	r3, #15
 8002d12:	401a      	ands	r2, r3
 8002d14:	4b3f      	ldr	r3, [pc, #252]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x148>)
 8002d16:	5c9b      	ldrb	r3, [r3, r2]
 8002d18:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1c:	0d9a      	lsrs	r2, r3, #22
 8002d1e:	2303      	movs	r3, #3
 8002d20:	4013      	ands	r3, r2
 8002d22:	3301      	adds	r3, #1
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d26:	4b37      	ldr	r3, [pc, #220]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	2380      	movs	r3, #128	@ 0x80
 8002d2c:	025b      	lsls	r3, r3, #9
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d01a      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	4a35      	ldr	r2, [pc, #212]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x144>)
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	69b8      	ldr	r0, [r7, #24]
 8002d40:	69f9      	ldr	r1, [r7, #28]
 8002d42:	f7fd fa97 	bl	8000274 <__aeabi_lmul>
 8002d46:	0002      	movs	r2, r0
 8002d48:	000b      	movs	r3, r1
 8002d4a:	0010      	movs	r0, r2
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f7fd fa6b 	bl	8000234 <__aeabi_uldivmod>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	000b      	movs	r3, r1
 8002d62:	0013      	movs	r3, r2
 8002d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d66:	e037      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002d68:	4b26      	ldr	r3, [pc, #152]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2210      	movs	r2, #16
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d01a      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4a23      	ldr	r2, [pc, #140]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	68b8      	ldr	r0, [r7, #8]
 8002d80:	68f9      	ldr	r1, [r7, #12]
 8002d82:	f7fd fa77 	bl	8000274 <__aeabi_lmul>
 8002d86:	0002      	movs	r2, r0
 8002d88:	000b      	movs	r3, r1
 8002d8a:	0010      	movs	r0, r2
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	2300      	movs	r3, #0
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f7fd fa4b 	bl	8000234 <__aeabi_uldivmod>
 8002d9e:	0002      	movs	r2, r0
 8002da0:	000b      	movs	r3, r1
 8002da2:	0013      	movs	r3, r2
 8002da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002da6:	e017      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002daa:	0018      	movs	r0, r3
 8002dac:	2300      	movs	r3, #0
 8002dae:	0019      	movs	r1, r3
 8002db0:	4a16      	ldr	r2, [pc, #88]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x140>)
 8002db2:	2300      	movs	r3, #0
 8002db4:	f7fd fa5e 	bl	8000274 <__aeabi_lmul>
 8002db8:	0002      	movs	r2, r0
 8002dba:	000b      	movs	r3, r1
 8002dbc:	0010      	movs	r0, r2
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	001c      	movs	r4, r3
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	001d      	movs	r5, r3
 8002dc8:	0022      	movs	r2, r4
 8002dca:	002b      	movs	r3, r5
 8002dcc:	f7fd fa32 	bl	8000234 <__aeabi_uldivmod>
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	000b      	movs	r3, r1
 8002dd4:	0013      	movs	r3, r2
 8002dd6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dda:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002ddc:	e00d      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002dde:	4b09      	ldr	r3, [pc, #36]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x138>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	0b5b      	lsrs	r3, r3, #13
 8002de4:	2207      	movs	r2, #7
 8002de6:	4013      	ands	r3, r2
 8002de8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	3301      	adds	r3, #1
 8002dee:	2280      	movs	r2, #128	@ 0x80
 8002df0:	0212      	lsls	r2, r2, #8
 8002df2:	409a      	lsls	r2, r3
 8002df4:	0013      	movs	r3, r2
 8002df6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002df8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b00e      	add	sp, #56	@ 0x38
 8002e02:	bdb0      	pop	{r4, r5, r7, pc}
 8002e04:	40021000 	.word	0x40021000
 8002e08:	003d0900 	.word	0x003d0900
 8002e0c:	00f42400 	.word	0x00f42400
 8002e10:	016e3600 	.word	0x016e3600
 8002e14:	0800595c 	.word	0x0800595c

08002e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e1c:	4b02      	ldr	r3, [pc, #8]	@ (8002e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	20000000 	.word	0x20000000

08002e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e30:	f7ff fff2 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 8002e34:	0001      	movs	r1, r0
 8002e36:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	4013      	ands	r3, r2
 8002e40:	4a04      	ldr	r2, [pc, #16]	@ (8002e54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e42:	5cd3      	ldrb	r3, [r2, r3]
 8002e44:	40d9      	lsrs	r1, r3
 8002e46:	000b      	movs	r3, r1
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	40021000 	.word	0x40021000
 8002e54:	08005954 	.word	0x08005954

08002e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e5c:	f7ff ffdc 	bl	8002e18 <HAL_RCC_GetHCLKFreq>
 8002e60:	0001      	movs	r1, r0
 8002e62:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	0adb      	lsrs	r3, r3, #11
 8002e68:	2207      	movs	r2, #7
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	4a04      	ldr	r2, [pc, #16]	@ (8002e80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e6e:	5cd3      	ldrb	r3, [r2, r3]
 8002e70:	40d9      	lsrs	r1, r3
 8002e72:	000b      	movs	r3, r1
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	08005954 	.word	0x08005954

08002e84 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002e8c:	2317      	movs	r3, #23
 8002e8e:	18fb      	adds	r3, r7, r3
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d106      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	2380      	movs	r3, #128	@ 0x80
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d100      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002eaa:	e104      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eac:	4bb1      	ldr	r3, [pc, #708]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002eae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eb0:	2380      	movs	r3, #128	@ 0x80
 8002eb2:	055b      	lsls	r3, r3, #21
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d10a      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb8:	4bae      	ldr	r3, [pc, #696]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002eba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ebc:	4bad      	ldr	r3, [pc, #692]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ebe:	2180      	movs	r1, #128	@ 0x80
 8002ec0:	0549      	lsls	r1, r1, #21
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002ec6:	2317      	movs	r3, #23
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ece:	4baa      	ldr	r3, [pc, #680]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	2380      	movs	r3, #128	@ 0x80
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d11a      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eda:	4ba7      	ldr	r3, [pc, #668]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	4ba6      	ldr	r3, [pc, #664]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ee0:	2180      	movs	r1, #128	@ 0x80
 8002ee2:	0049      	lsls	r1, r1, #1
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee8:	f7fe fb74 	bl	80015d4 <HAL_GetTick>
 8002eec:	0003      	movs	r3, r0
 8002eee:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef0:	e008      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef2:	f7fe fb6f 	bl	80015d4 <HAL_GetTick>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b64      	cmp	r3, #100	@ 0x64
 8002efe:	d901      	bls.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e133      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f04:	4b9c      	ldr	r3, [pc, #624]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	2380      	movs	r3, #128	@ 0x80
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002f10:	4b98      	ldr	r3, [pc, #608]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	23c0      	movs	r3, #192	@ 0xc0
 8002f16:	039b      	lsls	r3, r3, #14
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	23c0      	movs	r3, #192	@ 0xc0
 8002f22:	039b      	lsls	r3, r3, #14
 8002f24:	4013      	ands	r3, r2
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	23c0      	movs	r3, #192	@ 0xc0
 8002f32:	039b      	lsls	r3, r3, #14
 8002f34:	4013      	ands	r3, r2
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d013      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	23c0      	movs	r3, #192	@ 0xc0
 8002f42:	029b      	lsls	r3, r3, #10
 8002f44:	401a      	ands	r2, r3
 8002f46:	23c0      	movs	r3, #192	@ 0xc0
 8002f48:	029b      	lsls	r3, r3, #10
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d10a      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002f4e:	4b89      	ldr	r3, [pc, #548]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	2380      	movs	r3, #128	@ 0x80
 8002f54:	029b      	lsls	r3, r3, #10
 8002f56:	401a      	ands	r2, r3
 8002f58:	2380      	movs	r3, #128	@ 0x80
 8002f5a:	029b      	lsls	r3, r3, #10
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e103      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002f64:	4b83      	ldr	r3, [pc, #524]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f68:	23c0      	movs	r3, #192	@ 0xc0
 8002f6a:	029b      	lsls	r3, r3, #10
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d049      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	23c0      	movs	r3, #192	@ 0xc0
 8002f7c:	029b      	lsls	r3, r3, #10
 8002f7e:	4013      	ands	r3, r2
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d004      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d10d      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	23c0      	movs	r3, #192	@ 0xc0
 8002f96:	029b      	lsls	r3, r3, #10
 8002f98:	4013      	ands	r3, r2
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d034      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2380      	movs	r3, #128	@ 0x80
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d02e      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002fac:	4b71      	ldr	r3, [pc, #452]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb0:	4a72      	ldr	r2, [pc, #456]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fb6:	4b6f      	ldr	r3, [pc, #444]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fba:	4b6e      	ldr	r3, [pc, #440]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fbc:	2180      	movs	r1, #128	@ 0x80
 8002fbe:	0309      	lsls	r1, r1, #12
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fc4:	4b6b      	ldr	r3, [pc, #428]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fca:	496d      	ldr	r1, [pc, #436]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002fcc:	400a      	ands	r2, r1
 8002fce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002fd0:	4b68      	ldr	r3, [pc, #416]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d014      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe faf8 	bl	80015d4 <HAL_GetTick>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fe8:	e009      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe faf3 	bl	80015d4 <HAL_GetTick>
 8002fee:	0002      	movs	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	4a63      	ldr	r2, [pc, #396]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e0b6      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ffe:	4b5d      	ldr	r3, [pc, #372]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003002:	2380      	movs	r3, #128	@ 0x80
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4013      	ands	r3, r2
 8003008:	d0ef      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	2380      	movs	r3, #128	@ 0x80
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	4013      	ands	r3, r2
 8003014:	d01f      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	23c0      	movs	r3, #192	@ 0xc0
 800301c:	029b      	lsls	r3, r3, #10
 800301e:	401a      	ands	r2, r3
 8003020:	23c0      	movs	r3, #192	@ 0xc0
 8003022:	029b      	lsls	r3, r3, #10
 8003024:	429a      	cmp	r2, r3
 8003026:	d10c      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003028:	4b52      	ldr	r3, [pc, #328]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a56      	ldr	r2, [pc, #344]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800302e:	4013      	ands	r3, r2
 8003030:	0019      	movs	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	23c0      	movs	r3, #192	@ 0xc0
 8003038:	039b      	lsls	r3, r3, #14
 800303a:	401a      	ands	r2, r3
 800303c:	4b4d      	ldr	r3, [pc, #308]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800303e:	430a      	orrs	r2, r1
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	4b4c      	ldr	r3, [pc, #304]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003044:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	23c0      	movs	r3, #192	@ 0xc0
 800304c:	029b      	lsls	r3, r3, #10
 800304e:	401a      	ands	r2, r3
 8003050:	4b48      	ldr	r3, [pc, #288]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003052:	430a      	orrs	r2, r1
 8003054:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2220      	movs	r2, #32
 800305c:	4013      	ands	r3, r2
 800305e:	d01f      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	23c0      	movs	r3, #192	@ 0xc0
 8003066:	029b      	lsls	r3, r3, #10
 8003068:	401a      	ands	r2, r3
 800306a:	23c0      	movs	r3, #192	@ 0xc0
 800306c:	029b      	lsls	r3, r3, #10
 800306e:	429a      	cmp	r2, r3
 8003070:	d10c      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003072:	4b40      	ldr	r3, [pc, #256]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a44      	ldr	r2, [pc, #272]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003078:	4013      	ands	r3, r2
 800307a:	0019      	movs	r1, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	23c0      	movs	r3, #192	@ 0xc0
 8003082:	039b      	lsls	r3, r3, #14
 8003084:	401a      	ands	r2, r3
 8003086:	4b3b      	ldr	r3, [pc, #236]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003088:	430a      	orrs	r2, r1
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	4b39      	ldr	r3, [pc, #228]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800308e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	23c0      	movs	r3, #192	@ 0xc0
 8003096:	029b      	lsls	r3, r3, #10
 8003098:	401a      	ands	r2, r3
 800309a:	4b36      	ldr	r3, [pc, #216]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800309c:	430a      	orrs	r2, r1
 800309e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030a0:	2317      	movs	r3, #23
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d105      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030aa:	4b32      	ldr	r3, [pc, #200]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030ae:	4b31      	ldr	r3, [pc, #196]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030b0:	4936      	ldr	r1, [pc, #216]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030b2:	400a      	ands	r2, r1
 80030b4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2201      	movs	r2, #1
 80030bc:	4013      	ands	r3, r2
 80030be:	d009      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c4:	2203      	movs	r2, #3
 80030c6:	4393      	bics	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	4b29      	ldr	r3, [pc, #164]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030d0:	430a      	orrs	r2, r1
 80030d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2202      	movs	r2, #2
 80030da:	4013      	ands	r3, r2
 80030dc:	d009      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030de:	4b25      	ldr	r3, [pc, #148]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e2:	220c      	movs	r2, #12
 80030e4:	4393      	bics	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	4b21      	ldr	r3, [pc, #132]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030ee:	430a      	orrs	r2, r1
 80030f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2204      	movs	r2, #4
 80030f8:	4013      	ands	r3, r2
 80030fa:	d009      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003100:	4a23      	ldr	r2, [pc, #140]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003102:	4013      	ands	r3, r2
 8003104:	0019      	movs	r1, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	4b1a      	ldr	r3, [pc, #104]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800310c:	430a      	orrs	r2, r1
 800310e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2208      	movs	r2, #8
 8003116:	4013      	ands	r3, r2
 8003118:	d009      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800311a:	4b16      	ldr	r3, [pc, #88]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311e:	4a1d      	ldr	r2, [pc, #116]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003120:	4013      	ands	r3, r2
 8003122:	0019      	movs	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	4b12      	ldr	r3, [pc, #72]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800312a:	430a      	orrs	r2, r1
 800312c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2240      	movs	r2, #64	@ 0x40
 8003134:	4013      	ands	r3, r2
 8003136:	d009      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003138:	4b0e      	ldr	r3, [pc, #56]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800313a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313c:	4a16      	ldr	r2, [pc, #88]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800313e:	4013      	ands	r3, r2
 8003140:	0019      	movs	r1, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1a      	ldr	r2, [r3, #32]
 8003146:	4b0b      	ldr	r3, [pc, #44]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003148:	430a      	orrs	r2, r1
 800314a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2280      	movs	r2, #128	@ 0x80
 8003152:	4013      	ands	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003156:	4b07      	ldr	r3, [pc, #28]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315a:	4a10      	ldr	r2, [pc, #64]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800315c:	4013      	ands	r3, r2
 800315e:	0019      	movs	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	4b03      	ldr	r3, [pc, #12]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003166:	430a      	orrs	r2, r1
 8003168:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	0018      	movs	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	b006      	add	sp, #24
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	40007000 	.word	0x40007000
 800317c:	fffcffff 	.word	0xfffcffff
 8003180:	fff7ffff 	.word	0xfff7ffff
 8003184:	00001388 	.word	0x00001388
 8003188:	ffcfffff 	.word	0xffcfffff
 800318c:	efffffff 	.word	0xefffffff
 8003190:	fffff3ff 	.word	0xfffff3ff
 8003194:	ffffcfff 	.word	0xffffcfff
 8003198:	fbffffff 	.word	0xfbffffff
 800319c:	fff3ffff 	.word	0xfff3ffff

080031a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e032      	b.n	8003218 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2239      	movs	r2, #57	@ 0x39
 80031b6:	5c9b      	ldrb	r3, [r3, r2]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2238      	movs	r2, #56	@ 0x38
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7fd ffd5 	bl	8001178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2239      	movs	r2, #57	@ 0x39
 80031d2:	2102      	movs	r1, #2
 80031d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3304      	adds	r3, #4
 80031de:	0019      	movs	r1, r3
 80031e0:	0010      	movs	r0, r2
 80031e2:	f000 fc05 	bl	80039f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	223e      	movs	r2, #62	@ 0x3e
 80031ea:	2101      	movs	r1, #1
 80031ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	223a      	movs	r2, #58	@ 0x3a
 80031f2:	2101      	movs	r1, #1
 80031f4:	5499      	strb	r1, [r3, r2]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	223b      	movs	r2, #59	@ 0x3b
 80031fa:	2101      	movs	r1, #1
 80031fc:	5499      	strb	r1, [r3, r2]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	223c      	movs	r2, #60	@ 0x3c
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	223d      	movs	r2, #61	@ 0x3d
 800320a:	2101      	movs	r1, #1
 800320c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2239      	movs	r2, #57	@ 0x39
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b002      	add	sp, #8
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2239      	movs	r2, #57	@ 0x39
 800322c:	5c9b      	ldrb	r3, [r3, r2]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	d001      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e036      	b.n	80032a6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2239      	movs	r2, #57	@ 0x39
 800323c:	2102      	movs	r1, #2
 800323e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2101      	movs	r1, #1
 800324c:	430a      	orrs	r2, r1
 800324e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	2380      	movs	r3, #128	@ 0x80
 8003256:	05db      	lsls	r3, r3, #23
 8003258:	429a      	cmp	r2, r3
 800325a:	d009      	beq.n	8003270 <HAL_TIM_Base_Start_IT+0x50>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a13      	ldr	r2, [pc, #76]	@ (80032b0 <HAL_TIM_Base_Start_IT+0x90>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <HAL_TIM_Base_Start_IT+0x50>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a12      	ldr	r2, [pc, #72]	@ (80032b4 <HAL_TIM_Base_Start_IT+0x94>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d111      	bne.n	8003294 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2207      	movs	r2, #7
 8003278:	4013      	ands	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b06      	cmp	r3, #6
 8003280:	d010      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2101      	movs	r1, #1
 800328e:	430a      	orrs	r2, r1
 8003290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003292:	e007      	b.n	80032a4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2101      	movs	r1, #1
 80032a0:	430a      	orrs	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	0018      	movs	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b004      	add	sp, #16
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	40010800 	.word	0x40010800
 80032b4:	40011400 	.word	0x40011400

080032b8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2101      	movs	r1, #1
 80032cc:	438a      	bics	r2, r1
 80032ce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003300 <HAL_TIM_Base_Stop_IT+0x48>)
 80032d8:	4013      	ands	r3, r2
 80032da:	d107      	bne.n	80032ec <HAL_TIM_Base_Stop_IT+0x34>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2101      	movs	r1, #1
 80032e8:	438a      	bics	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2239      	movs	r2, #57	@ 0x39
 80032f0:	2101      	movs	r1, #1
 80032f2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	0018      	movs	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b002      	add	sp, #8
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			@ (mov r8, r8)
 8003300:	00001111 	.word	0x00001111

08003304 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e032      	b.n	800337c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2239      	movs	r2, #57	@ 0x39
 800331a:	5c9b      	ldrb	r3, [r3, r2]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d107      	bne.n	8003332 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2238      	movs	r2, #56	@ 0x38
 8003326:	2100      	movs	r1, #0
 8003328:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	0018      	movs	r0, r3
 800332e:	f000 f829 	bl	8003384 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2239      	movs	r2, #57	@ 0x39
 8003336:	2102      	movs	r1, #2
 8003338:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3304      	adds	r3, #4
 8003342:	0019      	movs	r1, r3
 8003344:	0010      	movs	r0, r2
 8003346:	f000 fb53 	bl	80039f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	223e      	movs	r2, #62	@ 0x3e
 800334e:	2101      	movs	r1, #1
 8003350:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	223a      	movs	r2, #58	@ 0x3a
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	223b      	movs	r2, #59	@ 0x3b
 800335e:	2101      	movs	r1, #1
 8003360:	5499      	strb	r1, [r3, r2]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	223c      	movs	r2, #60	@ 0x3c
 8003366:	2101      	movs	r1, #1
 8003368:	5499      	strb	r1, [r3, r2]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	223d      	movs	r2, #61	@ 0x3d
 800336e:	2101      	movs	r1, #1
 8003370:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2239      	movs	r2, #57	@ 0x39
 8003376:	2101      	movs	r1, #1
 8003378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	0018      	movs	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	b002      	add	sp, #8
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d108      	bne.n	80033b6 <HAL_TIM_PWM_Start+0x22>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	223a      	movs	r2, #58	@ 0x3a
 80033a8:	5c9b      	ldrb	r3, [r3, r2]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	1e5a      	subs	r2, r3, #1
 80033b0:	4193      	sbcs	r3, r2
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	e01f      	b.n	80033f6 <HAL_TIM_PWM_Start+0x62>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d108      	bne.n	80033ce <HAL_TIM_PWM_Start+0x3a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	223b      	movs	r2, #59	@ 0x3b
 80033c0:	5c9b      	ldrb	r3, [r3, r2]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	1e5a      	subs	r2, r3, #1
 80033c8:	4193      	sbcs	r3, r2
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	e013      	b.n	80033f6 <HAL_TIM_PWM_Start+0x62>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d108      	bne.n	80033e6 <HAL_TIM_PWM_Start+0x52>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	223c      	movs	r2, #60	@ 0x3c
 80033d8:	5c9b      	ldrb	r3, [r3, r2]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	1e5a      	subs	r2, r3, #1
 80033e0:	4193      	sbcs	r3, r2
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	e007      	b.n	80033f6 <HAL_TIM_PWM_Start+0x62>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	223d      	movs	r2, #61	@ 0x3d
 80033ea:	5c9b      	ldrb	r3, [r3, r2]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	1e5a      	subs	r2, r3, #1
 80033f2:	4193      	sbcs	r3, r2
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e04d      	b.n	800349a <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d104      	bne.n	800340e <HAL_TIM_PWM_Start+0x7a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	223a      	movs	r2, #58	@ 0x3a
 8003408:	2102      	movs	r1, #2
 800340a:	5499      	strb	r1, [r3, r2]
 800340c:	e013      	b.n	8003436 <HAL_TIM_PWM_Start+0xa2>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b04      	cmp	r3, #4
 8003412:	d104      	bne.n	800341e <HAL_TIM_PWM_Start+0x8a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	223b      	movs	r2, #59	@ 0x3b
 8003418:	2102      	movs	r1, #2
 800341a:	5499      	strb	r1, [r3, r2]
 800341c:	e00b      	b.n	8003436 <HAL_TIM_PWM_Start+0xa2>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b08      	cmp	r3, #8
 8003422:	d104      	bne.n	800342e <HAL_TIM_PWM_Start+0x9a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	223c      	movs	r2, #60	@ 0x3c
 8003428:	2102      	movs	r1, #2
 800342a:	5499      	strb	r1, [r3, r2]
 800342c:	e003      	b.n	8003436 <HAL_TIM_PWM_Start+0xa2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	223d      	movs	r2, #61	@ 0x3d
 8003432:	2102      	movs	r1, #2
 8003434:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6839      	ldr	r1, [r7, #0]
 800343c:	2201      	movs	r2, #1
 800343e:	0018      	movs	r0, r3
 8003440:	f000 fcc8 	bl	8003dd4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	2380      	movs	r3, #128	@ 0x80
 800344a:	05db      	lsls	r3, r3, #23
 800344c:	429a      	cmp	r2, r3
 800344e:	d009      	beq.n	8003464 <HAL_TIM_PWM_Start+0xd0>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a13      	ldr	r2, [pc, #76]	@ (80034a4 <HAL_TIM_PWM_Start+0x110>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_TIM_PWM_Start+0xd0>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a12      	ldr	r2, [pc, #72]	@ (80034a8 <HAL_TIM_PWM_Start+0x114>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2207      	movs	r2, #7
 800346c:	4013      	ands	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b06      	cmp	r3, #6
 8003474:	d010      	beq.n	8003498 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	430a      	orrs	r2, r1
 8003484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003486:	e007      	b.n	8003498 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2101      	movs	r1, #1
 8003494:	430a      	orrs	r2, r1
 8003496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b004      	add	sp, #16
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			@ (mov r8, r8)
 80034a4:	40010800 	.word	0x40010800
 80034a8:	40011400 	.word	0x40011400

080034ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2202      	movs	r2, #2
 80034bc:	4013      	ands	r3, r2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d124      	bne.n	800350c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2202      	movs	r2, #2
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d11d      	bne.n	800350c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2203      	movs	r2, #3
 80034d6:	4252      	negs	r2, r2
 80034d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2203      	movs	r2, #3
 80034e8:	4013      	ands	r3, r2
 80034ea:	d004      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	0018      	movs	r0, r3
 80034f0:	f000 fa66 	bl	80039c0 <HAL_TIM_IC_CaptureCallback>
 80034f4:	e007      	b.n	8003506 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 fa59 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	0018      	movs	r0, r3
 8003502:	f000 fa65 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2204      	movs	r2, #4
 8003514:	4013      	ands	r3, r2
 8003516:	2b04      	cmp	r3, #4
 8003518:	d125      	bne.n	8003566 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2204      	movs	r2, #4
 8003522:	4013      	ands	r3, r2
 8003524:	2b04      	cmp	r3, #4
 8003526:	d11e      	bne.n	8003566 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2205      	movs	r2, #5
 800352e:	4252      	negs	r2, r2
 8003530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2202      	movs	r2, #2
 8003536:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	23c0      	movs	r3, #192	@ 0xc0
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4013      	ands	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	0018      	movs	r0, r3
 800354a:	f000 fa39 	bl	80039c0 <HAL_TIM_IC_CaptureCallback>
 800354e:	e007      	b.n	8003560 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	0018      	movs	r0, r3
 8003554:	f000 fa2c 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	0018      	movs	r0, r3
 800355c:	f000 fa38 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2208      	movs	r2, #8
 800356e:	4013      	ands	r3, r2
 8003570:	2b08      	cmp	r3, #8
 8003572:	d124      	bne.n	80035be <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2208      	movs	r2, #8
 800357c:	4013      	ands	r3, r2
 800357e:	2b08      	cmp	r3, #8
 8003580:	d11d      	bne.n	80035be <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2209      	movs	r2, #9
 8003588:	4252      	negs	r2, r2
 800358a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2204      	movs	r2, #4
 8003590:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	2203      	movs	r2, #3
 800359a:	4013      	ands	r3, r2
 800359c:	d004      	beq.n	80035a8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 fa0d 	bl	80039c0 <HAL_TIM_IC_CaptureCallback>
 80035a6:	e007      	b.n	80035b8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 fa00 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	0018      	movs	r0, r3
 80035b4:	f000 fa0c 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2210      	movs	r2, #16
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b10      	cmp	r3, #16
 80035ca:	d125      	bne.n	8003618 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2210      	movs	r2, #16
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b10      	cmp	r3, #16
 80035d8:	d11e      	bne.n	8003618 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2211      	movs	r2, #17
 80035e0:	4252      	negs	r2, r2
 80035e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2208      	movs	r2, #8
 80035e8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	23c0      	movs	r3, #192	@ 0xc0
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4013      	ands	r3, r2
 80035f6:	d004      	beq.n	8003602 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 f9e0 	bl	80039c0 <HAL_TIM_IC_CaptureCallback>
 8003600:	e007      	b.n	8003612 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	0018      	movs	r0, r3
 8003606:	f000 f9d3 	bl	80039b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	0018      	movs	r0, r3
 800360e:	f000 f9df 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2201      	movs	r2, #1
 8003620:	4013      	ands	r3, r2
 8003622:	2b01      	cmp	r3, #1
 8003624:	d10f      	bne.n	8003646 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	4013      	ands	r3, r2
 8003630:	2b01      	cmp	r3, #1
 8003632:	d108      	bne.n	8003646 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2202      	movs	r2, #2
 800363a:	4252      	negs	r2, r2
 800363c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	0018      	movs	r0, r3
 8003642:	f7fc ff6b 	bl	800051c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2240      	movs	r2, #64	@ 0x40
 800364e:	4013      	ands	r3, r2
 8003650:	2b40      	cmp	r3, #64	@ 0x40
 8003652:	d10f      	bne.n	8003674 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2240      	movs	r2, #64	@ 0x40
 800365c:	4013      	ands	r3, r2
 800365e:	2b40      	cmp	r3, #64	@ 0x40
 8003660:	d108      	bne.n	8003674 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2241      	movs	r2, #65	@ 0x41
 8003668:	4252      	negs	r2, r2
 800366a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0018      	movs	r0, r3
 8003670:	f000 f9b6 	bl	80039e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003674:	46c0      	nop			@ (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b002      	add	sp, #8
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	2317      	movs	r3, #23
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2238      	movs	r2, #56	@ 0x38
 8003694:	5c9b      	ldrb	r3, [r3, r2]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_TIM_PWM_ConfigChannel+0x22>
 800369a:	2302      	movs	r3, #2
 800369c:	e0ad      	b.n	80037fa <HAL_TIM_PWM_ConfigChannel+0x17e>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2238      	movs	r2, #56	@ 0x38
 80036a2:	2101      	movs	r1, #1
 80036a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b0c      	cmp	r3, #12
 80036aa:	d100      	bne.n	80036ae <HAL_TIM_PWM_ConfigChannel+0x32>
 80036ac:	e076      	b.n	800379c <HAL_TIM_PWM_ConfigChannel+0x120>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b0c      	cmp	r3, #12
 80036b2:	d900      	bls.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80036b4:	e095      	b.n	80037e2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d04e      	beq.n	800375a <HAL_TIM_PWM_ConfigChannel+0xde>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d900      	bls.n	80036c4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80036c2:	e08e      	b.n	80037e2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d021      	beq.n	8003714 <HAL_TIM_PWM_ConfigChannel+0x98>
 80036d0:	e087      	b.n	80037e2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	0011      	movs	r1, r2
 80036da:	0018      	movs	r0, r3
 80036dc:	f000 f9dc 	bl	8003a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2108      	movs	r1, #8
 80036ec:	430a      	orrs	r2, r1
 80036ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2104      	movs	r1, #4
 80036fc:	438a      	bics	r2, r1
 80036fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6999      	ldr	r1, [r3, #24]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	619a      	str	r2, [r3, #24]
      break;
 8003712:	e06b      	b.n	80037ec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	0011      	movs	r1, r2
 800371c:	0018      	movs	r0, r3
 800371e:	f000 f9f7 	bl	8003b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2180      	movs	r1, #128	@ 0x80
 800372e:	0109      	lsls	r1, r1, #4
 8003730:	430a      	orrs	r2, r1
 8003732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4931      	ldr	r1, [pc, #196]	@ (8003804 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003740:	400a      	ands	r2, r1
 8003742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6999      	ldr	r1, [r3, #24]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	021a      	lsls	r2, r3, #8
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	619a      	str	r2, [r3, #24]
      break;
 8003758:	e048      	b.n	80037ec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	0011      	movs	r1, r2
 8003762:	0018      	movs	r0, r3
 8003764:	f000 fa16 	bl	8003b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2108      	movs	r1, #8
 8003774:	430a      	orrs	r2, r1
 8003776:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69da      	ldr	r2, [r3, #28]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2104      	movs	r1, #4
 8003784:	438a      	bics	r2, r1
 8003786:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69d9      	ldr	r1, [r3, #28]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	61da      	str	r2, [r3, #28]
      break;
 800379a:	e027      	b.n	80037ec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	0011      	movs	r1, r2
 80037a4:	0018      	movs	r0, r3
 80037a6:	f000 fa35 	bl	8003c14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2180      	movs	r1, #128	@ 0x80
 80037b6:	0109      	lsls	r1, r1, #4
 80037b8:	430a      	orrs	r2, r1
 80037ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69da      	ldr	r2, [r3, #28]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	490f      	ldr	r1, [pc, #60]	@ (8003804 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80037c8:	400a      	ands	r2, r1
 80037ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69d9      	ldr	r1, [r3, #28]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	021a      	lsls	r2, r3, #8
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	61da      	str	r2, [r3, #28]
      break;
 80037e0:	e004      	b.n	80037ec <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80037e2:	2317      	movs	r3, #23
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]
      break;
 80037ea:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2238      	movs	r2, #56	@ 0x38
 80037f0:	2100      	movs	r1, #0
 80037f2:	5499      	strb	r1, [r3, r2]

  return status;
 80037f4:	2317      	movs	r3, #23
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	781b      	ldrb	r3, [r3, #0]
}
 80037fa:	0018      	movs	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b006      	add	sp, #24
 8003800:	bd80      	pop	{r7, pc}
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	fffffbff 	.word	0xfffffbff

08003808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003812:	230f      	movs	r3, #15
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2238      	movs	r2, #56	@ 0x38
 800381e:	5c9b      	ldrb	r3, [r3, r2]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_TIM_ConfigClockSource+0x20>
 8003824:	2302      	movs	r3, #2
 8003826:	e0bc      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x19a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2238      	movs	r2, #56	@ 0x38
 800382c:	2101      	movs	r1, #1
 800382e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2239      	movs	r2, #57	@ 0x39
 8003834:	2102      	movs	r1, #2
 8003836:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2277      	movs	r2, #119	@ 0x77
 8003844:	4393      	bics	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4a58      	ldr	r2, [pc, #352]	@ (80039ac <HAL_TIM_ConfigClockSource+0x1a4>)
 800384c:	4013      	ands	r3, r2
 800384e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2280      	movs	r2, #128	@ 0x80
 800385e:	0192      	lsls	r2, r2, #6
 8003860:	4293      	cmp	r3, r2
 8003862:	d040      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0xde>
 8003864:	2280      	movs	r2, #128	@ 0x80
 8003866:	0192      	lsls	r2, r2, #6
 8003868:	4293      	cmp	r3, r2
 800386a:	d900      	bls.n	800386e <HAL_TIM_ConfigClockSource+0x66>
 800386c:	e088      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x178>
 800386e:	2280      	movs	r2, #128	@ 0x80
 8003870:	0152      	lsls	r2, r2, #5
 8003872:	4293      	cmp	r3, r2
 8003874:	d100      	bne.n	8003878 <HAL_TIM_ConfigClockSource+0x70>
 8003876:	e088      	b.n	800398a <HAL_TIM_ConfigClockSource+0x182>
 8003878:	2280      	movs	r2, #128	@ 0x80
 800387a:	0152      	lsls	r2, r2, #5
 800387c:	4293      	cmp	r3, r2
 800387e:	d900      	bls.n	8003882 <HAL_TIM_ConfigClockSource+0x7a>
 8003880:	e07e      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x178>
 8003882:	2b70      	cmp	r3, #112	@ 0x70
 8003884:	d018      	beq.n	80038b8 <HAL_TIM_ConfigClockSource+0xb0>
 8003886:	d900      	bls.n	800388a <HAL_TIM_ConfigClockSource+0x82>
 8003888:	e07a      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x178>
 800388a:	2b60      	cmp	r3, #96	@ 0x60
 800388c:	d04f      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x126>
 800388e:	d900      	bls.n	8003892 <HAL_TIM_ConfigClockSource+0x8a>
 8003890:	e076      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x178>
 8003892:	2b50      	cmp	r3, #80	@ 0x50
 8003894:	d03b      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x106>
 8003896:	d900      	bls.n	800389a <HAL_TIM_ConfigClockSource+0x92>
 8003898:	e072      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x178>
 800389a:	2b40      	cmp	r3, #64	@ 0x40
 800389c:	d057      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x146>
 800389e:	d900      	bls.n	80038a2 <HAL_TIM_ConfigClockSource+0x9a>
 80038a0:	e06e      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x178>
 80038a2:	2b30      	cmp	r3, #48	@ 0x30
 80038a4:	d063      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x166>
 80038a6:	d86b      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x178>
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d060      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x166>
 80038ac:	d868      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x178>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d05d      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x166>
 80038b2:	2b10      	cmp	r3, #16
 80038b4:	d05b      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x166>
 80038b6:	e063      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038c8:	f000 fa64 	bl	8003d94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2277      	movs	r2, #119	@ 0x77
 80038d8:	4313      	orrs	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	609a      	str	r2, [r3, #8]
      break;
 80038e4:	e052      	b.n	800398c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038f6:	f000 fa4d 	bl	8003d94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2180      	movs	r1, #128	@ 0x80
 8003906:	01c9      	lsls	r1, r1, #7
 8003908:	430a      	orrs	r2, r1
 800390a:	609a      	str	r2, [r3, #8]
      break;
 800390c:	e03e      	b.n	800398c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800391a:	001a      	movs	r2, r3
 800391c:	f000 f9c0 	bl	8003ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2150      	movs	r1, #80	@ 0x50
 8003926:	0018      	movs	r0, r3
 8003928:	f000 fa1a 	bl	8003d60 <TIM_ITRx_SetConfig>
      break;
 800392c:	e02e      	b.n	800398c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800393a:	001a      	movs	r2, r3
 800393c:	f000 f9de 	bl	8003cfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2160      	movs	r1, #96	@ 0x60
 8003946:	0018      	movs	r0, r3
 8003948:	f000 fa0a 	bl	8003d60 <TIM_ITRx_SetConfig>
      break;
 800394c:	e01e      	b.n	800398c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800395a:	001a      	movs	r2, r3
 800395c:	f000 f9a0 	bl	8003ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2140      	movs	r1, #64	@ 0x40
 8003966:	0018      	movs	r0, r3
 8003968:	f000 f9fa 	bl	8003d60 <TIM_ITRx_SetConfig>
      break;
 800396c:	e00e      	b.n	800398c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	0019      	movs	r1, r3
 8003978:	0010      	movs	r0, r2
 800397a:	f000 f9f1 	bl	8003d60 <TIM_ITRx_SetConfig>
      break;
 800397e:	e005      	b.n	800398c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003980:	230f      	movs	r3, #15
 8003982:	18fb      	adds	r3, r7, r3
 8003984:	2201      	movs	r2, #1
 8003986:	701a      	strb	r2, [r3, #0]
      break;
 8003988:	e000      	b.n	800398c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800398a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2239      	movs	r2, #57	@ 0x39
 8003990:	2101      	movs	r1, #1
 8003992:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2238      	movs	r2, #56	@ 0x38
 8003998:	2100      	movs	r1, #0
 800399a:	5499      	strb	r1, [r3, r2]

  return status;
 800399c:	230f      	movs	r3, #15
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	781b      	ldrb	r3, [r3, #0]
}
 80039a2:	0018      	movs	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b004      	add	sp, #16
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	ffff00ff 	.word	0xffff00ff

080039b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039b8:	46c0      	nop			@ (mov r8, r8)
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b002      	add	sp, #8
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039c8:	46c0      	nop			@ (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039d8:	46c0      	nop			@ (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	2380      	movs	r3, #128	@ 0x80
 8003a04:	05db      	lsls	r3, r3, #23
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d007      	beq.n	8003a1a <TIM_Base_SetConfig+0x2a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a8c <TIM_Base_SetConfig+0x9c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0x2a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a1e      	ldr	r2, [pc, #120]	@ (8003a90 <TIM_Base_SetConfig+0xa0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2270      	movs	r2, #112	@ 0x70
 8003a1e:	4393      	bics	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	2380      	movs	r3, #128	@ 0x80
 8003a30:	05db      	lsls	r3, r3, #23
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d007      	beq.n	8003a46 <TIM_Base_SetConfig+0x56>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a14      	ldr	r2, [pc, #80]	@ (8003a8c <TIM_Base_SetConfig+0x9c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_Base_SetConfig+0x56>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a13      	ldr	r2, [pc, #76]	@ (8003a90 <TIM_Base_SetConfig+0xa0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d108      	bne.n	8003a58 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a12      	ldr	r2, [pc, #72]	@ (8003a94 <TIM_Base_SetConfig+0xa4>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2280      	movs	r2, #128	@ 0x80
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	001a      	movs	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	615a      	str	r2, [r3, #20]
}
 8003a84:	46c0      	nop			@ (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b004      	add	sp, #16
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40010800 	.word	0x40010800
 8003a90:	40011400 	.word	0x40011400
 8003a94:	fffffcff 	.word	0xfffffcff

08003a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	4393      	bics	r3, r2
 8003aaa:	001a      	movs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2270      	movs	r2, #112	@ 0x70
 8003ac6:	4393      	bics	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2203      	movs	r2, #3
 8003ace:	4393      	bics	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	4393      	bics	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	621a      	str	r2, [r3, #32]
}
 8003b08:	46c0      	nop			@ (mov r8, r8)
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b006      	add	sp, #24
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	2210      	movs	r2, #16
 8003b20:	4393      	bics	r3, r2
 8003b22:	001a      	movs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4a13      	ldr	r2, [pc, #76]	@ (8003b8c <TIM_OC2_SetConfig+0x7c>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4a12      	ldr	r2, [pc, #72]	@ (8003b90 <TIM_OC2_SetConfig+0x80>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	021b      	lsls	r3, r3, #8
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	4393      	bics	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	621a      	str	r2, [r3, #32]
}
 8003b84:	46c0      	nop			@ (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b006      	add	sp, #24
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	ffff8fff 	.word	0xffff8fff
 8003b90:	fffffcff 	.word	0xfffffcff

08003b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c0c <TIM_OC3_SetConfig+0x78>)
 8003ba4:	401a      	ands	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2270      	movs	r2, #112	@ 0x70
 8003bc0:	4393      	bics	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	4393      	bics	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8003c10 <TIM_OC3_SetConfig+0x7c>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	621a      	str	r2, [r3, #32]
}
 8003c04:	46c0      	nop			@ (mov r8, r8)
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b006      	add	sp, #24
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	fffffeff 	.word	0xfffffeff
 8003c10:	fffffdff 	.word	0xfffffdff

08003c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4a1b      	ldr	r2, [pc, #108]	@ (8003c90 <TIM_OC4_SetConfig+0x7c>)
 8003c24:	401a      	ands	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4a15      	ldr	r2, [pc, #84]	@ (8003c94 <TIM_OC4_SetConfig+0x80>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4a14      	ldr	r2, [pc, #80]	@ (8003c98 <TIM_OC4_SetConfig+0x84>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	4a10      	ldr	r2, [pc, #64]	@ (8003c9c <TIM_OC4_SetConfig+0x88>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	031b      	lsls	r3, r3, #12
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b006      	add	sp, #24
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	ffffefff 	.word	0xffffefff
 8003c94:	ffff8fff 	.word	0xffff8fff
 8003c98:	fffffcff 	.word	0xfffffcff
 8003c9c:	ffffdfff 	.word	0xffffdfff

08003ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	4393      	bics	r3, r2
 8003cba:	001a      	movs	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	22f0      	movs	r2, #240	@ 0xf0
 8003cca:	4393      	bics	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	220a      	movs	r2, #10
 8003cdc:	4393      	bics	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	621a      	str	r2, [r3, #32]
}
 8003cf4:	46c0      	nop			@ (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b006      	add	sp, #24
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	2210      	movs	r2, #16
 8003d0e:	4393      	bics	r3, r2
 8003d10:	001a      	movs	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	4a0d      	ldr	r2, [pc, #52]	@ (8003d5c <TIM_TI2_ConfigInputStage+0x60>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	031b      	lsls	r3, r3, #12
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	22a0      	movs	r2, #160	@ 0xa0
 8003d38:	4393      	bics	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	621a      	str	r2, [r3, #32]
}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	46bd      	mov	sp, r7
 8003d56:	b006      	add	sp, #24
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	46c0      	nop			@ (mov r8, r8)
 8003d5c:	ffff0fff 	.word	0xffff0fff

08003d60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2270      	movs	r2, #112	@ 0x70
 8003d74:	4393      	bics	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	2207      	movs	r2, #7
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	609a      	str	r2, [r3, #8]
}
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b004      	add	sp, #16
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4a09      	ldr	r2, [pc, #36]	@ (8003dd0 <TIM_ETR_SetConfig+0x3c>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	021a      	lsls	r2, r3, #8
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	609a      	str	r2, [r3, #8]
}
 8003dc8:	46c0      	nop			@ (mov r8, r8)
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b006      	add	sp, #24
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	ffff00ff 	.word	0xffff00ff

08003dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	221f      	movs	r2, #31
 8003de4:	4013      	ands	r3, r2
 8003de6:	2201      	movs	r2, #1
 8003de8:	409a      	lsls	r2, r3
 8003dea:	0013      	movs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	43d2      	mvns	r2, r2
 8003df6:	401a      	ands	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a1a      	ldr	r2, [r3, #32]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	211f      	movs	r1, #31
 8003e04:	400b      	ands	r3, r1
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4099      	lsls	r1, r3
 8003e0a:	000b      	movs	r3, r1
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	621a      	str	r2, [r3, #32]
}
 8003e12:	46c0      	nop			@ (mov r8, r8)
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b006      	add	sp, #24
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2238      	movs	r2, #56	@ 0x38
 8003e2a:	5c9b      	ldrb	r3, [r3, r2]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e042      	b.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2238      	movs	r2, #56	@ 0x38
 8003e38:	2101      	movs	r1, #1
 8003e3a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2239      	movs	r2, #57	@ 0x39
 8003e40:	2102      	movs	r1, #2
 8003e42:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2270      	movs	r2, #112	@ 0x70
 8003e58:	4393      	bics	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	2380      	movs	r3, #128	@ 0x80
 8003e74:	05db      	lsls	r3, r3, #23
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d009      	beq.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a11      	ldr	r2, [pc, #68]	@ (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d004      	beq.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a0f      	ldr	r2, [pc, #60]	@ (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2280      	movs	r2, #128	@ 0x80
 8003e92:	4393      	bics	r3, r2
 8003e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2239      	movs	r2, #57	@ 0x39
 8003eac:	2101      	movs	r1, #1
 8003eae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2238      	movs	r2, #56	@ 0x38
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	0018      	movs	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b004      	add	sp, #16
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	46c0      	nop			@ (mov r8, r8)
 8003ec4:	40010800 	.word	0x40010800
 8003ec8:	40011400 	.word	0x40011400

08003ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e044      	b.n	8003f68 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d107      	bne.n	8003ef6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2278      	movs	r2, #120	@ 0x78
 8003eea:	2100      	movs	r1, #0
 8003eec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f7fd f9cd 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2224      	movs	r2, #36	@ 0x24
 8003efa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2101      	movs	r1, #1
 8003f08:	438a      	bics	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f000 f8d0 	bl	80040b4 <UART_SetConfig>
 8003f14:	0003      	movs	r3, r0
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e024      	b.n	8003f68 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f000 fb47 	bl	80045bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	490d      	ldr	r1, [pc, #52]	@ (8003f70 <HAL_UART_Init+0xa4>)
 8003f3a:	400a      	ands	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	212a      	movs	r1, #42	@ 0x2a
 8003f4a:	438a      	bics	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2101      	movs	r1, #1
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	0018      	movs	r0, r3
 8003f62:	f000 fbdf 	bl	8004724 <UART_CheckIdleState>
 8003f66:	0003      	movs	r3, r0
}
 8003f68:	0018      	movs	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b002      	add	sp, #8
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	ffffb7ff 	.word	0xffffb7ff

08003f74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08a      	sub	sp, #40	@ 0x28
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	1dbb      	adds	r3, r7, #6
 8003f82:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d000      	beq.n	8003f8e <HAL_UART_Transmit+0x1a>
 8003f8c:	e08c      	b.n	80040a8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_UART_Transmit+0x28>
 8003f94:	1dbb      	adds	r3, r7, #6
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e084      	b.n	80040aa <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	2380      	movs	r3, #128	@ 0x80
 8003fa6:	015b      	lsls	r3, r3, #5
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d109      	bne.n	8003fc0 <HAL_UART_Transmit+0x4c>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d105      	bne.n	8003fc0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d001      	beq.n	8003fc0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e074      	b.n	80040aa <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2284      	movs	r2, #132	@ 0x84
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2221      	movs	r2, #33	@ 0x21
 8003fcc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fce:	f7fd fb01 	bl	80015d4 <HAL_GetTick>
 8003fd2:	0003      	movs	r3, r0
 8003fd4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1dba      	adds	r2, r7, #6
 8003fda:	2150      	movs	r1, #80	@ 0x50
 8003fdc:	8812      	ldrh	r2, [r2, #0]
 8003fde:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	1dba      	adds	r2, r7, #6
 8003fe4:	2152      	movs	r1, #82	@ 0x52
 8003fe6:	8812      	ldrh	r2, [r2, #0]
 8003fe8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	2380      	movs	r3, #128	@ 0x80
 8003ff0:	015b      	lsls	r3, r3, #5
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d108      	bne.n	8004008 <HAL_UART_Transmit+0x94>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d104      	bne.n	8004008 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	e003      	b.n	8004010 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800400c:	2300      	movs	r3, #0
 800400e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004010:	e02f      	b.n	8004072 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	0013      	movs	r3, r2
 800401c:	2200      	movs	r2, #0
 800401e:	2180      	movs	r1, #128	@ 0x80
 8004020:	f000 fc28 	bl	8004874 <UART_WaitOnFlagUntilTimeout>
 8004024:	1e03      	subs	r3, r0, #0
 8004026:	d004      	beq.n	8004032 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e03b      	b.n	80040aa <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10b      	bne.n	8004050 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	001a      	movs	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	05d2      	lsls	r2, r2, #23
 8004044:	0dd2      	lsrs	r2, r2, #23
 8004046:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	3302      	adds	r3, #2
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	e007      	b.n	8004060 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	781a      	ldrb	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3301      	adds	r3, #1
 800405e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2252      	movs	r2, #82	@ 0x52
 8004064:	5a9b      	ldrh	r3, [r3, r2]
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b299      	uxth	r1, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2252      	movs	r2, #82	@ 0x52
 8004070:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2252      	movs	r2, #82	@ 0x52
 8004076:	5a9b      	ldrh	r3, [r3, r2]
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1c9      	bne.n	8004012 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	0013      	movs	r3, r2
 8004088:	2200      	movs	r2, #0
 800408a:	2140      	movs	r1, #64	@ 0x40
 800408c:	f000 fbf2 	bl	8004874 <UART_WaitOnFlagUntilTimeout>
 8004090:	1e03      	subs	r3, r0, #0
 8004092:	d004      	beq.n	800409e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e005      	b.n	80040aa <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e000      	b.n	80040aa <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
  }
}
 80040aa:	0018      	movs	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b008      	add	sp, #32
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b4:	b5b0      	push	{r4, r5, r7, lr}
 80040b6:	b08e      	sub	sp, #56	@ 0x38
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040bc:	231a      	movs	r3, #26
 80040be:	2218      	movs	r2, #24
 80040c0:	189b      	adds	r3, r3, r2
 80040c2:	19db      	adds	r3, r3, r7
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	431a      	orrs	r2, r3
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	4313      	orrs	r3, r2
 80040de:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4ac6      	ldr	r2, [pc, #792]	@ (8004400 <UART_SetConfig+0x34c>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	0019      	movs	r1, r3
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040f2:	430a      	orrs	r2, r1
 80040f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4ac1      	ldr	r2, [pc, #772]	@ (8004404 <UART_SetConfig+0x350>)
 80040fe:	4013      	ands	r3, r2
 8004100:	0019      	movs	r1, r3
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4abb      	ldr	r2, [pc, #748]	@ (8004408 <UART_SetConfig+0x354>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004124:	4313      	orrs	r3, r2
 8004126:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	4ab7      	ldr	r2, [pc, #732]	@ (800440c <UART_SetConfig+0x358>)
 8004130:	4013      	ands	r3, r2
 8004132:	0019      	movs	r1, r3
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800413a:	430a      	orrs	r2, r1
 800413c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4ab3      	ldr	r2, [pc, #716]	@ (8004410 <UART_SetConfig+0x35c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d131      	bne.n	80041ac <UART_SetConfig+0xf8>
 8004148:	4bb2      	ldr	r3, [pc, #712]	@ (8004414 <UART_SetConfig+0x360>)
 800414a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414c:	2203      	movs	r2, #3
 800414e:	4013      	ands	r3, r2
 8004150:	2b03      	cmp	r3, #3
 8004152:	d01d      	beq.n	8004190 <UART_SetConfig+0xdc>
 8004154:	d823      	bhi.n	800419e <UART_SetConfig+0xea>
 8004156:	2b02      	cmp	r3, #2
 8004158:	d00c      	beq.n	8004174 <UART_SetConfig+0xc0>
 800415a:	d820      	bhi.n	800419e <UART_SetConfig+0xea>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <UART_SetConfig+0xb2>
 8004160:	2b01      	cmp	r3, #1
 8004162:	d00e      	beq.n	8004182 <UART_SetConfig+0xce>
 8004164:	e01b      	b.n	800419e <UART_SetConfig+0xea>
 8004166:	231b      	movs	r3, #27
 8004168:	2218      	movs	r2, #24
 800416a:	189b      	adds	r3, r3, r2
 800416c:	19db      	adds	r3, r3, r7
 800416e:	2201      	movs	r2, #1
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	e09c      	b.n	80042ae <UART_SetConfig+0x1fa>
 8004174:	231b      	movs	r3, #27
 8004176:	2218      	movs	r2, #24
 8004178:	189b      	adds	r3, r3, r2
 800417a:	19db      	adds	r3, r3, r7
 800417c:	2202      	movs	r2, #2
 800417e:	701a      	strb	r2, [r3, #0]
 8004180:	e095      	b.n	80042ae <UART_SetConfig+0x1fa>
 8004182:	231b      	movs	r3, #27
 8004184:	2218      	movs	r2, #24
 8004186:	189b      	adds	r3, r3, r2
 8004188:	19db      	adds	r3, r3, r7
 800418a:	2204      	movs	r2, #4
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	e08e      	b.n	80042ae <UART_SetConfig+0x1fa>
 8004190:	231b      	movs	r3, #27
 8004192:	2218      	movs	r2, #24
 8004194:	189b      	adds	r3, r3, r2
 8004196:	19db      	adds	r3, r3, r7
 8004198:	2208      	movs	r2, #8
 800419a:	701a      	strb	r2, [r3, #0]
 800419c:	e087      	b.n	80042ae <UART_SetConfig+0x1fa>
 800419e:	231b      	movs	r3, #27
 80041a0:	2218      	movs	r2, #24
 80041a2:	189b      	adds	r3, r3, r2
 80041a4:	19db      	adds	r3, r3, r7
 80041a6:	2210      	movs	r2, #16
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	e080      	b.n	80042ae <UART_SetConfig+0x1fa>
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a99      	ldr	r2, [pc, #612]	@ (8004418 <UART_SetConfig+0x364>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d131      	bne.n	800421a <UART_SetConfig+0x166>
 80041b6:	4b97      	ldr	r3, [pc, #604]	@ (8004414 <UART_SetConfig+0x360>)
 80041b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ba:	220c      	movs	r2, #12
 80041bc:	4013      	ands	r3, r2
 80041be:	2b0c      	cmp	r3, #12
 80041c0:	d01d      	beq.n	80041fe <UART_SetConfig+0x14a>
 80041c2:	d823      	bhi.n	800420c <UART_SetConfig+0x158>
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d00c      	beq.n	80041e2 <UART_SetConfig+0x12e>
 80041c8:	d820      	bhi.n	800420c <UART_SetConfig+0x158>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <UART_SetConfig+0x120>
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d00e      	beq.n	80041f0 <UART_SetConfig+0x13c>
 80041d2:	e01b      	b.n	800420c <UART_SetConfig+0x158>
 80041d4:	231b      	movs	r3, #27
 80041d6:	2218      	movs	r2, #24
 80041d8:	189b      	adds	r3, r3, r2
 80041da:	19db      	adds	r3, r3, r7
 80041dc:	2200      	movs	r2, #0
 80041de:	701a      	strb	r2, [r3, #0]
 80041e0:	e065      	b.n	80042ae <UART_SetConfig+0x1fa>
 80041e2:	231b      	movs	r3, #27
 80041e4:	2218      	movs	r2, #24
 80041e6:	189b      	adds	r3, r3, r2
 80041e8:	19db      	adds	r3, r3, r7
 80041ea:	2202      	movs	r2, #2
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e05e      	b.n	80042ae <UART_SetConfig+0x1fa>
 80041f0:	231b      	movs	r3, #27
 80041f2:	2218      	movs	r2, #24
 80041f4:	189b      	adds	r3, r3, r2
 80041f6:	19db      	adds	r3, r3, r7
 80041f8:	2204      	movs	r2, #4
 80041fa:	701a      	strb	r2, [r3, #0]
 80041fc:	e057      	b.n	80042ae <UART_SetConfig+0x1fa>
 80041fe:	231b      	movs	r3, #27
 8004200:	2218      	movs	r2, #24
 8004202:	189b      	adds	r3, r3, r2
 8004204:	19db      	adds	r3, r3, r7
 8004206:	2208      	movs	r2, #8
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	e050      	b.n	80042ae <UART_SetConfig+0x1fa>
 800420c:	231b      	movs	r3, #27
 800420e:	2218      	movs	r2, #24
 8004210:	189b      	adds	r3, r3, r2
 8004212:	19db      	adds	r3, r3, r7
 8004214:	2210      	movs	r2, #16
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	e049      	b.n	80042ae <UART_SetConfig+0x1fa>
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a7a      	ldr	r2, [pc, #488]	@ (8004408 <UART_SetConfig+0x354>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d13e      	bne.n	80042a2 <UART_SetConfig+0x1ee>
 8004224:	4b7b      	ldr	r3, [pc, #492]	@ (8004414 <UART_SetConfig+0x360>)
 8004226:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004228:	23c0      	movs	r3, #192	@ 0xc0
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	4013      	ands	r3, r2
 800422e:	22c0      	movs	r2, #192	@ 0xc0
 8004230:	0112      	lsls	r2, r2, #4
 8004232:	4293      	cmp	r3, r2
 8004234:	d027      	beq.n	8004286 <UART_SetConfig+0x1d2>
 8004236:	22c0      	movs	r2, #192	@ 0xc0
 8004238:	0112      	lsls	r2, r2, #4
 800423a:	4293      	cmp	r3, r2
 800423c:	d82a      	bhi.n	8004294 <UART_SetConfig+0x1e0>
 800423e:	2280      	movs	r2, #128	@ 0x80
 8004240:	0112      	lsls	r2, r2, #4
 8004242:	4293      	cmp	r3, r2
 8004244:	d011      	beq.n	800426a <UART_SetConfig+0x1b6>
 8004246:	2280      	movs	r2, #128	@ 0x80
 8004248:	0112      	lsls	r2, r2, #4
 800424a:	4293      	cmp	r3, r2
 800424c:	d822      	bhi.n	8004294 <UART_SetConfig+0x1e0>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d004      	beq.n	800425c <UART_SetConfig+0x1a8>
 8004252:	2280      	movs	r2, #128	@ 0x80
 8004254:	00d2      	lsls	r2, r2, #3
 8004256:	4293      	cmp	r3, r2
 8004258:	d00e      	beq.n	8004278 <UART_SetConfig+0x1c4>
 800425a:	e01b      	b.n	8004294 <UART_SetConfig+0x1e0>
 800425c:	231b      	movs	r3, #27
 800425e:	2218      	movs	r2, #24
 8004260:	189b      	adds	r3, r3, r2
 8004262:	19db      	adds	r3, r3, r7
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
 8004268:	e021      	b.n	80042ae <UART_SetConfig+0x1fa>
 800426a:	231b      	movs	r3, #27
 800426c:	2218      	movs	r2, #24
 800426e:	189b      	adds	r3, r3, r2
 8004270:	19db      	adds	r3, r3, r7
 8004272:	2202      	movs	r2, #2
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e01a      	b.n	80042ae <UART_SetConfig+0x1fa>
 8004278:	231b      	movs	r3, #27
 800427a:	2218      	movs	r2, #24
 800427c:	189b      	adds	r3, r3, r2
 800427e:	19db      	adds	r3, r3, r7
 8004280:	2204      	movs	r2, #4
 8004282:	701a      	strb	r2, [r3, #0]
 8004284:	e013      	b.n	80042ae <UART_SetConfig+0x1fa>
 8004286:	231b      	movs	r3, #27
 8004288:	2218      	movs	r2, #24
 800428a:	189b      	adds	r3, r3, r2
 800428c:	19db      	adds	r3, r3, r7
 800428e:	2208      	movs	r2, #8
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	e00c      	b.n	80042ae <UART_SetConfig+0x1fa>
 8004294:	231b      	movs	r3, #27
 8004296:	2218      	movs	r2, #24
 8004298:	189b      	adds	r3, r3, r2
 800429a:	19db      	adds	r3, r3, r7
 800429c:	2210      	movs	r2, #16
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	e005      	b.n	80042ae <UART_SetConfig+0x1fa>
 80042a2:	231b      	movs	r3, #27
 80042a4:	2218      	movs	r2, #24
 80042a6:	189b      	adds	r3, r3, r2
 80042a8:	19db      	adds	r3, r3, r7
 80042aa:	2210      	movs	r2, #16
 80042ac:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a55      	ldr	r2, [pc, #340]	@ (8004408 <UART_SetConfig+0x354>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d000      	beq.n	80042ba <UART_SetConfig+0x206>
 80042b8:	e084      	b.n	80043c4 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042ba:	231b      	movs	r3, #27
 80042bc:	2218      	movs	r2, #24
 80042be:	189b      	adds	r3, r3, r2
 80042c0:	19db      	adds	r3, r3, r7
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d01d      	beq.n	8004304 <UART_SetConfig+0x250>
 80042c8:	dc20      	bgt.n	800430c <UART_SetConfig+0x258>
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d015      	beq.n	80042fa <UART_SetConfig+0x246>
 80042ce:	dc1d      	bgt.n	800430c <UART_SetConfig+0x258>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <UART_SetConfig+0x226>
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d005      	beq.n	80042e4 <UART_SetConfig+0x230>
 80042d8:	e018      	b.n	800430c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042da:	f7fe fda7 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 80042de:	0003      	movs	r3, r0
 80042e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042e2:	e01c      	b.n	800431e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004414 <UART_SetConfig+0x360>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2210      	movs	r2, #16
 80042ea:	4013      	ands	r3, r2
 80042ec:	d002      	beq.n	80042f4 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80042ee:	4b4b      	ldr	r3, [pc, #300]	@ (800441c <UART_SetConfig+0x368>)
 80042f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80042f2:	e014      	b.n	800431e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80042f4:	4b4a      	ldr	r3, [pc, #296]	@ (8004420 <UART_SetConfig+0x36c>)
 80042f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042f8:	e011      	b.n	800431e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042fa:	f7fe fce7 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 80042fe:	0003      	movs	r3, r0
 8004300:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004302:	e00c      	b.n	800431e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004304:	2380      	movs	r3, #128	@ 0x80
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800430a:	e008      	b.n	800431e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004310:	231a      	movs	r3, #26
 8004312:	2218      	movs	r2, #24
 8004314:	189b      	adds	r3, r3, r2
 8004316:	19db      	adds	r3, r3, r7
 8004318:	2201      	movs	r2, #1
 800431a:	701a      	strb	r2, [r3, #0]
        break;
 800431c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800431e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d100      	bne.n	8004326 <UART_SetConfig+0x272>
 8004324:	e132      	b.n	800458c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	0013      	movs	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	189b      	adds	r3, r3, r2
 8004330:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004332:	429a      	cmp	r2, r3
 8004334:	d305      	bcc.n	8004342 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800433c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800433e:	429a      	cmp	r2, r3
 8004340:	d906      	bls.n	8004350 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8004342:	231a      	movs	r3, #26
 8004344:	2218      	movs	r2, #24
 8004346:	189b      	adds	r3, r3, r2
 8004348:	19db      	adds	r3, r3, r7
 800434a:	2201      	movs	r2, #1
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	e11d      	b.n	800458c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	6939      	ldr	r1, [r7, #16]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	000b      	movs	r3, r1
 800435e:	0e1b      	lsrs	r3, r3, #24
 8004360:	0010      	movs	r0, r2
 8004362:	0205      	lsls	r5, r0, #8
 8004364:	431d      	orrs	r5, r3
 8004366:	000b      	movs	r3, r1
 8004368:	021c      	lsls	r4, r3, #8
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	085b      	lsrs	r3, r3, #1
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	68b8      	ldr	r0, [r7, #8]
 8004378:	68f9      	ldr	r1, [r7, #12]
 800437a:	1900      	adds	r0, r0, r4
 800437c:	4169      	adcs	r1, r5
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	2300      	movs	r3, #0
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f7fb ff52 	bl	8000234 <__aeabi_uldivmod>
 8004390:	0002      	movs	r2, r0
 8004392:	000b      	movs	r3, r1
 8004394:	0013      	movs	r3, r2
 8004396:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004398:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800439a:	23c0      	movs	r3, #192	@ 0xc0
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	429a      	cmp	r2, r3
 80043a0:	d309      	bcc.n	80043b6 <UART_SetConfig+0x302>
 80043a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043a4:	2380      	movs	r3, #128	@ 0x80
 80043a6:	035b      	lsls	r3, r3, #13
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d204      	bcs.n	80043b6 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043b2:	60da      	str	r2, [r3, #12]
 80043b4:	e0ea      	b.n	800458c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80043b6:	231a      	movs	r3, #26
 80043b8:	2218      	movs	r2, #24
 80043ba:	189b      	adds	r3, r3, r2
 80043bc:	19db      	adds	r3, r3, r7
 80043be:	2201      	movs	r2, #1
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	e0e3      	b.n	800458c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	2380      	movs	r3, #128	@ 0x80
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d000      	beq.n	80043d2 <UART_SetConfig+0x31e>
 80043d0:	e085      	b.n	80044de <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80043d2:	231b      	movs	r3, #27
 80043d4:	2218      	movs	r2, #24
 80043d6:	189b      	adds	r3, r3, r2
 80043d8:	19db      	adds	r3, r3, r7
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d837      	bhi.n	8004450 <UART_SetConfig+0x39c>
 80043e0:	009a      	lsls	r2, r3, #2
 80043e2:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <UART_SetConfig+0x370>)
 80043e4:	18d3      	adds	r3, r2, r3
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ea:	f7fe fd1f 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 80043ee:	0003      	movs	r3, r0
 80043f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043f2:	e036      	b.n	8004462 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f4:	f7fe fd30 	bl	8002e58 <HAL_RCC_GetPCLK2Freq>
 80043f8:	0003      	movs	r3, r0
 80043fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043fc:	e031      	b.n	8004462 <UART_SetConfig+0x3ae>
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	efff69f3 	.word	0xefff69f3
 8004404:	ffffcfff 	.word	0xffffcfff
 8004408:	40004800 	.word	0x40004800
 800440c:	fffff4ff 	.word	0xfffff4ff
 8004410:	40013800 	.word	0x40013800
 8004414:	40021000 	.word	0x40021000
 8004418:	40004400 	.word	0x40004400
 800441c:	003d0900 	.word	0x003d0900
 8004420:	00f42400 	.word	0x00f42400
 8004424:	08005968 	.word	0x08005968
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004428:	4b60      	ldr	r3, [pc, #384]	@ (80045ac <UART_SetConfig+0x4f8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2210      	movs	r2, #16
 800442e:	4013      	ands	r3, r2
 8004430:	d002      	beq.n	8004438 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004432:	4b5f      	ldr	r3, [pc, #380]	@ (80045b0 <UART_SetConfig+0x4fc>)
 8004434:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004436:	e014      	b.n	8004462 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8004438:	4b5e      	ldr	r3, [pc, #376]	@ (80045b4 <UART_SetConfig+0x500>)
 800443a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800443c:	e011      	b.n	8004462 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800443e:	f7fe fc45 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8004442:	0003      	movs	r3, r0
 8004444:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004446:	e00c      	b.n	8004462 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004448:	2380      	movs	r3, #128	@ 0x80
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800444e:	e008      	b.n	8004462 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004454:	231a      	movs	r3, #26
 8004456:	2218      	movs	r2, #24
 8004458:	189b      	adds	r3, r3, r2
 800445a:	19db      	adds	r3, r3, r7
 800445c:	2201      	movs	r2, #1
 800445e:	701a      	strb	r2, [r3, #0]
        break;
 8004460:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d100      	bne.n	800446a <UART_SetConfig+0x3b6>
 8004468:	e090      	b.n	800458c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800446a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446c:	005a      	lsls	r2, r3, #1
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	18d2      	adds	r2, r2, r3
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	0019      	movs	r1, r3
 800447c:	0010      	movs	r0, r2
 800447e:	f7fb fe4d 	bl	800011c <__udivsi3>
 8004482:	0003      	movs	r3, r0
 8004484:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004488:	2b0f      	cmp	r3, #15
 800448a:	d921      	bls.n	80044d0 <UART_SetConfig+0x41c>
 800448c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800448e:	2380      	movs	r3, #128	@ 0x80
 8004490:	025b      	lsls	r3, r3, #9
 8004492:	429a      	cmp	r2, r3
 8004494:	d21c      	bcs.n	80044d0 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004498:	b29a      	uxth	r2, r3
 800449a:	200e      	movs	r0, #14
 800449c:	2418      	movs	r4, #24
 800449e:	1903      	adds	r3, r0, r4
 80044a0:	19db      	adds	r3, r3, r7
 80044a2:	210f      	movs	r1, #15
 80044a4:	438a      	bics	r2, r1
 80044a6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044aa:	085b      	lsrs	r3, r3, #1
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2207      	movs	r2, #7
 80044b0:	4013      	ands	r3, r2
 80044b2:	b299      	uxth	r1, r3
 80044b4:	1903      	adds	r3, r0, r4
 80044b6:	19db      	adds	r3, r3, r7
 80044b8:	1902      	adds	r2, r0, r4
 80044ba:	19d2      	adds	r2, r2, r7
 80044bc:	8812      	ldrh	r2, [r2, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	1902      	adds	r2, r0, r4
 80044c8:	19d2      	adds	r2, r2, r7
 80044ca:	8812      	ldrh	r2, [r2, #0]
 80044cc:	60da      	str	r2, [r3, #12]
 80044ce:	e05d      	b.n	800458c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80044d0:	231a      	movs	r3, #26
 80044d2:	2218      	movs	r2, #24
 80044d4:	189b      	adds	r3, r3, r2
 80044d6:	19db      	adds	r3, r3, r7
 80044d8:	2201      	movs	r2, #1
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	e056      	b.n	800458c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044de:	231b      	movs	r3, #27
 80044e0:	2218      	movs	r2, #24
 80044e2:	189b      	adds	r3, r3, r2
 80044e4:	19db      	adds	r3, r3, r7
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d822      	bhi.n	8004532 <UART_SetConfig+0x47e>
 80044ec:	009a      	lsls	r2, r3, #2
 80044ee:	4b32      	ldr	r3, [pc, #200]	@ (80045b8 <UART_SetConfig+0x504>)
 80044f0:	18d3      	adds	r3, r2, r3
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f6:	f7fe fc99 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 80044fa:	0003      	movs	r3, r0
 80044fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80044fe:	e021      	b.n	8004544 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004500:	f7fe fcaa 	bl	8002e58 <HAL_RCC_GetPCLK2Freq>
 8004504:	0003      	movs	r3, r0
 8004506:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004508:	e01c      	b.n	8004544 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800450a:	4b28      	ldr	r3, [pc, #160]	@ (80045ac <UART_SetConfig+0x4f8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2210      	movs	r2, #16
 8004510:	4013      	ands	r3, r2
 8004512:	d002      	beq.n	800451a <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004514:	4b26      	ldr	r3, [pc, #152]	@ (80045b0 <UART_SetConfig+0x4fc>)
 8004516:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004518:	e014      	b.n	8004544 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 800451a:	4b26      	ldr	r3, [pc, #152]	@ (80045b4 <UART_SetConfig+0x500>)
 800451c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800451e:	e011      	b.n	8004544 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004520:	f7fe fbd4 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8004524:	0003      	movs	r3, r0
 8004526:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004528:	e00c      	b.n	8004544 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800452a:	2380      	movs	r3, #128	@ 0x80
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004530:	e008      	b.n	8004544 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004536:	231a      	movs	r3, #26
 8004538:	2218      	movs	r2, #24
 800453a:	189b      	adds	r3, r3, r2
 800453c:	19db      	adds	r3, r3, r7
 800453e:	2201      	movs	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]
        break;
 8004542:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d020      	beq.n	800458c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	085a      	lsrs	r2, r3, #1
 8004550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004552:	18d2      	adds	r2, r2, r3
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	0019      	movs	r1, r3
 800455a:	0010      	movs	r0, r2
 800455c:	f7fb fdde 	bl	800011c <__udivsi3>
 8004560:	0003      	movs	r3, r0
 8004562:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004566:	2b0f      	cmp	r3, #15
 8004568:	d90a      	bls.n	8004580 <UART_SetConfig+0x4cc>
 800456a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800456c:	2380      	movs	r3, #128	@ 0x80
 800456e:	025b      	lsls	r3, r3, #9
 8004570:	429a      	cmp	r2, r3
 8004572:	d205      	bcs.n	8004580 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004576:	b29a      	uxth	r2, r3
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	e005      	b.n	800458c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004580:	231a      	movs	r3, #26
 8004582:	2218      	movs	r2, #24
 8004584:	189b      	adds	r3, r3, r2
 8004586:	19db      	adds	r3, r3, r7
 8004588:	2201      	movs	r2, #1
 800458a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2200      	movs	r2, #0
 8004590:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	2200      	movs	r2, #0
 8004596:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004598:	231a      	movs	r3, #26
 800459a:	2218      	movs	r2, #24
 800459c:	189b      	adds	r3, r3, r2
 800459e:	19db      	adds	r3, r3, r7
 80045a0:	781b      	ldrb	r3, [r3, #0]
}
 80045a2:	0018      	movs	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b00e      	add	sp, #56	@ 0x38
 80045a8:	bdb0      	pop	{r4, r5, r7, pc}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	40021000 	.word	0x40021000
 80045b0:	003d0900 	.word	0x003d0900
 80045b4:	00f42400 	.word	0x00f42400
 80045b8:	0800598c 	.word	0x0800598c

080045bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c8:	2201      	movs	r2, #1
 80045ca:	4013      	ands	r3, r2
 80045cc:	d00b      	beq.n	80045e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004700 <UART_AdvFeatureConfig+0x144>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	0019      	movs	r1, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ea:	2202      	movs	r2, #2
 80045ec:	4013      	ands	r3, r2
 80045ee:	d00b      	beq.n	8004608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4a43      	ldr	r2, [pc, #268]	@ (8004704 <UART_AdvFeatureConfig+0x148>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	0019      	movs	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	2204      	movs	r2, #4
 800460e:	4013      	ands	r3, r2
 8004610:	d00b      	beq.n	800462a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4a3b      	ldr	r2, [pc, #236]	@ (8004708 <UART_AdvFeatureConfig+0x14c>)
 800461a:	4013      	ands	r3, r2
 800461c:	0019      	movs	r1, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	2208      	movs	r2, #8
 8004630:	4013      	ands	r3, r2
 8004632:	d00b      	beq.n	800464c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	4a34      	ldr	r2, [pc, #208]	@ (800470c <UART_AdvFeatureConfig+0x150>)
 800463c:	4013      	ands	r3, r2
 800463e:	0019      	movs	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	2210      	movs	r2, #16
 8004652:	4013      	ands	r3, r2
 8004654:	d00b      	beq.n	800466e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a2c      	ldr	r2, [pc, #176]	@ (8004710 <UART_AdvFeatureConfig+0x154>)
 800465e:	4013      	ands	r3, r2
 8004660:	0019      	movs	r1, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	2220      	movs	r2, #32
 8004674:	4013      	ands	r3, r2
 8004676:	d00b      	beq.n	8004690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	4a25      	ldr	r2, [pc, #148]	@ (8004714 <UART_AdvFeatureConfig+0x158>)
 8004680:	4013      	ands	r3, r2
 8004682:	0019      	movs	r1, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	2240      	movs	r2, #64	@ 0x40
 8004696:	4013      	ands	r3, r2
 8004698:	d01d      	beq.n	80046d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004718 <UART_AdvFeatureConfig+0x15c>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	0019      	movs	r1, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046b6:	2380      	movs	r3, #128	@ 0x80
 80046b8:	035b      	lsls	r3, r3, #13
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d10b      	bne.n	80046d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	4a15      	ldr	r2, [pc, #84]	@ (800471c <UART_AdvFeatureConfig+0x160>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	0019      	movs	r1, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	2280      	movs	r2, #128	@ 0x80
 80046dc:	4013      	ands	r3, r2
 80046de:	d00b      	beq.n	80046f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004720 <UART_AdvFeatureConfig+0x164>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	0019      	movs	r1, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	605a      	str	r2, [r3, #4]
  }
}
 80046f8:	46c0      	nop			@ (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b002      	add	sp, #8
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	fffdffff 	.word	0xfffdffff
 8004704:	fffeffff 	.word	0xfffeffff
 8004708:	fffbffff 	.word	0xfffbffff
 800470c:	ffff7fff 	.word	0xffff7fff
 8004710:	ffffefff 	.word	0xffffefff
 8004714:	ffffdfff 	.word	0xffffdfff
 8004718:	ffefffff 	.word	0xffefffff
 800471c:	ff9fffff 	.word	0xff9fffff
 8004720:	fff7ffff 	.word	0xfff7ffff

08004724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b092      	sub	sp, #72	@ 0x48
 8004728:	af02      	add	r7, sp, #8
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2284      	movs	r2, #132	@ 0x84
 8004730:	2100      	movs	r1, #0
 8004732:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004734:	f7fc ff4e 	bl	80015d4 <HAL_GetTick>
 8004738:	0003      	movs	r3, r0
 800473a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2208      	movs	r2, #8
 8004744:	4013      	ands	r3, r2
 8004746:	2b08      	cmp	r3, #8
 8004748:	d12c      	bne.n	80047a4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800474a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800474c:	2280      	movs	r2, #128	@ 0x80
 800474e:	0391      	lsls	r1, r2, #14
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	4a46      	ldr	r2, [pc, #280]	@ (800486c <UART_CheckIdleState+0x148>)
 8004754:	9200      	str	r2, [sp, #0]
 8004756:	2200      	movs	r2, #0
 8004758:	f000 f88c 	bl	8004874 <UART_WaitOnFlagUntilTimeout>
 800475c:	1e03      	subs	r3, r0, #0
 800475e:	d021      	beq.n	80047a4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004760:	f3ef 8310 	mrs	r3, PRIMASK
 8004764:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800476a:	2301      	movs	r3, #1
 800476c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	f383 8810 	msr	PRIMASK, r3
}
 8004774:	46c0      	nop			@ (mov r8, r8)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2180      	movs	r1, #128	@ 0x80
 8004782:	438a      	bics	r2, r1
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478c:	f383 8810 	msr	PRIMASK, r3
}
 8004790:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2278      	movs	r2, #120	@ 0x78
 800479c:	2100      	movs	r1, #0
 800479e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e05f      	b.n	8004864 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2204      	movs	r2, #4
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d146      	bne.n	8004840 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b4:	2280      	movs	r2, #128	@ 0x80
 80047b6:	03d1      	lsls	r1, r2, #15
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	4a2c      	ldr	r2, [pc, #176]	@ (800486c <UART_CheckIdleState+0x148>)
 80047bc:	9200      	str	r2, [sp, #0]
 80047be:	2200      	movs	r2, #0
 80047c0:	f000 f858 	bl	8004874 <UART_WaitOnFlagUntilTimeout>
 80047c4:	1e03      	subs	r3, r0, #0
 80047c6:	d03b      	beq.n	8004840 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c8:	f3ef 8310 	mrs	r3, PRIMASK
 80047cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80047ce:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047d2:	2301      	movs	r3, #1
 80047d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f383 8810 	msr	PRIMASK, r3
}
 80047dc:	46c0      	nop			@ (mov r8, r8)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4921      	ldr	r1, [pc, #132]	@ (8004870 <UART_CheckIdleState+0x14c>)
 80047ea:	400a      	ands	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f383 8810 	msr	PRIMASK, r3
}
 80047f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047fa:	f3ef 8310 	mrs	r3, PRIMASK
 80047fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8004800:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004802:	633b      	str	r3, [r7, #48]	@ 0x30
 8004804:	2301      	movs	r3, #1
 8004806:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f383 8810 	msr	PRIMASK, r3
}
 800480e:	46c0      	nop			@ (mov r8, r8)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2101      	movs	r1, #1
 800481c:	438a      	bics	r2, r1
 800481e:	609a      	str	r2, [r3, #8]
 8004820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004822:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	f383 8810 	msr	PRIMASK, r3
}
 800482a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2280      	movs	r2, #128	@ 0x80
 8004830:	2120      	movs	r1, #32
 8004832:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2278      	movs	r2, #120	@ 0x78
 8004838:	2100      	movs	r1, #0
 800483a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e011      	b.n	8004864 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2280      	movs	r2, #128	@ 0x80
 800484a:	2120      	movs	r1, #32
 800484c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2278      	movs	r2, #120	@ 0x78
 800485e:	2100      	movs	r1, #0
 8004860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b010      	add	sp, #64	@ 0x40
 800486a:	bd80      	pop	{r7, pc}
 800486c:	01ffffff 	.word	0x01ffffff
 8004870:	fffffedf 	.word	0xfffffedf

08004874 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	1dfb      	adds	r3, r7, #7
 8004882:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004884:	e04b      	b.n	800491e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	3301      	adds	r3, #1
 800488a:	d048      	beq.n	800491e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488c:	f7fc fea2 	bl	80015d4 <HAL_GetTick>
 8004890:	0002      	movs	r2, r0
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	429a      	cmp	r2, r3
 800489a:	d302      	bcc.n	80048a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e04b      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2204      	movs	r2, #4
 80048ae:	4013      	ands	r3, r2
 80048b0:	d035      	beq.n	800491e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	2208      	movs	r2, #8
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d111      	bne.n	80048e4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2208      	movs	r2, #8
 80048c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	0018      	movs	r0, r3
 80048cc:	f000 f83c 	bl	8004948 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2284      	movs	r2, #132	@ 0x84
 80048d4:	2108      	movs	r1, #8
 80048d6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2278      	movs	r2, #120	@ 0x78
 80048dc:	2100      	movs	r1, #0
 80048de:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e02c      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69da      	ldr	r2, [r3, #28]
 80048ea:	2380      	movs	r3, #128	@ 0x80
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	401a      	ands	r2, r3
 80048f0:	2380      	movs	r3, #128	@ 0x80
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d112      	bne.n	800491e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2280      	movs	r2, #128	@ 0x80
 80048fe:	0112      	lsls	r2, r2, #4
 8004900:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	0018      	movs	r0, r3
 8004906:	f000 f81f 	bl	8004948 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2284      	movs	r2, #132	@ 0x84
 800490e:	2120      	movs	r1, #32
 8004910:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2278      	movs	r2, #120	@ 0x78
 8004916:	2100      	movs	r1, #0
 8004918:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e00f      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	4013      	ands	r3, r2
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	425a      	negs	r2, r3
 800492e:	4153      	adcs	r3, r2
 8004930:	b2db      	uxtb	r3, r3
 8004932:	001a      	movs	r2, r3
 8004934:	1dfb      	adds	r3, r7, #7
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d0a4      	beq.n	8004886 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	0018      	movs	r0, r3
 8004940:	46bd      	mov	sp, r7
 8004942:	b004      	add	sp, #16
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08e      	sub	sp, #56	@ 0x38
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004950:	f3ef 8310 	mrs	r3, PRIMASK
 8004954:	617b      	str	r3, [r7, #20]
  return(result);
 8004956:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004958:	637b      	str	r3, [r7, #52]	@ 0x34
 800495a:	2301      	movs	r3, #1
 800495c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	f383 8810 	msr	PRIMASK, r3
}
 8004964:	46c0      	nop			@ (mov r8, r8)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4926      	ldr	r1, [pc, #152]	@ (8004a0c <UART_EndRxTransfer+0xc4>)
 8004972:	400a      	ands	r2, r1
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004978:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	f383 8810 	msr	PRIMASK, r3
}
 8004980:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004982:	f3ef 8310 	mrs	r3, PRIMASK
 8004986:	623b      	str	r3, [r7, #32]
  return(result);
 8004988:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498a:	633b      	str	r3, [r7, #48]	@ 0x30
 800498c:	2301      	movs	r3, #1
 800498e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	f383 8810 	msr	PRIMASK, r3
}
 8004996:	46c0      	nop			@ (mov r8, r8)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2101      	movs	r1, #1
 80049a4:	438a      	bics	r2, r1
 80049a6:	609a      	str	r2, [r3, #8]
 80049a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ae:	f383 8810 	msr	PRIMASK, r3
}
 80049b2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d118      	bne.n	80049ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049bc:	f3ef 8310 	mrs	r3, PRIMASK
 80049c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80049c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049c6:	2301      	movs	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f383 8810 	msr	PRIMASK, r3
}
 80049d0:	46c0      	nop			@ (mov r8, r8)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2110      	movs	r1, #16
 80049de:	438a      	bics	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f383 8810 	msr	PRIMASK, r3
}
 80049ec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2280      	movs	r2, #128	@ 0x80
 80049f2:	2120      	movs	r1, #32
 80049f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b00e      	add	sp, #56	@ 0x38
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	fffffedf 	.word	0xfffffedf

08004a10 <std>:
 8004a10:	2300      	movs	r3, #0
 8004a12:	b510      	push	{r4, lr}
 8004a14:	0004      	movs	r4, r0
 8004a16:	6003      	str	r3, [r0, #0]
 8004a18:	6043      	str	r3, [r0, #4]
 8004a1a:	6083      	str	r3, [r0, #8]
 8004a1c:	8181      	strh	r1, [r0, #12]
 8004a1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a20:	81c2      	strh	r2, [r0, #14]
 8004a22:	6103      	str	r3, [r0, #16]
 8004a24:	6143      	str	r3, [r0, #20]
 8004a26:	6183      	str	r3, [r0, #24]
 8004a28:	0019      	movs	r1, r3
 8004a2a:	2208      	movs	r2, #8
 8004a2c:	305c      	adds	r0, #92	@ 0x5c
 8004a2e:	f000 f90f 	bl	8004c50 <memset>
 8004a32:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <std+0x50>)
 8004a34:	6224      	str	r4, [r4, #32]
 8004a36:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a38:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <std+0x54>)
 8004a3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a68 <std+0x58>)
 8004a3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a40:	4b0a      	ldr	r3, [pc, #40]	@ (8004a6c <std+0x5c>)
 8004a42:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a44:	4b0a      	ldr	r3, [pc, #40]	@ (8004a70 <std+0x60>)
 8004a46:	429c      	cmp	r4, r3
 8004a48:	d005      	beq.n	8004a56 <std+0x46>
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a74 <std+0x64>)
 8004a4c:	429c      	cmp	r4, r3
 8004a4e:	d002      	beq.n	8004a56 <std+0x46>
 8004a50:	4b09      	ldr	r3, [pc, #36]	@ (8004a78 <std+0x68>)
 8004a52:	429c      	cmp	r4, r3
 8004a54:	d103      	bne.n	8004a5e <std+0x4e>
 8004a56:	0020      	movs	r0, r4
 8004a58:	3058      	adds	r0, #88	@ 0x58
 8004a5a:	f000 f979 	bl	8004d50 <__retarget_lock_init_recursive>
 8004a5e:	bd10      	pop	{r4, pc}
 8004a60:	08004bb9 	.word	0x08004bb9
 8004a64:	08004be1 	.word	0x08004be1
 8004a68:	08004c19 	.word	0x08004c19
 8004a6c:	08004c45 	.word	0x08004c45
 8004a70:	200001f4 	.word	0x200001f4
 8004a74:	2000025c 	.word	0x2000025c
 8004a78:	200002c4 	.word	0x200002c4

08004a7c <stdio_exit_handler>:
 8004a7c:	b510      	push	{r4, lr}
 8004a7e:	4a03      	ldr	r2, [pc, #12]	@ (8004a8c <stdio_exit_handler+0x10>)
 8004a80:	4903      	ldr	r1, [pc, #12]	@ (8004a90 <stdio_exit_handler+0x14>)
 8004a82:	4804      	ldr	r0, [pc, #16]	@ (8004a94 <stdio_exit_handler+0x18>)
 8004a84:	f000 f86c 	bl	8004b60 <_fwalk_sglue>
 8004a88:	bd10      	pop	{r4, pc}
 8004a8a:	46c0      	nop			@ (mov r8, r8)
 8004a8c:	2000000c 	.word	0x2000000c
 8004a90:	080055e1 	.word	0x080055e1
 8004a94:	2000001c 	.word	0x2000001c

08004a98 <cleanup_stdio>:
 8004a98:	6841      	ldr	r1, [r0, #4]
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac8 <cleanup_stdio+0x30>)
 8004a9c:	b510      	push	{r4, lr}
 8004a9e:	0004      	movs	r4, r0
 8004aa0:	4299      	cmp	r1, r3
 8004aa2:	d001      	beq.n	8004aa8 <cleanup_stdio+0x10>
 8004aa4:	f000 fd9c 	bl	80055e0 <_fflush_r>
 8004aa8:	68a1      	ldr	r1, [r4, #8]
 8004aaa:	4b08      	ldr	r3, [pc, #32]	@ (8004acc <cleanup_stdio+0x34>)
 8004aac:	4299      	cmp	r1, r3
 8004aae:	d002      	beq.n	8004ab6 <cleanup_stdio+0x1e>
 8004ab0:	0020      	movs	r0, r4
 8004ab2:	f000 fd95 	bl	80055e0 <_fflush_r>
 8004ab6:	68e1      	ldr	r1, [r4, #12]
 8004ab8:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <cleanup_stdio+0x38>)
 8004aba:	4299      	cmp	r1, r3
 8004abc:	d002      	beq.n	8004ac4 <cleanup_stdio+0x2c>
 8004abe:	0020      	movs	r0, r4
 8004ac0:	f000 fd8e 	bl	80055e0 <_fflush_r>
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	46c0      	nop			@ (mov r8, r8)
 8004ac8:	200001f4 	.word	0x200001f4
 8004acc:	2000025c 	.word	0x2000025c
 8004ad0:	200002c4 	.word	0x200002c4

08004ad4 <global_stdio_init.part.0>:
 8004ad4:	b510      	push	{r4, lr}
 8004ad6:	4b09      	ldr	r3, [pc, #36]	@ (8004afc <global_stdio_init.part.0+0x28>)
 8004ad8:	4a09      	ldr	r2, [pc, #36]	@ (8004b00 <global_stdio_init.part.0+0x2c>)
 8004ada:	2104      	movs	r1, #4
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	4809      	ldr	r0, [pc, #36]	@ (8004b04 <global_stdio_init.part.0+0x30>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f7ff ff95 	bl	8004a10 <std>
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	2109      	movs	r1, #9
 8004aea:	4807      	ldr	r0, [pc, #28]	@ (8004b08 <global_stdio_init.part.0+0x34>)
 8004aec:	f7ff ff90 	bl	8004a10 <std>
 8004af0:	2202      	movs	r2, #2
 8004af2:	2112      	movs	r1, #18
 8004af4:	4805      	ldr	r0, [pc, #20]	@ (8004b0c <global_stdio_init.part.0+0x38>)
 8004af6:	f7ff ff8b 	bl	8004a10 <std>
 8004afa:	bd10      	pop	{r4, pc}
 8004afc:	2000032c 	.word	0x2000032c
 8004b00:	08004a7d 	.word	0x08004a7d
 8004b04:	200001f4 	.word	0x200001f4
 8004b08:	2000025c 	.word	0x2000025c
 8004b0c:	200002c4 	.word	0x200002c4

08004b10 <__sfp_lock_acquire>:
 8004b10:	b510      	push	{r4, lr}
 8004b12:	4802      	ldr	r0, [pc, #8]	@ (8004b1c <__sfp_lock_acquire+0xc>)
 8004b14:	f000 f91d 	bl	8004d52 <__retarget_lock_acquire_recursive>
 8004b18:	bd10      	pop	{r4, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	20000335 	.word	0x20000335

08004b20 <__sfp_lock_release>:
 8004b20:	b510      	push	{r4, lr}
 8004b22:	4802      	ldr	r0, [pc, #8]	@ (8004b2c <__sfp_lock_release+0xc>)
 8004b24:	f000 f916 	bl	8004d54 <__retarget_lock_release_recursive>
 8004b28:	bd10      	pop	{r4, pc}
 8004b2a:	46c0      	nop			@ (mov r8, r8)
 8004b2c:	20000335 	.word	0x20000335

08004b30 <__sinit>:
 8004b30:	b510      	push	{r4, lr}
 8004b32:	0004      	movs	r4, r0
 8004b34:	f7ff ffec 	bl	8004b10 <__sfp_lock_acquire>
 8004b38:	6a23      	ldr	r3, [r4, #32]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <__sinit+0x14>
 8004b3e:	f7ff ffef 	bl	8004b20 <__sfp_lock_release>
 8004b42:	bd10      	pop	{r4, pc}
 8004b44:	4b04      	ldr	r3, [pc, #16]	@ (8004b58 <__sinit+0x28>)
 8004b46:	6223      	str	r3, [r4, #32]
 8004b48:	4b04      	ldr	r3, [pc, #16]	@ (8004b5c <__sinit+0x2c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f6      	bne.n	8004b3e <__sinit+0xe>
 8004b50:	f7ff ffc0 	bl	8004ad4 <global_stdio_init.part.0>
 8004b54:	e7f3      	b.n	8004b3e <__sinit+0xe>
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	08004a99 	.word	0x08004a99
 8004b5c:	2000032c 	.word	0x2000032c

08004b60 <_fwalk_sglue>:
 8004b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b62:	0014      	movs	r4, r2
 8004b64:	2600      	movs	r6, #0
 8004b66:	9000      	str	r0, [sp, #0]
 8004b68:	9101      	str	r1, [sp, #4]
 8004b6a:	68a5      	ldr	r5, [r4, #8]
 8004b6c:	6867      	ldr	r7, [r4, #4]
 8004b6e:	3f01      	subs	r7, #1
 8004b70:	d504      	bpl.n	8004b7c <_fwalk_sglue+0x1c>
 8004b72:	6824      	ldr	r4, [r4, #0]
 8004b74:	2c00      	cmp	r4, #0
 8004b76:	d1f8      	bne.n	8004b6a <_fwalk_sglue+0xa>
 8004b78:	0030      	movs	r0, r6
 8004b7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b7c:	89ab      	ldrh	r3, [r5, #12]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d908      	bls.n	8004b94 <_fwalk_sglue+0x34>
 8004b82:	220e      	movs	r2, #14
 8004b84:	5eab      	ldrsh	r3, [r5, r2]
 8004b86:	3301      	adds	r3, #1
 8004b88:	d004      	beq.n	8004b94 <_fwalk_sglue+0x34>
 8004b8a:	0029      	movs	r1, r5
 8004b8c:	9800      	ldr	r0, [sp, #0]
 8004b8e:	9b01      	ldr	r3, [sp, #4]
 8004b90:	4798      	blx	r3
 8004b92:	4306      	orrs	r6, r0
 8004b94:	3568      	adds	r5, #104	@ 0x68
 8004b96:	e7ea      	b.n	8004b6e <_fwalk_sglue+0xe>

08004b98 <iprintf>:
 8004b98:	b40f      	push	{r0, r1, r2, r3}
 8004b9a:	b507      	push	{r0, r1, r2, lr}
 8004b9c:	4905      	ldr	r1, [pc, #20]	@ (8004bb4 <iprintf+0x1c>)
 8004b9e:	ab04      	add	r3, sp, #16
 8004ba0:	6808      	ldr	r0, [r1, #0]
 8004ba2:	cb04      	ldmia	r3!, {r2}
 8004ba4:	6881      	ldr	r1, [r0, #8]
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	f000 f9fa 	bl	8004fa0 <_vfiprintf_r>
 8004bac:	b003      	add	sp, #12
 8004bae:	bc08      	pop	{r3}
 8004bb0:	b004      	add	sp, #16
 8004bb2:	4718      	bx	r3
 8004bb4:	20000018 	.word	0x20000018

08004bb8 <__sread>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	000c      	movs	r4, r1
 8004bbc:	250e      	movs	r5, #14
 8004bbe:	5f49      	ldrsh	r1, [r1, r5]
 8004bc0:	f000 f874 	bl	8004cac <_read_r>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	db03      	blt.n	8004bd0 <__sread+0x18>
 8004bc8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004bca:	181b      	adds	r3, r3, r0
 8004bcc:	6563      	str	r3, [r4, #84]	@ 0x54
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	4a02      	ldr	r2, [pc, #8]	@ (8004bdc <__sread+0x24>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	81a3      	strh	r3, [r4, #12]
 8004bd8:	e7f9      	b.n	8004bce <__sread+0x16>
 8004bda:	46c0      	nop			@ (mov r8, r8)
 8004bdc:	ffffefff 	.word	0xffffefff

08004be0 <__swrite>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	001f      	movs	r7, r3
 8004be4:	898b      	ldrh	r3, [r1, #12]
 8004be6:	0005      	movs	r5, r0
 8004be8:	000c      	movs	r4, r1
 8004bea:	0016      	movs	r6, r2
 8004bec:	05db      	lsls	r3, r3, #23
 8004bee:	d505      	bpl.n	8004bfc <__swrite+0x1c>
 8004bf0:	230e      	movs	r3, #14
 8004bf2:	5ec9      	ldrsh	r1, [r1, r3]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	f000 f844 	bl	8004c84 <_lseek_r>
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	4a05      	ldr	r2, [pc, #20]	@ (8004c14 <__swrite+0x34>)
 8004c00:	0028      	movs	r0, r5
 8004c02:	4013      	ands	r3, r2
 8004c04:	81a3      	strh	r3, [r4, #12]
 8004c06:	0032      	movs	r2, r6
 8004c08:	230e      	movs	r3, #14
 8004c0a:	5ee1      	ldrsh	r1, [r4, r3]
 8004c0c:	003b      	movs	r3, r7
 8004c0e:	f000 f861 	bl	8004cd4 <_write_r>
 8004c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c14:	ffffefff 	.word	0xffffefff

08004c18 <__sseek>:
 8004c18:	b570      	push	{r4, r5, r6, lr}
 8004c1a:	000c      	movs	r4, r1
 8004c1c:	250e      	movs	r5, #14
 8004c1e:	5f49      	ldrsh	r1, [r1, r5]
 8004c20:	f000 f830 	bl	8004c84 <_lseek_r>
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	1c42      	adds	r2, r0, #1
 8004c28:	d103      	bne.n	8004c32 <__sseek+0x1a>
 8004c2a:	4a05      	ldr	r2, [pc, #20]	@ (8004c40 <__sseek+0x28>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	81a3      	strh	r3, [r4, #12]
 8004c30:	bd70      	pop	{r4, r5, r6, pc}
 8004c32:	2280      	movs	r2, #128	@ 0x80
 8004c34:	0152      	lsls	r2, r2, #5
 8004c36:	4313      	orrs	r3, r2
 8004c38:	81a3      	strh	r3, [r4, #12]
 8004c3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c3c:	e7f8      	b.n	8004c30 <__sseek+0x18>
 8004c3e:	46c0      	nop			@ (mov r8, r8)
 8004c40:	ffffefff 	.word	0xffffefff

08004c44 <__sclose>:
 8004c44:	b510      	push	{r4, lr}
 8004c46:	230e      	movs	r3, #14
 8004c48:	5ec9      	ldrsh	r1, [r1, r3]
 8004c4a:	f000 f809 	bl	8004c60 <_close_r>
 8004c4e:	bd10      	pop	{r4, pc}

08004c50 <memset>:
 8004c50:	0003      	movs	r3, r0
 8004c52:	1882      	adds	r2, r0, r2
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d100      	bne.n	8004c5a <memset+0xa>
 8004c58:	4770      	bx	lr
 8004c5a:	7019      	strb	r1, [r3, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	e7f9      	b.n	8004c54 <memset+0x4>

08004c60 <_close_r>:
 8004c60:	2300      	movs	r3, #0
 8004c62:	b570      	push	{r4, r5, r6, lr}
 8004c64:	4d06      	ldr	r5, [pc, #24]	@ (8004c80 <_close_r+0x20>)
 8004c66:	0004      	movs	r4, r0
 8004c68:	0008      	movs	r0, r1
 8004c6a:	602b      	str	r3, [r5, #0]
 8004c6c:	f7fc fbb9 	bl	80013e2 <_close>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d103      	bne.n	8004c7c <_close_r+0x1c>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d000      	beq.n	8004c7c <_close_r+0x1c>
 8004c7a:	6023      	str	r3, [r4, #0]
 8004c7c:	bd70      	pop	{r4, r5, r6, pc}
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	20000330 	.word	0x20000330

08004c84 <_lseek_r>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	0004      	movs	r4, r0
 8004c88:	0008      	movs	r0, r1
 8004c8a:	0011      	movs	r1, r2
 8004c8c:	001a      	movs	r2, r3
 8004c8e:	2300      	movs	r3, #0
 8004c90:	4d05      	ldr	r5, [pc, #20]	@ (8004ca8 <_lseek_r+0x24>)
 8004c92:	602b      	str	r3, [r5, #0]
 8004c94:	f7fc fbc6 	bl	8001424 <_lseek>
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d103      	bne.n	8004ca4 <_lseek_r+0x20>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d000      	beq.n	8004ca4 <_lseek_r+0x20>
 8004ca2:	6023      	str	r3, [r4, #0]
 8004ca4:	bd70      	pop	{r4, r5, r6, pc}
 8004ca6:	46c0      	nop			@ (mov r8, r8)
 8004ca8:	20000330 	.word	0x20000330

08004cac <_read_r>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	0004      	movs	r4, r0
 8004cb0:	0008      	movs	r0, r1
 8004cb2:	0011      	movs	r1, r2
 8004cb4:	001a      	movs	r2, r3
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	4d05      	ldr	r5, [pc, #20]	@ (8004cd0 <_read_r+0x24>)
 8004cba:	602b      	str	r3, [r5, #0]
 8004cbc:	f7fc fb74 	bl	80013a8 <_read>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d103      	bne.n	8004ccc <_read_r+0x20>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d000      	beq.n	8004ccc <_read_r+0x20>
 8004cca:	6023      	str	r3, [r4, #0]
 8004ccc:	bd70      	pop	{r4, r5, r6, pc}
 8004cce:	46c0      	nop			@ (mov r8, r8)
 8004cd0:	20000330 	.word	0x20000330

08004cd4 <_write_r>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	0004      	movs	r4, r0
 8004cd8:	0008      	movs	r0, r1
 8004cda:	0011      	movs	r1, r2
 8004cdc:	001a      	movs	r2, r3
 8004cde:	2300      	movs	r3, #0
 8004ce0:	4d05      	ldr	r5, [pc, #20]	@ (8004cf8 <_write_r+0x24>)
 8004ce2:	602b      	str	r3, [r5, #0]
 8004ce4:	f7fb fbea 	bl	80004bc <_write>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d103      	bne.n	8004cf4 <_write_r+0x20>
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d000      	beq.n	8004cf4 <_write_r+0x20>
 8004cf2:	6023      	str	r3, [r4, #0]
 8004cf4:	bd70      	pop	{r4, r5, r6, pc}
 8004cf6:	46c0      	nop			@ (mov r8, r8)
 8004cf8:	20000330 	.word	0x20000330

08004cfc <__errno>:
 8004cfc:	4b01      	ldr	r3, [pc, #4]	@ (8004d04 <__errno+0x8>)
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	4770      	bx	lr
 8004d02:	46c0      	nop			@ (mov r8, r8)
 8004d04:	20000018 	.word	0x20000018

08004d08 <__libc_init_array>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	2600      	movs	r6, #0
 8004d0c:	4c0c      	ldr	r4, [pc, #48]	@ (8004d40 <__libc_init_array+0x38>)
 8004d0e:	4d0d      	ldr	r5, [pc, #52]	@ (8004d44 <__libc_init_array+0x3c>)
 8004d10:	1b64      	subs	r4, r4, r5
 8004d12:	10a4      	asrs	r4, r4, #2
 8004d14:	42a6      	cmp	r6, r4
 8004d16:	d109      	bne.n	8004d2c <__libc_init_array+0x24>
 8004d18:	2600      	movs	r6, #0
 8004d1a:	f000 fddb 	bl	80058d4 <_init>
 8004d1e:	4c0a      	ldr	r4, [pc, #40]	@ (8004d48 <__libc_init_array+0x40>)
 8004d20:	4d0a      	ldr	r5, [pc, #40]	@ (8004d4c <__libc_init_array+0x44>)
 8004d22:	1b64      	subs	r4, r4, r5
 8004d24:	10a4      	asrs	r4, r4, #2
 8004d26:	42a6      	cmp	r6, r4
 8004d28:	d105      	bne.n	8004d36 <__libc_init_array+0x2e>
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
 8004d2c:	00b3      	lsls	r3, r6, #2
 8004d2e:	58eb      	ldr	r3, [r5, r3]
 8004d30:	4798      	blx	r3
 8004d32:	3601      	adds	r6, #1
 8004d34:	e7ee      	b.n	8004d14 <__libc_init_array+0xc>
 8004d36:	00b3      	lsls	r3, r6, #2
 8004d38:	58eb      	ldr	r3, [r5, r3]
 8004d3a:	4798      	blx	r3
 8004d3c:	3601      	adds	r6, #1
 8004d3e:	e7f2      	b.n	8004d26 <__libc_init_array+0x1e>
 8004d40:	080059ec 	.word	0x080059ec
 8004d44:	080059ec 	.word	0x080059ec
 8004d48:	080059f0 	.word	0x080059f0
 8004d4c:	080059ec 	.word	0x080059ec

08004d50 <__retarget_lock_init_recursive>:
 8004d50:	4770      	bx	lr

08004d52 <__retarget_lock_acquire_recursive>:
 8004d52:	4770      	bx	lr

08004d54 <__retarget_lock_release_recursive>:
 8004d54:	4770      	bx	lr
	...

08004d58 <_free_r>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	0005      	movs	r5, r0
 8004d5c:	1e0c      	subs	r4, r1, #0
 8004d5e:	d010      	beq.n	8004d82 <_free_r+0x2a>
 8004d60:	3c04      	subs	r4, #4
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	da00      	bge.n	8004d6a <_free_r+0x12>
 8004d68:	18e4      	adds	r4, r4, r3
 8004d6a:	0028      	movs	r0, r5
 8004d6c:	f000 f8e0 	bl	8004f30 <__malloc_lock>
 8004d70:	4a1d      	ldr	r2, [pc, #116]	@ (8004de8 <_free_r+0x90>)
 8004d72:	6813      	ldr	r3, [r2, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d105      	bne.n	8004d84 <_free_r+0x2c>
 8004d78:	6063      	str	r3, [r4, #4]
 8004d7a:	6014      	str	r4, [r2, #0]
 8004d7c:	0028      	movs	r0, r5
 8004d7e:	f000 f8df 	bl	8004f40 <__malloc_unlock>
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
 8004d84:	42a3      	cmp	r3, r4
 8004d86:	d908      	bls.n	8004d9a <_free_r+0x42>
 8004d88:	6820      	ldr	r0, [r4, #0]
 8004d8a:	1821      	adds	r1, r4, r0
 8004d8c:	428b      	cmp	r3, r1
 8004d8e:	d1f3      	bne.n	8004d78 <_free_r+0x20>
 8004d90:	6819      	ldr	r1, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	1809      	adds	r1, r1, r0
 8004d96:	6021      	str	r1, [r4, #0]
 8004d98:	e7ee      	b.n	8004d78 <_free_r+0x20>
 8004d9a:	001a      	movs	r2, r3
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <_free_r+0x4e>
 8004da2:	42a3      	cmp	r3, r4
 8004da4:	d9f9      	bls.n	8004d9a <_free_r+0x42>
 8004da6:	6811      	ldr	r1, [r2, #0]
 8004da8:	1850      	adds	r0, r2, r1
 8004daa:	42a0      	cmp	r0, r4
 8004dac:	d10b      	bne.n	8004dc6 <_free_r+0x6e>
 8004dae:	6820      	ldr	r0, [r4, #0]
 8004db0:	1809      	adds	r1, r1, r0
 8004db2:	1850      	adds	r0, r2, r1
 8004db4:	6011      	str	r1, [r2, #0]
 8004db6:	4283      	cmp	r3, r0
 8004db8:	d1e0      	bne.n	8004d7c <_free_r+0x24>
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	1841      	adds	r1, r0, r1
 8004dc0:	6011      	str	r1, [r2, #0]
 8004dc2:	6053      	str	r3, [r2, #4]
 8004dc4:	e7da      	b.n	8004d7c <_free_r+0x24>
 8004dc6:	42a0      	cmp	r0, r4
 8004dc8:	d902      	bls.n	8004dd0 <_free_r+0x78>
 8004dca:	230c      	movs	r3, #12
 8004dcc:	602b      	str	r3, [r5, #0]
 8004dce:	e7d5      	b.n	8004d7c <_free_r+0x24>
 8004dd0:	6820      	ldr	r0, [r4, #0]
 8004dd2:	1821      	adds	r1, r4, r0
 8004dd4:	428b      	cmp	r3, r1
 8004dd6:	d103      	bne.n	8004de0 <_free_r+0x88>
 8004dd8:	6819      	ldr	r1, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	1809      	adds	r1, r1, r0
 8004dde:	6021      	str	r1, [r4, #0]
 8004de0:	6063      	str	r3, [r4, #4]
 8004de2:	6054      	str	r4, [r2, #4]
 8004de4:	e7ca      	b.n	8004d7c <_free_r+0x24>
 8004de6:	46c0      	nop			@ (mov r8, r8)
 8004de8:	2000033c 	.word	0x2000033c

08004dec <sbrk_aligned>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	4e0f      	ldr	r6, [pc, #60]	@ (8004e2c <sbrk_aligned+0x40>)
 8004df0:	000d      	movs	r5, r1
 8004df2:	6831      	ldr	r1, [r6, #0]
 8004df4:	0004      	movs	r4, r0
 8004df6:	2900      	cmp	r1, #0
 8004df8:	d102      	bne.n	8004e00 <sbrk_aligned+0x14>
 8004dfa:	f000 fcbd 	bl	8005778 <_sbrk_r>
 8004dfe:	6030      	str	r0, [r6, #0]
 8004e00:	0029      	movs	r1, r5
 8004e02:	0020      	movs	r0, r4
 8004e04:	f000 fcb8 	bl	8005778 <_sbrk_r>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	d103      	bne.n	8004e14 <sbrk_aligned+0x28>
 8004e0c:	2501      	movs	r5, #1
 8004e0e:	426d      	negs	r5, r5
 8004e10:	0028      	movs	r0, r5
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
 8004e14:	2303      	movs	r3, #3
 8004e16:	1cc5      	adds	r5, r0, #3
 8004e18:	439d      	bics	r5, r3
 8004e1a:	42a8      	cmp	r0, r5
 8004e1c:	d0f8      	beq.n	8004e10 <sbrk_aligned+0x24>
 8004e1e:	1a29      	subs	r1, r5, r0
 8004e20:	0020      	movs	r0, r4
 8004e22:	f000 fca9 	bl	8005778 <_sbrk_r>
 8004e26:	3001      	adds	r0, #1
 8004e28:	d1f2      	bne.n	8004e10 <sbrk_aligned+0x24>
 8004e2a:	e7ef      	b.n	8004e0c <sbrk_aligned+0x20>
 8004e2c:	20000338 	.word	0x20000338

08004e30 <_malloc_r>:
 8004e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e32:	2203      	movs	r2, #3
 8004e34:	1ccb      	adds	r3, r1, #3
 8004e36:	4393      	bics	r3, r2
 8004e38:	3308      	adds	r3, #8
 8004e3a:	0005      	movs	r5, r0
 8004e3c:	001f      	movs	r7, r3
 8004e3e:	2b0c      	cmp	r3, #12
 8004e40:	d234      	bcs.n	8004eac <_malloc_r+0x7c>
 8004e42:	270c      	movs	r7, #12
 8004e44:	42b9      	cmp	r1, r7
 8004e46:	d833      	bhi.n	8004eb0 <_malloc_r+0x80>
 8004e48:	0028      	movs	r0, r5
 8004e4a:	f000 f871 	bl	8004f30 <__malloc_lock>
 8004e4e:	4e37      	ldr	r6, [pc, #220]	@ (8004f2c <_malloc_r+0xfc>)
 8004e50:	6833      	ldr	r3, [r6, #0]
 8004e52:	001c      	movs	r4, r3
 8004e54:	2c00      	cmp	r4, #0
 8004e56:	d12f      	bne.n	8004eb8 <_malloc_r+0x88>
 8004e58:	0039      	movs	r1, r7
 8004e5a:	0028      	movs	r0, r5
 8004e5c:	f7ff ffc6 	bl	8004dec <sbrk_aligned>
 8004e60:	0004      	movs	r4, r0
 8004e62:	1c43      	adds	r3, r0, #1
 8004e64:	d15f      	bne.n	8004f26 <_malloc_r+0xf6>
 8004e66:	6834      	ldr	r4, [r6, #0]
 8004e68:	9400      	str	r4, [sp, #0]
 8004e6a:	9b00      	ldr	r3, [sp, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d14a      	bne.n	8004f06 <_malloc_r+0xd6>
 8004e70:	2c00      	cmp	r4, #0
 8004e72:	d052      	beq.n	8004f1a <_malloc_r+0xea>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	0028      	movs	r0, r5
 8004e78:	18e3      	adds	r3, r4, r3
 8004e7a:	9900      	ldr	r1, [sp, #0]
 8004e7c:	9301      	str	r3, [sp, #4]
 8004e7e:	f000 fc7b 	bl	8005778 <_sbrk_r>
 8004e82:	9b01      	ldr	r3, [sp, #4]
 8004e84:	4283      	cmp	r3, r0
 8004e86:	d148      	bne.n	8004f1a <_malloc_r+0xea>
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	0028      	movs	r0, r5
 8004e8c:	1aff      	subs	r7, r7, r3
 8004e8e:	0039      	movs	r1, r7
 8004e90:	f7ff ffac 	bl	8004dec <sbrk_aligned>
 8004e94:	3001      	adds	r0, #1
 8004e96:	d040      	beq.n	8004f1a <_malloc_r+0xea>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	19db      	adds	r3, r3, r7
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	6833      	ldr	r3, [r6, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	2a00      	cmp	r2, #0
 8004ea4:	d133      	bne.n	8004f0e <_malloc_r+0xde>
 8004ea6:	9b00      	ldr	r3, [sp, #0]
 8004ea8:	6033      	str	r3, [r6, #0]
 8004eaa:	e019      	b.n	8004ee0 <_malloc_r+0xb0>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	dac9      	bge.n	8004e44 <_malloc_r+0x14>
 8004eb0:	230c      	movs	r3, #12
 8004eb2:	602b      	str	r3, [r5, #0]
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004eb8:	6821      	ldr	r1, [r4, #0]
 8004eba:	1bc9      	subs	r1, r1, r7
 8004ebc:	d420      	bmi.n	8004f00 <_malloc_r+0xd0>
 8004ebe:	290b      	cmp	r1, #11
 8004ec0:	d90a      	bls.n	8004ed8 <_malloc_r+0xa8>
 8004ec2:	19e2      	adds	r2, r4, r7
 8004ec4:	6027      	str	r7, [r4, #0]
 8004ec6:	42a3      	cmp	r3, r4
 8004ec8:	d104      	bne.n	8004ed4 <_malloc_r+0xa4>
 8004eca:	6032      	str	r2, [r6, #0]
 8004ecc:	6863      	ldr	r3, [r4, #4]
 8004ece:	6011      	str	r1, [r2, #0]
 8004ed0:	6053      	str	r3, [r2, #4]
 8004ed2:	e005      	b.n	8004ee0 <_malloc_r+0xb0>
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	e7f9      	b.n	8004ecc <_malloc_r+0x9c>
 8004ed8:	6862      	ldr	r2, [r4, #4]
 8004eda:	42a3      	cmp	r3, r4
 8004edc:	d10e      	bne.n	8004efc <_malloc_r+0xcc>
 8004ede:	6032      	str	r2, [r6, #0]
 8004ee0:	0028      	movs	r0, r5
 8004ee2:	f000 f82d 	bl	8004f40 <__malloc_unlock>
 8004ee6:	0020      	movs	r0, r4
 8004ee8:	2207      	movs	r2, #7
 8004eea:	300b      	adds	r0, #11
 8004eec:	1d23      	adds	r3, r4, #4
 8004eee:	4390      	bics	r0, r2
 8004ef0:	1ac2      	subs	r2, r0, r3
 8004ef2:	4298      	cmp	r0, r3
 8004ef4:	d0df      	beq.n	8004eb6 <_malloc_r+0x86>
 8004ef6:	1a1b      	subs	r3, r3, r0
 8004ef8:	50a3      	str	r3, [r4, r2]
 8004efa:	e7dc      	b.n	8004eb6 <_malloc_r+0x86>
 8004efc:	605a      	str	r2, [r3, #4]
 8004efe:	e7ef      	b.n	8004ee0 <_malloc_r+0xb0>
 8004f00:	0023      	movs	r3, r4
 8004f02:	6864      	ldr	r4, [r4, #4]
 8004f04:	e7a6      	b.n	8004e54 <_malloc_r+0x24>
 8004f06:	9c00      	ldr	r4, [sp, #0]
 8004f08:	6863      	ldr	r3, [r4, #4]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	e7ad      	b.n	8004e6a <_malloc_r+0x3a>
 8004f0e:	001a      	movs	r2, r3
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	42a3      	cmp	r3, r4
 8004f14:	d1fb      	bne.n	8004f0e <_malloc_r+0xde>
 8004f16:	2300      	movs	r3, #0
 8004f18:	e7da      	b.n	8004ed0 <_malloc_r+0xa0>
 8004f1a:	230c      	movs	r3, #12
 8004f1c:	0028      	movs	r0, r5
 8004f1e:	602b      	str	r3, [r5, #0]
 8004f20:	f000 f80e 	bl	8004f40 <__malloc_unlock>
 8004f24:	e7c6      	b.n	8004eb4 <_malloc_r+0x84>
 8004f26:	6007      	str	r7, [r0, #0]
 8004f28:	e7da      	b.n	8004ee0 <_malloc_r+0xb0>
 8004f2a:	46c0      	nop			@ (mov r8, r8)
 8004f2c:	2000033c 	.word	0x2000033c

08004f30 <__malloc_lock>:
 8004f30:	b510      	push	{r4, lr}
 8004f32:	4802      	ldr	r0, [pc, #8]	@ (8004f3c <__malloc_lock+0xc>)
 8004f34:	f7ff ff0d 	bl	8004d52 <__retarget_lock_acquire_recursive>
 8004f38:	bd10      	pop	{r4, pc}
 8004f3a:	46c0      	nop			@ (mov r8, r8)
 8004f3c:	20000334 	.word	0x20000334

08004f40 <__malloc_unlock>:
 8004f40:	b510      	push	{r4, lr}
 8004f42:	4802      	ldr	r0, [pc, #8]	@ (8004f4c <__malloc_unlock+0xc>)
 8004f44:	f7ff ff06 	bl	8004d54 <__retarget_lock_release_recursive>
 8004f48:	bd10      	pop	{r4, pc}
 8004f4a:	46c0      	nop			@ (mov r8, r8)
 8004f4c:	20000334 	.word	0x20000334

08004f50 <__sfputc_r>:
 8004f50:	6893      	ldr	r3, [r2, #8]
 8004f52:	b510      	push	{r4, lr}
 8004f54:	3b01      	subs	r3, #1
 8004f56:	6093      	str	r3, [r2, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	da04      	bge.n	8004f66 <__sfputc_r+0x16>
 8004f5c:	6994      	ldr	r4, [r2, #24]
 8004f5e:	42a3      	cmp	r3, r4
 8004f60:	db07      	blt.n	8004f72 <__sfputc_r+0x22>
 8004f62:	290a      	cmp	r1, #10
 8004f64:	d005      	beq.n	8004f72 <__sfputc_r+0x22>
 8004f66:	6813      	ldr	r3, [r2, #0]
 8004f68:	1c58      	adds	r0, r3, #1
 8004f6a:	6010      	str	r0, [r2, #0]
 8004f6c:	7019      	strb	r1, [r3, #0]
 8004f6e:	0008      	movs	r0, r1
 8004f70:	bd10      	pop	{r4, pc}
 8004f72:	f000 fb60 	bl	8005636 <__swbuf_r>
 8004f76:	0001      	movs	r1, r0
 8004f78:	e7f9      	b.n	8004f6e <__sfputc_r+0x1e>

08004f7a <__sfputs_r>:
 8004f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7c:	0006      	movs	r6, r0
 8004f7e:	000f      	movs	r7, r1
 8004f80:	0014      	movs	r4, r2
 8004f82:	18d5      	adds	r5, r2, r3
 8004f84:	42ac      	cmp	r4, r5
 8004f86:	d101      	bne.n	8004f8c <__sfputs_r+0x12>
 8004f88:	2000      	movs	r0, #0
 8004f8a:	e007      	b.n	8004f9c <__sfputs_r+0x22>
 8004f8c:	7821      	ldrb	r1, [r4, #0]
 8004f8e:	003a      	movs	r2, r7
 8004f90:	0030      	movs	r0, r6
 8004f92:	f7ff ffdd 	bl	8004f50 <__sfputc_r>
 8004f96:	3401      	adds	r4, #1
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d1f3      	bne.n	8004f84 <__sfputs_r+0xa>
 8004f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fa0 <_vfiprintf_r>:
 8004fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fa2:	b0a1      	sub	sp, #132	@ 0x84
 8004fa4:	000f      	movs	r7, r1
 8004fa6:	0015      	movs	r5, r2
 8004fa8:	001e      	movs	r6, r3
 8004faa:	9003      	str	r0, [sp, #12]
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d004      	beq.n	8004fba <_vfiprintf_r+0x1a>
 8004fb0:	6a03      	ldr	r3, [r0, #32]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <_vfiprintf_r+0x1a>
 8004fb6:	f7ff fdbb 	bl	8004b30 <__sinit>
 8004fba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fbc:	07db      	lsls	r3, r3, #31
 8004fbe:	d405      	bmi.n	8004fcc <_vfiprintf_r+0x2c>
 8004fc0:	89bb      	ldrh	r3, [r7, #12]
 8004fc2:	059b      	lsls	r3, r3, #22
 8004fc4:	d402      	bmi.n	8004fcc <_vfiprintf_r+0x2c>
 8004fc6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004fc8:	f7ff fec3 	bl	8004d52 <__retarget_lock_acquire_recursive>
 8004fcc:	89bb      	ldrh	r3, [r7, #12]
 8004fce:	071b      	lsls	r3, r3, #28
 8004fd0:	d502      	bpl.n	8004fd8 <_vfiprintf_r+0x38>
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d113      	bne.n	8005000 <_vfiprintf_r+0x60>
 8004fd8:	0039      	movs	r1, r7
 8004fda:	9803      	ldr	r0, [sp, #12]
 8004fdc:	f000 fb6e 	bl	80056bc <__swsetup_r>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d00d      	beq.n	8005000 <_vfiprintf_r+0x60>
 8004fe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fe6:	07db      	lsls	r3, r3, #31
 8004fe8:	d503      	bpl.n	8004ff2 <_vfiprintf_r+0x52>
 8004fea:	2001      	movs	r0, #1
 8004fec:	4240      	negs	r0, r0
 8004fee:	b021      	add	sp, #132	@ 0x84
 8004ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ff2:	89bb      	ldrh	r3, [r7, #12]
 8004ff4:	059b      	lsls	r3, r3, #22
 8004ff6:	d4f8      	bmi.n	8004fea <_vfiprintf_r+0x4a>
 8004ff8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004ffa:	f7ff feab 	bl	8004d54 <__retarget_lock_release_recursive>
 8004ffe:	e7f4      	b.n	8004fea <_vfiprintf_r+0x4a>
 8005000:	2300      	movs	r3, #0
 8005002:	ac08      	add	r4, sp, #32
 8005004:	6163      	str	r3, [r4, #20]
 8005006:	3320      	adds	r3, #32
 8005008:	7663      	strb	r3, [r4, #25]
 800500a:	3310      	adds	r3, #16
 800500c:	76a3      	strb	r3, [r4, #26]
 800500e:	9607      	str	r6, [sp, #28]
 8005010:	002e      	movs	r6, r5
 8005012:	7833      	ldrb	r3, [r6, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <_vfiprintf_r+0x7c>
 8005018:	2b25      	cmp	r3, #37	@ 0x25
 800501a:	d148      	bne.n	80050ae <_vfiprintf_r+0x10e>
 800501c:	1b73      	subs	r3, r6, r5
 800501e:	9305      	str	r3, [sp, #20]
 8005020:	42ae      	cmp	r6, r5
 8005022:	d00b      	beq.n	800503c <_vfiprintf_r+0x9c>
 8005024:	002a      	movs	r2, r5
 8005026:	0039      	movs	r1, r7
 8005028:	9803      	ldr	r0, [sp, #12]
 800502a:	f7ff ffa6 	bl	8004f7a <__sfputs_r>
 800502e:	3001      	adds	r0, #1
 8005030:	d100      	bne.n	8005034 <_vfiprintf_r+0x94>
 8005032:	e0ae      	b.n	8005192 <_vfiprintf_r+0x1f2>
 8005034:	6963      	ldr	r3, [r4, #20]
 8005036:	9a05      	ldr	r2, [sp, #20]
 8005038:	189b      	adds	r3, r3, r2
 800503a:	6163      	str	r3, [r4, #20]
 800503c:	7833      	ldrb	r3, [r6, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d100      	bne.n	8005044 <_vfiprintf_r+0xa4>
 8005042:	e0a6      	b.n	8005192 <_vfiprintf_r+0x1f2>
 8005044:	2201      	movs	r2, #1
 8005046:	2300      	movs	r3, #0
 8005048:	4252      	negs	r2, r2
 800504a:	6062      	str	r2, [r4, #4]
 800504c:	a904      	add	r1, sp, #16
 800504e:	3254      	adds	r2, #84	@ 0x54
 8005050:	1852      	adds	r2, r2, r1
 8005052:	1c75      	adds	r5, r6, #1
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	60e3      	str	r3, [r4, #12]
 8005058:	60a3      	str	r3, [r4, #8]
 800505a:	7013      	strb	r3, [r2, #0]
 800505c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800505e:	4b59      	ldr	r3, [pc, #356]	@ (80051c4 <_vfiprintf_r+0x224>)
 8005060:	2205      	movs	r2, #5
 8005062:	0018      	movs	r0, r3
 8005064:	7829      	ldrb	r1, [r5, #0]
 8005066:	9305      	str	r3, [sp, #20]
 8005068:	f000 fb98 	bl	800579c <memchr>
 800506c:	1c6e      	adds	r6, r5, #1
 800506e:	2800      	cmp	r0, #0
 8005070:	d11f      	bne.n	80050b2 <_vfiprintf_r+0x112>
 8005072:	6822      	ldr	r2, [r4, #0]
 8005074:	06d3      	lsls	r3, r2, #27
 8005076:	d504      	bpl.n	8005082 <_vfiprintf_r+0xe2>
 8005078:	2353      	movs	r3, #83	@ 0x53
 800507a:	a904      	add	r1, sp, #16
 800507c:	185b      	adds	r3, r3, r1
 800507e:	2120      	movs	r1, #32
 8005080:	7019      	strb	r1, [r3, #0]
 8005082:	0713      	lsls	r3, r2, #28
 8005084:	d504      	bpl.n	8005090 <_vfiprintf_r+0xf0>
 8005086:	2353      	movs	r3, #83	@ 0x53
 8005088:	a904      	add	r1, sp, #16
 800508a:	185b      	adds	r3, r3, r1
 800508c:	212b      	movs	r1, #43	@ 0x2b
 800508e:	7019      	strb	r1, [r3, #0]
 8005090:	782b      	ldrb	r3, [r5, #0]
 8005092:	2b2a      	cmp	r3, #42	@ 0x2a
 8005094:	d016      	beq.n	80050c4 <_vfiprintf_r+0x124>
 8005096:	002e      	movs	r6, r5
 8005098:	2100      	movs	r1, #0
 800509a:	200a      	movs	r0, #10
 800509c:	68e3      	ldr	r3, [r4, #12]
 800509e:	7832      	ldrb	r2, [r6, #0]
 80050a0:	1c75      	adds	r5, r6, #1
 80050a2:	3a30      	subs	r2, #48	@ 0x30
 80050a4:	2a09      	cmp	r2, #9
 80050a6:	d950      	bls.n	800514a <_vfiprintf_r+0x1aa>
 80050a8:	2900      	cmp	r1, #0
 80050aa:	d111      	bne.n	80050d0 <_vfiprintf_r+0x130>
 80050ac:	e017      	b.n	80050de <_vfiprintf_r+0x13e>
 80050ae:	3601      	adds	r6, #1
 80050b0:	e7af      	b.n	8005012 <_vfiprintf_r+0x72>
 80050b2:	9b05      	ldr	r3, [sp, #20]
 80050b4:	6822      	ldr	r2, [r4, #0]
 80050b6:	1ac0      	subs	r0, r0, r3
 80050b8:	2301      	movs	r3, #1
 80050ba:	4083      	lsls	r3, r0
 80050bc:	4313      	orrs	r3, r2
 80050be:	0035      	movs	r5, r6
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	e7cc      	b.n	800505e <_vfiprintf_r+0xbe>
 80050c4:	9b07      	ldr	r3, [sp, #28]
 80050c6:	1d19      	adds	r1, r3, #4
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	9107      	str	r1, [sp, #28]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	db01      	blt.n	80050d4 <_vfiprintf_r+0x134>
 80050d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050d2:	e004      	b.n	80050de <_vfiprintf_r+0x13e>
 80050d4:	425b      	negs	r3, r3
 80050d6:	60e3      	str	r3, [r4, #12]
 80050d8:	2302      	movs	r3, #2
 80050da:	4313      	orrs	r3, r2
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	7833      	ldrb	r3, [r6, #0]
 80050e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80050e2:	d10c      	bne.n	80050fe <_vfiprintf_r+0x15e>
 80050e4:	7873      	ldrb	r3, [r6, #1]
 80050e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80050e8:	d134      	bne.n	8005154 <_vfiprintf_r+0x1b4>
 80050ea:	9b07      	ldr	r3, [sp, #28]
 80050ec:	3602      	adds	r6, #2
 80050ee:	1d1a      	adds	r2, r3, #4
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	9207      	str	r2, [sp, #28]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	da01      	bge.n	80050fc <_vfiprintf_r+0x15c>
 80050f8:	2301      	movs	r3, #1
 80050fa:	425b      	negs	r3, r3
 80050fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80050fe:	4d32      	ldr	r5, [pc, #200]	@ (80051c8 <_vfiprintf_r+0x228>)
 8005100:	2203      	movs	r2, #3
 8005102:	0028      	movs	r0, r5
 8005104:	7831      	ldrb	r1, [r6, #0]
 8005106:	f000 fb49 	bl	800579c <memchr>
 800510a:	2800      	cmp	r0, #0
 800510c:	d006      	beq.n	800511c <_vfiprintf_r+0x17c>
 800510e:	2340      	movs	r3, #64	@ 0x40
 8005110:	1b40      	subs	r0, r0, r5
 8005112:	4083      	lsls	r3, r0
 8005114:	6822      	ldr	r2, [r4, #0]
 8005116:	3601      	adds	r6, #1
 8005118:	4313      	orrs	r3, r2
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	7831      	ldrb	r1, [r6, #0]
 800511e:	2206      	movs	r2, #6
 8005120:	482a      	ldr	r0, [pc, #168]	@ (80051cc <_vfiprintf_r+0x22c>)
 8005122:	1c75      	adds	r5, r6, #1
 8005124:	7621      	strb	r1, [r4, #24]
 8005126:	f000 fb39 	bl	800579c <memchr>
 800512a:	2800      	cmp	r0, #0
 800512c:	d040      	beq.n	80051b0 <_vfiprintf_r+0x210>
 800512e:	4b28      	ldr	r3, [pc, #160]	@ (80051d0 <_vfiprintf_r+0x230>)
 8005130:	2b00      	cmp	r3, #0
 8005132:	d122      	bne.n	800517a <_vfiprintf_r+0x1da>
 8005134:	2207      	movs	r2, #7
 8005136:	9b07      	ldr	r3, [sp, #28]
 8005138:	3307      	adds	r3, #7
 800513a:	4393      	bics	r3, r2
 800513c:	3308      	adds	r3, #8
 800513e:	9307      	str	r3, [sp, #28]
 8005140:	6963      	ldr	r3, [r4, #20]
 8005142:	9a04      	ldr	r2, [sp, #16]
 8005144:	189b      	adds	r3, r3, r2
 8005146:	6163      	str	r3, [r4, #20]
 8005148:	e762      	b.n	8005010 <_vfiprintf_r+0x70>
 800514a:	4343      	muls	r3, r0
 800514c:	002e      	movs	r6, r5
 800514e:	2101      	movs	r1, #1
 8005150:	189b      	adds	r3, r3, r2
 8005152:	e7a4      	b.n	800509e <_vfiprintf_r+0xfe>
 8005154:	2300      	movs	r3, #0
 8005156:	200a      	movs	r0, #10
 8005158:	0019      	movs	r1, r3
 800515a:	3601      	adds	r6, #1
 800515c:	6063      	str	r3, [r4, #4]
 800515e:	7832      	ldrb	r2, [r6, #0]
 8005160:	1c75      	adds	r5, r6, #1
 8005162:	3a30      	subs	r2, #48	@ 0x30
 8005164:	2a09      	cmp	r2, #9
 8005166:	d903      	bls.n	8005170 <_vfiprintf_r+0x1d0>
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0c8      	beq.n	80050fe <_vfiprintf_r+0x15e>
 800516c:	9109      	str	r1, [sp, #36]	@ 0x24
 800516e:	e7c6      	b.n	80050fe <_vfiprintf_r+0x15e>
 8005170:	4341      	muls	r1, r0
 8005172:	002e      	movs	r6, r5
 8005174:	2301      	movs	r3, #1
 8005176:	1889      	adds	r1, r1, r2
 8005178:	e7f1      	b.n	800515e <_vfiprintf_r+0x1be>
 800517a:	aa07      	add	r2, sp, #28
 800517c:	9200      	str	r2, [sp, #0]
 800517e:	0021      	movs	r1, r4
 8005180:	003a      	movs	r2, r7
 8005182:	4b14      	ldr	r3, [pc, #80]	@ (80051d4 <_vfiprintf_r+0x234>)
 8005184:	9803      	ldr	r0, [sp, #12]
 8005186:	e000      	b.n	800518a <_vfiprintf_r+0x1ea>
 8005188:	bf00      	nop
 800518a:	9004      	str	r0, [sp, #16]
 800518c:	9b04      	ldr	r3, [sp, #16]
 800518e:	3301      	adds	r3, #1
 8005190:	d1d6      	bne.n	8005140 <_vfiprintf_r+0x1a0>
 8005192:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005194:	07db      	lsls	r3, r3, #31
 8005196:	d405      	bmi.n	80051a4 <_vfiprintf_r+0x204>
 8005198:	89bb      	ldrh	r3, [r7, #12]
 800519a:	059b      	lsls	r3, r3, #22
 800519c:	d402      	bmi.n	80051a4 <_vfiprintf_r+0x204>
 800519e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80051a0:	f7ff fdd8 	bl	8004d54 <__retarget_lock_release_recursive>
 80051a4:	89bb      	ldrh	r3, [r7, #12]
 80051a6:	065b      	lsls	r3, r3, #25
 80051a8:	d500      	bpl.n	80051ac <_vfiprintf_r+0x20c>
 80051aa:	e71e      	b.n	8004fea <_vfiprintf_r+0x4a>
 80051ac:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80051ae:	e71e      	b.n	8004fee <_vfiprintf_r+0x4e>
 80051b0:	aa07      	add	r2, sp, #28
 80051b2:	9200      	str	r2, [sp, #0]
 80051b4:	0021      	movs	r1, r4
 80051b6:	003a      	movs	r2, r7
 80051b8:	4b06      	ldr	r3, [pc, #24]	@ (80051d4 <_vfiprintf_r+0x234>)
 80051ba:	9803      	ldr	r0, [sp, #12]
 80051bc:	f000 f87c 	bl	80052b8 <_printf_i>
 80051c0:	e7e3      	b.n	800518a <_vfiprintf_r+0x1ea>
 80051c2:	46c0      	nop			@ (mov r8, r8)
 80051c4:	080059b0 	.word	0x080059b0
 80051c8:	080059b6 	.word	0x080059b6
 80051cc:	080059ba 	.word	0x080059ba
 80051d0:	00000000 	.word	0x00000000
 80051d4:	08004f7b 	.word	0x08004f7b

080051d8 <_printf_common>:
 80051d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051da:	0016      	movs	r6, r2
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	688a      	ldr	r2, [r1, #8]
 80051e0:	690b      	ldr	r3, [r1, #16]
 80051e2:	000c      	movs	r4, r1
 80051e4:	9000      	str	r0, [sp, #0]
 80051e6:	4293      	cmp	r3, r2
 80051e8:	da00      	bge.n	80051ec <_printf_common+0x14>
 80051ea:	0013      	movs	r3, r2
 80051ec:	0022      	movs	r2, r4
 80051ee:	6033      	str	r3, [r6, #0]
 80051f0:	3243      	adds	r2, #67	@ 0x43
 80051f2:	7812      	ldrb	r2, [r2, #0]
 80051f4:	2a00      	cmp	r2, #0
 80051f6:	d001      	beq.n	80051fc <_printf_common+0x24>
 80051f8:	3301      	adds	r3, #1
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	069b      	lsls	r3, r3, #26
 8005200:	d502      	bpl.n	8005208 <_printf_common+0x30>
 8005202:	6833      	ldr	r3, [r6, #0]
 8005204:	3302      	adds	r3, #2
 8005206:	6033      	str	r3, [r6, #0]
 8005208:	6822      	ldr	r2, [r4, #0]
 800520a:	2306      	movs	r3, #6
 800520c:	0015      	movs	r5, r2
 800520e:	401d      	ands	r5, r3
 8005210:	421a      	tst	r2, r3
 8005212:	d027      	beq.n	8005264 <_printf_common+0x8c>
 8005214:	0023      	movs	r3, r4
 8005216:	3343      	adds	r3, #67	@ 0x43
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	1e5a      	subs	r2, r3, #1
 800521c:	4193      	sbcs	r3, r2
 800521e:	6822      	ldr	r2, [r4, #0]
 8005220:	0692      	lsls	r2, r2, #26
 8005222:	d430      	bmi.n	8005286 <_printf_common+0xae>
 8005224:	0022      	movs	r2, r4
 8005226:	9901      	ldr	r1, [sp, #4]
 8005228:	9800      	ldr	r0, [sp, #0]
 800522a:	9d08      	ldr	r5, [sp, #32]
 800522c:	3243      	adds	r2, #67	@ 0x43
 800522e:	47a8      	blx	r5
 8005230:	3001      	adds	r0, #1
 8005232:	d025      	beq.n	8005280 <_printf_common+0xa8>
 8005234:	2206      	movs	r2, #6
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	2500      	movs	r5, #0
 800523a:	4013      	ands	r3, r2
 800523c:	2b04      	cmp	r3, #4
 800523e:	d105      	bne.n	800524c <_printf_common+0x74>
 8005240:	6833      	ldr	r3, [r6, #0]
 8005242:	68e5      	ldr	r5, [r4, #12]
 8005244:	1aed      	subs	r5, r5, r3
 8005246:	43eb      	mvns	r3, r5
 8005248:	17db      	asrs	r3, r3, #31
 800524a:	401d      	ands	r5, r3
 800524c:	68a3      	ldr	r3, [r4, #8]
 800524e:	6922      	ldr	r2, [r4, #16]
 8005250:	4293      	cmp	r3, r2
 8005252:	dd01      	ble.n	8005258 <_printf_common+0x80>
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	18ed      	adds	r5, r5, r3
 8005258:	2600      	movs	r6, #0
 800525a:	42b5      	cmp	r5, r6
 800525c:	d120      	bne.n	80052a0 <_printf_common+0xc8>
 800525e:	2000      	movs	r0, #0
 8005260:	e010      	b.n	8005284 <_printf_common+0xac>
 8005262:	3501      	adds	r5, #1
 8005264:	68e3      	ldr	r3, [r4, #12]
 8005266:	6832      	ldr	r2, [r6, #0]
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	42ab      	cmp	r3, r5
 800526c:	ddd2      	ble.n	8005214 <_printf_common+0x3c>
 800526e:	0022      	movs	r2, r4
 8005270:	2301      	movs	r3, #1
 8005272:	9901      	ldr	r1, [sp, #4]
 8005274:	9800      	ldr	r0, [sp, #0]
 8005276:	9f08      	ldr	r7, [sp, #32]
 8005278:	3219      	adds	r2, #25
 800527a:	47b8      	blx	r7
 800527c:	3001      	adds	r0, #1
 800527e:	d1f0      	bne.n	8005262 <_printf_common+0x8a>
 8005280:	2001      	movs	r0, #1
 8005282:	4240      	negs	r0, r0
 8005284:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005286:	2030      	movs	r0, #48	@ 0x30
 8005288:	18e1      	adds	r1, r4, r3
 800528a:	3143      	adds	r1, #67	@ 0x43
 800528c:	7008      	strb	r0, [r1, #0]
 800528e:	0021      	movs	r1, r4
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	3145      	adds	r1, #69	@ 0x45
 8005294:	7809      	ldrb	r1, [r1, #0]
 8005296:	18a2      	adds	r2, r4, r2
 8005298:	3243      	adds	r2, #67	@ 0x43
 800529a:	3302      	adds	r3, #2
 800529c:	7011      	strb	r1, [r2, #0]
 800529e:	e7c1      	b.n	8005224 <_printf_common+0x4c>
 80052a0:	0022      	movs	r2, r4
 80052a2:	2301      	movs	r3, #1
 80052a4:	9901      	ldr	r1, [sp, #4]
 80052a6:	9800      	ldr	r0, [sp, #0]
 80052a8:	9f08      	ldr	r7, [sp, #32]
 80052aa:	321a      	adds	r2, #26
 80052ac:	47b8      	blx	r7
 80052ae:	3001      	adds	r0, #1
 80052b0:	d0e6      	beq.n	8005280 <_printf_common+0xa8>
 80052b2:	3601      	adds	r6, #1
 80052b4:	e7d1      	b.n	800525a <_printf_common+0x82>
	...

080052b8 <_printf_i>:
 80052b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ba:	b08b      	sub	sp, #44	@ 0x2c
 80052bc:	9206      	str	r2, [sp, #24]
 80052be:	000a      	movs	r2, r1
 80052c0:	3243      	adds	r2, #67	@ 0x43
 80052c2:	9307      	str	r3, [sp, #28]
 80052c4:	9005      	str	r0, [sp, #20]
 80052c6:	9203      	str	r2, [sp, #12]
 80052c8:	7e0a      	ldrb	r2, [r1, #24]
 80052ca:	000c      	movs	r4, r1
 80052cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80052ce:	2a78      	cmp	r2, #120	@ 0x78
 80052d0:	d809      	bhi.n	80052e6 <_printf_i+0x2e>
 80052d2:	2a62      	cmp	r2, #98	@ 0x62
 80052d4:	d80b      	bhi.n	80052ee <_printf_i+0x36>
 80052d6:	2a00      	cmp	r2, #0
 80052d8:	d100      	bne.n	80052dc <_printf_i+0x24>
 80052da:	e0bc      	b.n	8005456 <_printf_i+0x19e>
 80052dc:	497b      	ldr	r1, [pc, #492]	@ (80054cc <_printf_i+0x214>)
 80052de:	9104      	str	r1, [sp, #16]
 80052e0:	2a58      	cmp	r2, #88	@ 0x58
 80052e2:	d100      	bne.n	80052e6 <_printf_i+0x2e>
 80052e4:	e090      	b.n	8005408 <_printf_i+0x150>
 80052e6:	0025      	movs	r5, r4
 80052e8:	3542      	adds	r5, #66	@ 0x42
 80052ea:	702a      	strb	r2, [r5, #0]
 80052ec:	e022      	b.n	8005334 <_printf_i+0x7c>
 80052ee:	0010      	movs	r0, r2
 80052f0:	3863      	subs	r0, #99	@ 0x63
 80052f2:	2815      	cmp	r0, #21
 80052f4:	d8f7      	bhi.n	80052e6 <_printf_i+0x2e>
 80052f6:	f7fa ff07 	bl	8000108 <__gnu_thumb1_case_shi>
 80052fa:	0016      	.short	0x0016
 80052fc:	fff6001f 	.word	0xfff6001f
 8005300:	fff6fff6 	.word	0xfff6fff6
 8005304:	001ffff6 	.word	0x001ffff6
 8005308:	fff6fff6 	.word	0xfff6fff6
 800530c:	fff6fff6 	.word	0xfff6fff6
 8005310:	003600a1 	.word	0x003600a1
 8005314:	fff60080 	.word	0xfff60080
 8005318:	00b2fff6 	.word	0x00b2fff6
 800531c:	0036fff6 	.word	0x0036fff6
 8005320:	fff6fff6 	.word	0xfff6fff6
 8005324:	0084      	.short	0x0084
 8005326:	0025      	movs	r5, r4
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	3542      	adds	r5, #66	@ 0x42
 800532c:	1d11      	adds	r1, r2, #4
 800532e:	6019      	str	r1, [r3, #0]
 8005330:	6813      	ldr	r3, [r2, #0]
 8005332:	702b      	strb	r3, [r5, #0]
 8005334:	2301      	movs	r3, #1
 8005336:	e0a0      	b.n	800547a <_printf_i+0x1c2>
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	6809      	ldr	r1, [r1, #0]
 800533c:	1d02      	adds	r2, r0, #4
 800533e:	060d      	lsls	r5, r1, #24
 8005340:	d50b      	bpl.n	800535a <_printf_i+0xa2>
 8005342:	6806      	ldr	r6, [r0, #0]
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	2e00      	cmp	r6, #0
 8005348:	da03      	bge.n	8005352 <_printf_i+0x9a>
 800534a:	232d      	movs	r3, #45	@ 0x2d
 800534c:	9a03      	ldr	r2, [sp, #12]
 800534e:	4276      	negs	r6, r6
 8005350:	7013      	strb	r3, [r2, #0]
 8005352:	4b5e      	ldr	r3, [pc, #376]	@ (80054cc <_printf_i+0x214>)
 8005354:	270a      	movs	r7, #10
 8005356:	9304      	str	r3, [sp, #16]
 8005358:	e018      	b.n	800538c <_printf_i+0xd4>
 800535a:	6806      	ldr	r6, [r0, #0]
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	0649      	lsls	r1, r1, #25
 8005360:	d5f1      	bpl.n	8005346 <_printf_i+0x8e>
 8005362:	b236      	sxth	r6, r6
 8005364:	e7ef      	b.n	8005346 <_printf_i+0x8e>
 8005366:	6808      	ldr	r0, [r1, #0]
 8005368:	6819      	ldr	r1, [r3, #0]
 800536a:	c940      	ldmia	r1!, {r6}
 800536c:	0605      	lsls	r5, r0, #24
 800536e:	d402      	bmi.n	8005376 <_printf_i+0xbe>
 8005370:	0640      	lsls	r0, r0, #25
 8005372:	d500      	bpl.n	8005376 <_printf_i+0xbe>
 8005374:	b2b6      	uxth	r6, r6
 8005376:	6019      	str	r1, [r3, #0]
 8005378:	4b54      	ldr	r3, [pc, #336]	@ (80054cc <_printf_i+0x214>)
 800537a:	270a      	movs	r7, #10
 800537c:	9304      	str	r3, [sp, #16]
 800537e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005380:	d100      	bne.n	8005384 <_printf_i+0xcc>
 8005382:	3f02      	subs	r7, #2
 8005384:	0023      	movs	r3, r4
 8005386:	2200      	movs	r2, #0
 8005388:	3343      	adds	r3, #67	@ 0x43
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	6863      	ldr	r3, [r4, #4]
 800538e:	60a3      	str	r3, [r4, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	db03      	blt.n	800539c <_printf_i+0xe4>
 8005394:	2104      	movs	r1, #4
 8005396:	6822      	ldr	r2, [r4, #0]
 8005398:	438a      	bics	r2, r1
 800539a:	6022      	str	r2, [r4, #0]
 800539c:	2e00      	cmp	r6, #0
 800539e:	d102      	bne.n	80053a6 <_printf_i+0xee>
 80053a0:	9d03      	ldr	r5, [sp, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00c      	beq.n	80053c0 <_printf_i+0x108>
 80053a6:	9d03      	ldr	r5, [sp, #12]
 80053a8:	0030      	movs	r0, r6
 80053aa:	0039      	movs	r1, r7
 80053ac:	f7fa ff3c 	bl	8000228 <__aeabi_uidivmod>
 80053b0:	9b04      	ldr	r3, [sp, #16]
 80053b2:	3d01      	subs	r5, #1
 80053b4:	5c5b      	ldrb	r3, [r3, r1]
 80053b6:	702b      	strb	r3, [r5, #0]
 80053b8:	0033      	movs	r3, r6
 80053ba:	0006      	movs	r6, r0
 80053bc:	429f      	cmp	r7, r3
 80053be:	d9f3      	bls.n	80053a8 <_printf_i+0xf0>
 80053c0:	2f08      	cmp	r7, #8
 80053c2:	d109      	bne.n	80053d8 <_printf_i+0x120>
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	07db      	lsls	r3, r3, #31
 80053c8:	d506      	bpl.n	80053d8 <_printf_i+0x120>
 80053ca:	6862      	ldr	r2, [r4, #4]
 80053cc:	6923      	ldr	r3, [r4, #16]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	dc02      	bgt.n	80053d8 <_printf_i+0x120>
 80053d2:	2330      	movs	r3, #48	@ 0x30
 80053d4:	3d01      	subs	r5, #1
 80053d6:	702b      	strb	r3, [r5, #0]
 80053d8:	9b03      	ldr	r3, [sp, #12]
 80053da:	1b5b      	subs	r3, r3, r5
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	9b07      	ldr	r3, [sp, #28]
 80053e0:	0021      	movs	r1, r4
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	9805      	ldr	r0, [sp, #20]
 80053e6:	9b06      	ldr	r3, [sp, #24]
 80053e8:	aa09      	add	r2, sp, #36	@ 0x24
 80053ea:	f7ff fef5 	bl	80051d8 <_printf_common>
 80053ee:	3001      	adds	r0, #1
 80053f0:	d148      	bne.n	8005484 <_printf_i+0x1cc>
 80053f2:	2001      	movs	r0, #1
 80053f4:	4240      	negs	r0, r0
 80053f6:	b00b      	add	sp, #44	@ 0x2c
 80053f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053fa:	2220      	movs	r2, #32
 80053fc:	6809      	ldr	r1, [r1, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	6022      	str	r2, [r4, #0]
 8005402:	2278      	movs	r2, #120	@ 0x78
 8005404:	4932      	ldr	r1, [pc, #200]	@ (80054d0 <_printf_i+0x218>)
 8005406:	9104      	str	r1, [sp, #16]
 8005408:	0021      	movs	r1, r4
 800540a:	3145      	adds	r1, #69	@ 0x45
 800540c:	700a      	strb	r2, [r1, #0]
 800540e:	6819      	ldr	r1, [r3, #0]
 8005410:	6822      	ldr	r2, [r4, #0]
 8005412:	c940      	ldmia	r1!, {r6}
 8005414:	0610      	lsls	r0, r2, #24
 8005416:	d402      	bmi.n	800541e <_printf_i+0x166>
 8005418:	0650      	lsls	r0, r2, #25
 800541a:	d500      	bpl.n	800541e <_printf_i+0x166>
 800541c:	b2b6      	uxth	r6, r6
 800541e:	6019      	str	r1, [r3, #0]
 8005420:	07d3      	lsls	r3, r2, #31
 8005422:	d502      	bpl.n	800542a <_printf_i+0x172>
 8005424:	2320      	movs	r3, #32
 8005426:	4313      	orrs	r3, r2
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	2e00      	cmp	r6, #0
 800542c:	d001      	beq.n	8005432 <_printf_i+0x17a>
 800542e:	2710      	movs	r7, #16
 8005430:	e7a8      	b.n	8005384 <_printf_i+0xcc>
 8005432:	2220      	movs	r2, #32
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	4393      	bics	r3, r2
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	e7f8      	b.n	800542e <_printf_i+0x176>
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	680d      	ldr	r5, [r1, #0]
 8005440:	1d10      	adds	r0, r2, #4
 8005442:	6949      	ldr	r1, [r1, #20]
 8005444:	6018      	str	r0, [r3, #0]
 8005446:	6813      	ldr	r3, [r2, #0]
 8005448:	062e      	lsls	r6, r5, #24
 800544a:	d501      	bpl.n	8005450 <_printf_i+0x198>
 800544c:	6019      	str	r1, [r3, #0]
 800544e:	e002      	b.n	8005456 <_printf_i+0x19e>
 8005450:	066d      	lsls	r5, r5, #25
 8005452:	d5fb      	bpl.n	800544c <_printf_i+0x194>
 8005454:	8019      	strh	r1, [r3, #0]
 8005456:	2300      	movs	r3, #0
 8005458:	9d03      	ldr	r5, [sp, #12]
 800545a:	6123      	str	r3, [r4, #16]
 800545c:	e7bf      	b.n	80053de <_printf_i+0x126>
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	1d11      	adds	r1, r2, #4
 8005462:	6019      	str	r1, [r3, #0]
 8005464:	6815      	ldr	r5, [r2, #0]
 8005466:	2100      	movs	r1, #0
 8005468:	0028      	movs	r0, r5
 800546a:	6862      	ldr	r2, [r4, #4]
 800546c:	f000 f996 	bl	800579c <memchr>
 8005470:	2800      	cmp	r0, #0
 8005472:	d001      	beq.n	8005478 <_printf_i+0x1c0>
 8005474:	1b40      	subs	r0, r0, r5
 8005476:	6060      	str	r0, [r4, #4]
 8005478:	6863      	ldr	r3, [r4, #4]
 800547a:	6123      	str	r3, [r4, #16]
 800547c:	2300      	movs	r3, #0
 800547e:	9a03      	ldr	r2, [sp, #12]
 8005480:	7013      	strb	r3, [r2, #0]
 8005482:	e7ac      	b.n	80053de <_printf_i+0x126>
 8005484:	002a      	movs	r2, r5
 8005486:	6923      	ldr	r3, [r4, #16]
 8005488:	9906      	ldr	r1, [sp, #24]
 800548a:	9805      	ldr	r0, [sp, #20]
 800548c:	9d07      	ldr	r5, [sp, #28]
 800548e:	47a8      	blx	r5
 8005490:	3001      	adds	r0, #1
 8005492:	d0ae      	beq.n	80053f2 <_printf_i+0x13a>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	079b      	lsls	r3, r3, #30
 8005498:	d415      	bmi.n	80054c6 <_printf_i+0x20e>
 800549a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800549c:	68e0      	ldr	r0, [r4, #12]
 800549e:	4298      	cmp	r0, r3
 80054a0:	daa9      	bge.n	80053f6 <_printf_i+0x13e>
 80054a2:	0018      	movs	r0, r3
 80054a4:	e7a7      	b.n	80053f6 <_printf_i+0x13e>
 80054a6:	0022      	movs	r2, r4
 80054a8:	2301      	movs	r3, #1
 80054aa:	9906      	ldr	r1, [sp, #24]
 80054ac:	9805      	ldr	r0, [sp, #20]
 80054ae:	9e07      	ldr	r6, [sp, #28]
 80054b0:	3219      	adds	r2, #25
 80054b2:	47b0      	blx	r6
 80054b4:	3001      	adds	r0, #1
 80054b6:	d09c      	beq.n	80053f2 <_printf_i+0x13a>
 80054b8:	3501      	adds	r5, #1
 80054ba:	68e3      	ldr	r3, [r4, #12]
 80054bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054be:	1a9b      	subs	r3, r3, r2
 80054c0:	42ab      	cmp	r3, r5
 80054c2:	dcf0      	bgt.n	80054a6 <_printf_i+0x1ee>
 80054c4:	e7e9      	b.n	800549a <_printf_i+0x1e2>
 80054c6:	2500      	movs	r5, #0
 80054c8:	e7f7      	b.n	80054ba <_printf_i+0x202>
 80054ca:	46c0      	nop			@ (mov r8, r8)
 80054cc:	080059c1 	.word	0x080059c1
 80054d0:	080059d2 	.word	0x080059d2

080054d4 <__sflush_r>:
 80054d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054d6:	220c      	movs	r2, #12
 80054d8:	5e8b      	ldrsh	r3, [r1, r2]
 80054da:	0005      	movs	r5, r0
 80054dc:	000c      	movs	r4, r1
 80054de:	071a      	lsls	r2, r3, #28
 80054e0:	d456      	bmi.n	8005590 <__sflush_r+0xbc>
 80054e2:	684a      	ldr	r2, [r1, #4]
 80054e4:	2a00      	cmp	r2, #0
 80054e6:	dc02      	bgt.n	80054ee <__sflush_r+0x1a>
 80054e8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80054ea:	2a00      	cmp	r2, #0
 80054ec:	dd4e      	ble.n	800558c <__sflush_r+0xb8>
 80054ee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80054f0:	2f00      	cmp	r7, #0
 80054f2:	d04b      	beq.n	800558c <__sflush_r+0xb8>
 80054f4:	2200      	movs	r2, #0
 80054f6:	2080      	movs	r0, #128	@ 0x80
 80054f8:	682e      	ldr	r6, [r5, #0]
 80054fa:	602a      	str	r2, [r5, #0]
 80054fc:	001a      	movs	r2, r3
 80054fe:	0140      	lsls	r0, r0, #5
 8005500:	6a21      	ldr	r1, [r4, #32]
 8005502:	4002      	ands	r2, r0
 8005504:	4203      	tst	r3, r0
 8005506:	d033      	beq.n	8005570 <__sflush_r+0x9c>
 8005508:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	075b      	lsls	r3, r3, #29
 800550e:	d506      	bpl.n	800551e <__sflush_r+0x4a>
 8005510:	6863      	ldr	r3, [r4, #4]
 8005512:	1ad2      	subs	r2, r2, r3
 8005514:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <__sflush_r+0x4a>
 800551a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800551c:	1ad2      	subs	r2, r2, r3
 800551e:	2300      	movs	r3, #0
 8005520:	0028      	movs	r0, r5
 8005522:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005524:	6a21      	ldr	r1, [r4, #32]
 8005526:	47b8      	blx	r7
 8005528:	89a2      	ldrh	r2, [r4, #12]
 800552a:	1c43      	adds	r3, r0, #1
 800552c:	d106      	bne.n	800553c <__sflush_r+0x68>
 800552e:	6829      	ldr	r1, [r5, #0]
 8005530:	291d      	cmp	r1, #29
 8005532:	d846      	bhi.n	80055c2 <__sflush_r+0xee>
 8005534:	4b29      	ldr	r3, [pc, #164]	@ (80055dc <__sflush_r+0x108>)
 8005536:	410b      	asrs	r3, r1
 8005538:	07db      	lsls	r3, r3, #31
 800553a:	d442      	bmi.n	80055c2 <__sflush_r+0xee>
 800553c:	2300      	movs	r3, #0
 800553e:	6063      	str	r3, [r4, #4]
 8005540:	6923      	ldr	r3, [r4, #16]
 8005542:	6023      	str	r3, [r4, #0]
 8005544:	04d2      	lsls	r2, r2, #19
 8005546:	d505      	bpl.n	8005554 <__sflush_r+0x80>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <__sflush_r+0x7e>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d100      	bne.n	8005554 <__sflush_r+0x80>
 8005552:	6560      	str	r0, [r4, #84]	@ 0x54
 8005554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005556:	602e      	str	r6, [r5, #0]
 8005558:	2900      	cmp	r1, #0
 800555a:	d017      	beq.n	800558c <__sflush_r+0xb8>
 800555c:	0023      	movs	r3, r4
 800555e:	3344      	adds	r3, #68	@ 0x44
 8005560:	4299      	cmp	r1, r3
 8005562:	d002      	beq.n	800556a <__sflush_r+0x96>
 8005564:	0028      	movs	r0, r5
 8005566:	f7ff fbf7 	bl	8004d58 <_free_r>
 800556a:	2300      	movs	r3, #0
 800556c:	6363      	str	r3, [r4, #52]	@ 0x34
 800556e:	e00d      	b.n	800558c <__sflush_r+0xb8>
 8005570:	2301      	movs	r3, #1
 8005572:	0028      	movs	r0, r5
 8005574:	47b8      	blx	r7
 8005576:	0002      	movs	r2, r0
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	d1c6      	bne.n	800550a <__sflush_r+0x36>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0c3      	beq.n	800550a <__sflush_r+0x36>
 8005582:	2b1d      	cmp	r3, #29
 8005584:	d001      	beq.n	800558a <__sflush_r+0xb6>
 8005586:	2b16      	cmp	r3, #22
 8005588:	d11a      	bne.n	80055c0 <__sflush_r+0xec>
 800558a:	602e      	str	r6, [r5, #0]
 800558c:	2000      	movs	r0, #0
 800558e:	e01e      	b.n	80055ce <__sflush_r+0xfa>
 8005590:	690e      	ldr	r6, [r1, #16]
 8005592:	2e00      	cmp	r6, #0
 8005594:	d0fa      	beq.n	800558c <__sflush_r+0xb8>
 8005596:	680f      	ldr	r7, [r1, #0]
 8005598:	600e      	str	r6, [r1, #0]
 800559a:	1bba      	subs	r2, r7, r6
 800559c:	9201      	str	r2, [sp, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	079b      	lsls	r3, r3, #30
 80055a2:	d100      	bne.n	80055a6 <__sflush_r+0xd2>
 80055a4:	694a      	ldr	r2, [r1, #20]
 80055a6:	60a2      	str	r2, [r4, #8]
 80055a8:	9b01      	ldr	r3, [sp, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	ddee      	ble.n	800558c <__sflush_r+0xb8>
 80055ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80055b0:	0032      	movs	r2, r6
 80055b2:	001f      	movs	r7, r3
 80055b4:	0028      	movs	r0, r5
 80055b6:	9b01      	ldr	r3, [sp, #4]
 80055b8:	6a21      	ldr	r1, [r4, #32]
 80055ba:	47b8      	blx	r7
 80055bc:	2800      	cmp	r0, #0
 80055be:	dc07      	bgt.n	80055d0 <__sflush_r+0xfc>
 80055c0:	89a2      	ldrh	r2, [r4, #12]
 80055c2:	2340      	movs	r3, #64	@ 0x40
 80055c4:	2001      	movs	r0, #1
 80055c6:	4313      	orrs	r3, r2
 80055c8:	b21b      	sxth	r3, r3
 80055ca:	81a3      	strh	r3, [r4, #12]
 80055cc:	4240      	negs	r0, r0
 80055ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055d0:	9b01      	ldr	r3, [sp, #4]
 80055d2:	1836      	adds	r6, r6, r0
 80055d4:	1a1b      	subs	r3, r3, r0
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	e7e6      	b.n	80055a8 <__sflush_r+0xd4>
 80055da:	46c0      	nop			@ (mov r8, r8)
 80055dc:	dfbffffe 	.word	0xdfbffffe

080055e0 <_fflush_r>:
 80055e0:	690b      	ldr	r3, [r1, #16]
 80055e2:	b570      	push	{r4, r5, r6, lr}
 80055e4:	0005      	movs	r5, r0
 80055e6:	000c      	movs	r4, r1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d102      	bne.n	80055f2 <_fflush_r+0x12>
 80055ec:	2500      	movs	r5, #0
 80055ee:	0028      	movs	r0, r5
 80055f0:	bd70      	pop	{r4, r5, r6, pc}
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d004      	beq.n	8005600 <_fflush_r+0x20>
 80055f6:	6a03      	ldr	r3, [r0, #32]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <_fflush_r+0x20>
 80055fc:	f7ff fa98 	bl	8004b30 <__sinit>
 8005600:	220c      	movs	r2, #12
 8005602:	5ea3      	ldrsh	r3, [r4, r2]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f1      	beq.n	80055ec <_fflush_r+0xc>
 8005608:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800560a:	07d2      	lsls	r2, r2, #31
 800560c:	d404      	bmi.n	8005618 <_fflush_r+0x38>
 800560e:	059b      	lsls	r3, r3, #22
 8005610:	d402      	bmi.n	8005618 <_fflush_r+0x38>
 8005612:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005614:	f7ff fb9d 	bl	8004d52 <__retarget_lock_acquire_recursive>
 8005618:	0028      	movs	r0, r5
 800561a:	0021      	movs	r1, r4
 800561c:	f7ff ff5a 	bl	80054d4 <__sflush_r>
 8005620:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005622:	0005      	movs	r5, r0
 8005624:	07db      	lsls	r3, r3, #31
 8005626:	d4e2      	bmi.n	80055ee <_fflush_r+0xe>
 8005628:	89a3      	ldrh	r3, [r4, #12]
 800562a:	059b      	lsls	r3, r3, #22
 800562c:	d4df      	bmi.n	80055ee <_fflush_r+0xe>
 800562e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005630:	f7ff fb90 	bl	8004d54 <__retarget_lock_release_recursive>
 8005634:	e7db      	b.n	80055ee <_fflush_r+0xe>

08005636 <__swbuf_r>:
 8005636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005638:	0006      	movs	r6, r0
 800563a:	000d      	movs	r5, r1
 800563c:	0014      	movs	r4, r2
 800563e:	2800      	cmp	r0, #0
 8005640:	d004      	beq.n	800564c <__swbuf_r+0x16>
 8005642:	6a03      	ldr	r3, [r0, #32]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <__swbuf_r+0x16>
 8005648:	f7ff fa72 	bl	8004b30 <__sinit>
 800564c:	69a3      	ldr	r3, [r4, #24]
 800564e:	60a3      	str	r3, [r4, #8]
 8005650:	89a3      	ldrh	r3, [r4, #12]
 8005652:	071b      	lsls	r3, r3, #28
 8005654:	d502      	bpl.n	800565c <__swbuf_r+0x26>
 8005656:	6923      	ldr	r3, [r4, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d109      	bne.n	8005670 <__swbuf_r+0x3a>
 800565c:	0021      	movs	r1, r4
 800565e:	0030      	movs	r0, r6
 8005660:	f000 f82c 	bl	80056bc <__swsetup_r>
 8005664:	2800      	cmp	r0, #0
 8005666:	d003      	beq.n	8005670 <__swbuf_r+0x3a>
 8005668:	2501      	movs	r5, #1
 800566a:	426d      	negs	r5, r5
 800566c:	0028      	movs	r0, r5
 800566e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	6820      	ldr	r0, [r4, #0]
 8005674:	b2ef      	uxtb	r7, r5
 8005676:	1ac0      	subs	r0, r0, r3
 8005678:	6963      	ldr	r3, [r4, #20]
 800567a:	b2ed      	uxtb	r5, r5
 800567c:	4283      	cmp	r3, r0
 800567e:	dc05      	bgt.n	800568c <__swbuf_r+0x56>
 8005680:	0021      	movs	r1, r4
 8005682:	0030      	movs	r0, r6
 8005684:	f7ff ffac 	bl	80055e0 <_fflush_r>
 8005688:	2800      	cmp	r0, #0
 800568a:	d1ed      	bne.n	8005668 <__swbuf_r+0x32>
 800568c:	68a3      	ldr	r3, [r4, #8]
 800568e:	3001      	adds	r0, #1
 8005690:	3b01      	subs	r3, #1
 8005692:	60a3      	str	r3, [r4, #8]
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	6022      	str	r2, [r4, #0]
 800569a:	701f      	strb	r7, [r3, #0]
 800569c:	6963      	ldr	r3, [r4, #20]
 800569e:	4283      	cmp	r3, r0
 80056a0:	d004      	beq.n	80056ac <__swbuf_r+0x76>
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	07db      	lsls	r3, r3, #31
 80056a6:	d5e1      	bpl.n	800566c <__swbuf_r+0x36>
 80056a8:	2d0a      	cmp	r5, #10
 80056aa:	d1df      	bne.n	800566c <__swbuf_r+0x36>
 80056ac:	0021      	movs	r1, r4
 80056ae:	0030      	movs	r0, r6
 80056b0:	f7ff ff96 	bl	80055e0 <_fflush_r>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d0d9      	beq.n	800566c <__swbuf_r+0x36>
 80056b8:	e7d6      	b.n	8005668 <__swbuf_r+0x32>
	...

080056bc <__swsetup_r>:
 80056bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005774 <__swsetup_r+0xb8>)
 80056be:	b570      	push	{r4, r5, r6, lr}
 80056c0:	0005      	movs	r5, r0
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	000c      	movs	r4, r1
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d004      	beq.n	80056d4 <__swsetup_r+0x18>
 80056ca:	6a03      	ldr	r3, [r0, #32]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <__swsetup_r+0x18>
 80056d0:	f7ff fa2e 	bl	8004b30 <__sinit>
 80056d4:	230c      	movs	r3, #12
 80056d6:	5ee2      	ldrsh	r2, [r4, r3]
 80056d8:	0713      	lsls	r3, r2, #28
 80056da:	d423      	bmi.n	8005724 <__swsetup_r+0x68>
 80056dc:	06d3      	lsls	r3, r2, #27
 80056de:	d407      	bmi.n	80056f0 <__swsetup_r+0x34>
 80056e0:	2309      	movs	r3, #9
 80056e2:	602b      	str	r3, [r5, #0]
 80056e4:	2340      	movs	r3, #64	@ 0x40
 80056e6:	2001      	movs	r0, #1
 80056e8:	4313      	orrs	r3, r2
 80056ea:	81a3      	strh	r3, [r4, #12]
 80056ec:	4240      	negs	r0, r0
 80056ee:	e03a      	b.n	8005766 <__swsetup_r+0xaa>
 80056f0:	0752      	lsls	r2, r2, #29
 80056f2:	d513      	bpl.n	800571c <__swsetup_r+0x60>
 80056f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056f6:	2900      	cmp	r1, #0
 80056f8:	d008      	beq.n	800570c <__swsetup_r+0x50>
 80056fa:	0023      	movs	r3, r4
 80056fc:	3344      	adds	r3, #68	@ 0x44
 80056fe:	4299      	cmp	r1, r3
 8005700:	d002      	beq.n	8005708 <__swsetup_r+0x4c>
 8005702:	0028      	movs	r0, r5
 8005704:	f7ff fb28 	bl	8004d58 <_free_r>
 8005708:	2300      	movs	r3, #0
 800570a:	6363      	str	r3, [r4, #52]	@ 0x34
 800570c:	2224      	movs	r2, #36	@ 0x24
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	4393      	bics	r3, r2
 8005712:	81a3      	strh	r3, [r4, #12]
 8005714:	2300      	movs	r3, #0
 8005716:	6063      	str	r3, [r4, #4]
 8005718:	6923      	ldr	r3, [r4, #16]
 800571a:	6023      	str	r3, [r4, #0]
 800571c:	2308      	movs	r3, #8
 800571e:	89a2      	ldrh	r2, [r4, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	81a3      	strh	r3, [r4, #12]
 8005724:	6923      	ldr	r3, [r4, #16]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10b      	bne.n	8005742 <__swsetup_r+0x86>
 800572a:	21a0      	movs	r1, #160	@ 0xa0
 800572c:	2280      	movs	r2, #128	@ 0x80
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	0089      	lsls	r1, r1, #2
 8005732:	0092      	lsls	r2, r2, #2
 8005734:	400b      	ands	r3, r1
 8005736:	4293      	cmp	r3, r2
 8005738:	d003      	beq.n	8005742 <__swsetup_r+0x86>
 800573a:	0021      	movs	r1, r4
 800573c:	0028      	movs	r0, r5
 800573e:	f000 f863 	bl	8005808 <__smakebuf_r>
 8005742:	230c      	movs	r3, #12
 8005744:	5ee2      	ldrsh	r2, [r4, r3]
 8005746:	2101      	movs	r1, #1
 8005748:	0013      	movs	r3, r2
 800574a:	400b      	ands	r3, r1
 800574c:	420a      	tst	r2, r1
 800574e:	d00b      	beq.n	8005768 <__swsetup_r+0xac>
 8005750:	2300      	movs	r3, #0
 8005752:	60a3      	str	r3, [r4, #8]
 8005754:	6963      	ldr	r3, [r4, #20]
 8005756:	425b      	negs	r3, r3
 8005758:	61a3      	str	r3, [r4, #24]
 800575a:	2000      	movs	r0, #0
 800575c:	6923      	ldr	r3, [r4, #16]
 800575e:	4283      	cmp	r3, r0
 8005760:	d101      	bne.n	8005766 <__swsetup_r+0xaa>
 8005762:	0613      	lsls	r3, r2, #24
 8005764:	d4be      	bmi.n	80056e4 <__swsetup_r+0x28>
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	0791      	lsls	r1, r2, #30
 800576a:	d400      	bmi.n	800576e <__swsetup_r+0xb2>
 800576c:	6963      	ldr	r3, [r4, #20]
 800576e:	60a3      	str	r3, [r4, #8]
 8005770:	e7f3      	b.n	800575a <__swsetup_r+0x9e>
 8005772:	46c0      	nop			@ (mov r8, r8)
 8005774:	20000018 	.word	0x20000018

08005778 <_sbrk_r>:
 8005778:	2300      	movs	r3, #0
 800577a:	b570      	push	{r4, r5, r6, lr}
 800577c:	4d06      	ldr	r5, [pc, #24]	@ (8005798 <_sbrk_r+0x20>)
 800577e:	0004      	movs	r4, r0
 8005780:	0008      	movs	r0, r1
 8005782:	602b      	str	r3, [r5, #0]
 8005784:	f7fb fe5a 	bl	800143c <_sbrk>
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	d103      	bne.n	8005794 <_sbrk_r+0x1c>
 800578c:	682b      	ldr	r3, [r5, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d000      	beq.n	8005794 <_sbrk_r+0x1c>
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	bd70      	pop	{r4, r5, r6, pc}
 8005796:	46c0      	nop			@ (mov r8, r8)
 8005798:	20000330 	.word	0x20000330

0800579c <memchr>:
 800579c:	b2c9      	uxtb	r1, r1
 800579e:	1882      	adds	r2, r0, r2
 80057a0:	4290      	cmp	r0, r2
 80057a2:	d101      	bne.n	80057a8 <memchr+0xc>
 80057a4:	2000      	movs	r0, #0
 80057a6:	4770      	bx	lr
 80057a8:	7803      	ldrb	r3, [r0, #0]
 80057aa:	428b      	cmp	r3, r1
 80057ac:	d0fb      	beq.n	80057a6 <memchr+0xa>
 80057ae:	3001      	adds	r0, #1
 80057b0:	e7f6      	b.n	80057a0 <memchr+0x4>
	...

080057b4 <__swhatbuf_r>:
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	000e      	movs	r6, r1
 80057b8:	001d      	movs	r5, r3
 80057ba:	230e      	movs	r3, #14
 80057bc:	5ec9      	ldrsh	r1, [r1, r3]
 80057be:	0014      	movs	r4, r2
 80057c0:	b096      	sub	sp, #88	@ 0x58
 80057c2:	2900      	cmp	r1, #0
 80057c4:	da0c      	bge.n	80057e0 <__swhatbuf_r+0x2c>
 80057c6:	89b2      	ldrh	r2, [r6, #12]
 80057c8:	2380      	movs	r3, #128	@ 0x80
 80057ca:	0011      	movs	r1, r2
 80057cc:	4019      	ands	r1, r3
 80057ce:	421a      	tst	r2, r3
 80057d0:	d114      	bne.n	80057fc <__swhatbuf_r+0x48>
 80057d2:	2380      	movs	r3, #128	@ 0x80
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	2000      	movs	r0, #0
 80057d8:	6029      	str	r1, [r5, #0]
 80057da:	6023      	str	r3, [r4, #0]
 80057dc:	b016      	add	sp, #88	@ 0x58
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	466a      	mov	r2, sp
 80057e2:	f000 f853 	bl	800588c <_fstat_r>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	dbed      	blt.n	80057c6 <__swhatbuf_r+0x12>
 80057ea:	23f0      	movs	r3, #240	@ 0xf0
 80057ec:	9901      	ldr	r1, [sp, #4]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	4019      	ands	r1, r3
 80057f2:	4b04      	ldr	r3, [pc, #16]	@ (8005804 <__swhatbuf_r+0x50>)
 80057f4:	18c9      	adds	r1, r1, r3
 80057f6:	424b      	negs	r3, r1
 80057f8:	4159      	adcs	r1, r3
 80057fa:	e7ea      	b.n	80057d2 <__swhatbuf_r+0x1e>
 80057fc:	2100      	movs	r1, #0
 80057fe:	2340      	movs	r3, #64	@ 0x40
 8005800:	e7e9      	b.n	80057d6 <__swhatbuf_r+0x22>
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	ffffe000 	.word	0xffffe000

08005808 <__smakebuf_r>:
 8005808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800580a:	2602      	movs	r6, #2
 800580c:	898b      	ldrh	r3, [r1, #12]
 800580e:	0005      	movs	r5, r0
 8005810:	000c      	movs	r4, r1
 8005812:	b085      	sub	sp, #20
 8005814:	4233      	tst	r3, r6
 8005816:	d007      	beq.n	8005828 <__smakebuf_r+0x20>
 8005818:	0023      	movs	r3, r4
 800581a:	3347      	adds	r3, #71	@ 0x47
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	6123      	str	r3, [r4, #16]
 8005820:	2301      	movs	r3, #1
 8005822:	6163      	str	r3, [r4, #20]
 8005824:	b005      	add	sp, #20
 8005826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005828:	ab03      	add	r3, sp, #12
 800582a:	aa02      	add	r2, sp, #8
 800582c:	f7ff ffc2 	bl	80057b4 <__swhatbuf_r>
 8005830:	9f02      	ldr	r7, [sp, #8]
 8005832:	9001      	str	r0, [sp, #4]
 8005834:	0039      	movs	r1, r7
 8005836:	0028      	movs	r0, r5
 8005838:	f7ff fafa 	bl	8004e30 <_malloc_r>
 800583c:	2800      	cmp	r0, #0
 800583e:	d108      	bne.n	8005852 <__smakebuf_r+0x4a>
 8005840:	220c      	movs	r2, #12
 8005842:	5ea3      	ldrsh	r3, [r4, r2]
 8005844:	059a      	lsls	r2, r3, #22
 8005846:	d4ed      	bmi.n	8005824 <__smakebuf_r+0x1c>
 8005848:	2203      	movs	r2, #3
 800584a:	4393      	bics	r3, r2
 800584c:	431e      	orrs	r6, r3
 800584e:	81a6      	strh	r6, [r4, #12]
 8005850:	e7e2      	b.n	8005818 <__smakebuf_r+0x10>
 8005852:	2380      	movs	r3, #128	@ 0x80
 8005854:	89a2      	ldrh	r2, [r4, #12]
 8005856:	6020      	str	r0, [r4, #0]
 8005858:	4313      	orrs	r3, r2
 800585a:	81a3      	strh	r3, [r4, #12]
 800585c:	9b03      	ldr	r3, [sp, #12]
 800585e:	6120      	str	r0, [r4, #16]
 8005860:	6167      	str	r7, [r4, #20]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00c      	beq.n	8005880 <__smakebuf_r+0x78>
 8005866:	0028      	movs	r0, r5
 8005868:	230e      	movs	r3, #14
 800586a:	5ee1      	ldrsh	r1, [r4, r3]
 800586c:	f000 f820 	bl	80058b0 <_isatty_r>
 8005870:	2800      	cmp	r0, #0
 8005872:	d005      	beq.n	8005880 <__smakebuf_r+0x78>
 8005874:	2303      	movs	r3, #3
 8005876:	89a2      	ldrh	r2, [r4, #12]
 8005878:	439a      	bics	r2, r3
 800587a:	3b02      	subs	r3, #2
 800587c:	4313      	orrs	r3, r2
 800587e:	81a3      	strh	r3, [r4, #12]
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	9a01      	ldr	r2, [sp, #4]
 8005884:	4313      	orrs	r3, r2
 8005886:	81a3      	strh	r3, [r4, #12]
 8005888:	e7cc      	b.n	8005824 <__smakebuf_r+0x1c>
	...

0800588c <_fstat_r>:
 800588c:	2300      	movs	r3, #0
 800588e:	b570      	push	{r4, r5, r6, lr}
 8005890:	4d06      	ldr	r5, [pc, #24]	@ (80058ac <_fstat_r+0x20>)
 8005892:	0004      	movs	r4, r0
 8005894:	0008      	movs	r0, r1
 8005896:	0011      	movs	r1, r2
 8005898:	602b      	str	r3, [r5, #0]
 800589a:	f7fb fdac 	bl	80013f6 <_fstat>
 800589e:	1c43      	adds	r3, r0, #1
 80058a0:	d103      	bne.n	80058aa <_fstat_r+0x1e>
 80058a2:	682b      	ldr	r3, [r5, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d000      	beq.n	80058aa <_fstat_r+0x1e>
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
 80058ac:	20000330 	.word	0x20000330

080058b0 <_isatty_r>:
 80058b0:	2300      	movs	r3, #0
 80058b2:	b570      	push	{r4, r5, r6, lr}
 80058b4:	4d06      	ldr	r5, [pc, #24]	@ (80058d0 <_isatty_r+0x20>)
 80058b6:	0004      	movs	r4, r0
 80058b8:	0008      	movs	r0, r1
 80058ba:	602b      	str	r3, [r5, #0]
 80058bc:	f7fb fda9 	bl	8001412 <_isatty>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d103      	bne.n	80058cc <_isatty_r+0x1c>
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d000      	beq.n	80058cc <_isatty_r+0x1c>
 80058ca:	6023      	str	r3, [r4, #0]
 80058cc:	bd70      	pop	{r4, r5, r6, pc}
 80058ce:	46c0      	nop			@ (mov r8, r8)
 80058d0:	20000330 	.word	0x20000330

080058d4 <_init>:
 80058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d6:	46c0      	nop			@ (mov r8, r8)
 80058d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058da:	bc08      	pop	{r3}
 80058dc:	469e      	mov	lr, r3
 80058de:	4770      	bx	lr

080058e0 <_fini>:
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	46c0      	nop			@ (mov r8, r8)
 80058e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e6:	bc08      	pop	{r3}
 80058e8:	469e      	mov	lr, r3
 80058ea:	4770      	bx	lr
